' Gambas class file
'    This file is part of vinstall-ng

'    vinstall-ng is free software: you can redistribute it and/or modify
'    it under the terms of the GNU General Public License as published by
'    the Free Software Foundation, either version 2 of the License, or
'    (at your option) any later version.

'    vinstall-ng  is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'    GNU General Public License for more details.

'    You should have received a copy of the GNU General Public License
'    along with vinstall-ng.  If not, see <http://www.gnu.org/licenses/>.
'=====================================================================================

PUBLIC objinitrds AS NEW Object[]
PUBLIC objChecks AS NEW Object[]
PUBLIC objappends AS NEW Object[]
PUBLIC objNames AS NEW Object[]
PUBLIC objDefOs AS NEW Object[]
PUBLIC objMenuObjects AS NEW Object[]
PUBLIC objKernels AS NEW Object[]


PUBLIC SUB populate_linux_entry(sLinux AS String, sLinuxRoot AS String, objTabStrip AS TabStrip)
  
  DIM i AS Integer
  DIM tb AS TextBox
  DIM tl AS TextLabel
  DIM cb AS CheckBox
  DIM hb AS HBox
  DIM comb AS ComboBox
  
  IF NOT sLinux OR Len(Trim(sLinux)) <= 0 THEN RETURN 
  'Message(sLinux)
  IF sLinuxRoot = ClsGlobal.sRoot THEN ' This is the just installed linux
    i = 0
      WITH objTabStrip
        .Index = i
        .Text = "VectorLinux"
      END WITH 
  ELSE 
  i = objTabStrip.Count - 1
    WITH objTabStrip
      .Index = i
      .Text = sLinux
    END WITH 
  END IF
  
  tl = NEW TextLabel(objTabStrip) AS "Banner"
    WITH tl
      .Text = ("Installation found in") & Space(1) & sLinuxRoot
      .Height = 24
      .Alignment = Align.Left
      .Width = 200
      .Expand = TRUE
      '.Border = Border.Plain
      '.AutoResize = TRUE
      .Move(4, 4)
    END WITH 
  hb = NEW HBox(objTabStrip) ' separator space
    WITH hb
      .Height = 16
      .Width = 12
      .Expand = TRUE
    END WITH 
  cb = NEW CheckBox(objTabStrip) ' Inlcude/Exclude OS from boot menu
    WITH cb
      .Expand = TRUE
      .Text = ("Include in boot menu")
      .Value = TRUE
      .Height = 24
      .Tag = sLinuxRoot
    END WITH 
    objChecks.Add(cb)
  hb = NEW HBox(objTabStrip) ' separator space
    WITH hb
      .Height = 12
      .Expand = TRUE
    END WITH 
  hb = NEW HBox(objTabStrip) ' This will hold a few objects of it's own
    WITH hb
      .Height = 28
      .Expand = TRUE
      .Padding = 2
      .Spacing = 2
    END WITH 
  tl = NEW TextLabel(hb) ' Name label
    WITH tl
      .Text = ("Name")
      .Expand = FALSE
      .Width = 200
      .Adjust()
      .AutoResize = TRUE
      .Height = .Parent.Height
      .Alignment = Align.Left
    END WITH 
  tb = NEW TextBox(hb) AS "tbOsLabel" ' Name entry box
    WITH tb
      .Expand = TRUE
      .Height = .Parent.Height
      .Text = sLinux '  default to the distro found
      .Tag = sLinuxRoot
    END WITH 
    objNames.Add(tb)
  tl = NEW TextLabel(hb) ' initrd label
    WITH tl
      .text = ("Initial RAM disk image")
      .Alignment = Align.Right
      .Height = .Parent.Height
      .Expand = TRUE
    END WITH 
    
  comb = NEW ComboBox(hb) ' initrd selection combobox
    WITH comb
      .Height = .Parent.Height
      .Expand = TRUE
      .READonly = TRUE
      .Tag = sLinuxRoot
    END WITH 
      ' populate the initrd box
      'Message(sLinuxRoot)
        MdlBootMngr.find_initrds_for_this_linux(sLinuxRoot, comb) ' populate initrd selection
        
    objinitrds.Add(comb)
  hb = NEW HBox(objTabStrip) ' blank space separator
  hb.Height = 8
  hb.Expand = TRUE
  tl = NEW TextLabel(objTabStrip) ' append line textlabel
    WITH tl
      .Text = ("Kernel boot options")
      .Height = 24
      .Width = 200
      .Alignment = Align.Left
      .Expand = FALSE
      .AutoResize = TRUE
    END WITH 
  tb = NEW TextBox(objTabStrip) ' append input line
    WITH tb
      .Text = "splash=silent"
      .Height = 24
      .Expand = TRUE
      .Tag = sLinuxRoot
    END WITH 
      objappends.Add(tb)
    
    ' ======================= ONLY FOR THE OS WE JUST INSTALLED ===============================
  IF sLinuxRoot = ClsGlobal.sRoot THEN 
    hb = NEW HBox(objTabStrip) ' yet another separator
      WITH hb
        .Expand = TRUE
        .Height = 8
      END WITH 
    cb = NEW CheckBox(objTabStrip) AS "bCLIOption"
      WITH cb
        .Value = TRUE
        .Text = ("Add option to boot this operating system into text mode")
        .Height = 24
        .Expand = TRUE
        .Tag = sLinuxRoot
      END WITH 
    ' hb = NEW HBox(objTabStrip)
    '   hb.Height = 4
    '   hb.Expand = TRUE
      
  END IF
    objTabStrip.Refresh()
  
      
  
END




PUBLIC SUB List_Other_Linuxes(objTabStrip AS TabStrip)
 DIM sDump, sPartitions, sPart AS String
  DIM sPartList AS String[]
  DIM i AS Integer
  DIM sOutcome AS String
  
  ' objappends = NEW Object[]
  ' objChecks = NEW Object[]
  ' objinitrds = NEW Object[]
  ' objNames = NEW Object[]
  ' 
  MdlBootMngr.bScanned = TRUE

  
  ' First, and foremost, we will list the recently isntalled VectorLinux
    'populate_linux_entry("VectorLinux", ClsGlobal.sRoot, objTabStrip) ' This will list the newly isntall VL OS
  ' Now list all other linuxes =================================================
      SHELL "probepart | grep \"^/dev\" | grep -vi swap | grep -i linux | tr -s \' \' | cut -f 1 -d \' \'" TO sDump
        sDump = Trim(sDump)
          IF Len(sDump) <= 0 THEN RETURN ' nothing found, VL is the only distro in this box ... 
        sPartList = Split(sDump, gb.NewLine)
          FOR i = 0 TO sPartList.Max
            sPart = Trim(Right(sPartList[i], Len(sPartList[i]) - RInStr(sPartList[i], "/")))

                sOutcome = MdlBootMngr.Find_Linux(Trim(sPartList[i]))
                  IF sOutcome AND sOutcome <> "None" THEN 
                  'INC objTabStrip.Count
                  objTabStrip.Index = objTabStrip.Count - 1
                  populate_linux_entry(sOutcome, Trim(sPartList[i]), objTabStrip)
                  INC objTabStrip.Count
                END IF
              'END IF
                
          NEXT 
        DEC objTabStrip.Count ' remove the trailing blank tab from the tabstrip.
        
  
  ' now list all other Windows os's ============================================
    
  
END


PUBLIC SUB Form_Open()

   WITH ME
    .tlbanner.Text = "<h2>" & tlbanner.text & "</h2>"
    .cbVidRes.List = [("Standard"), ("Bootplash Med"), ("Bootsplash High"), ("Bootsplash Extra High")]
    .TLoSlIST.Text = "<b>" & UCase(.TLoSlIST.Text) & "</b>"
  END WITH 
'ME.Fake_Names()
  'ME.List_Other_Linuxes(ME.TsOsList)
  'ME.Update_Default_boot_choices()
  ' Write /etc/vector-version
  MdlMain.WRITE_ETC_VECTOR_VERSION()
  
  MdlBootMngr.Display_Bootmanager_Target_Options(ME.cbTarget)
  ME.PROBE_SYSTEM_FOR_OS("lilo")
  
  ME.Timer1.Enabled = TRUE  
  
  ' Update status tree
    MdlMain.ADVANCE_STATUS_TREE("Step5", "Step6")

END

PUBLIC FUNCTION GetNext() AS String
  
  RETURN "Conf1"
  
END
PUBLIC SUB OnExit()
  
  IF rbNone.Value = TRUE THEN RETURN 
  
    IF MdlBootMngr.CHECK_LILO_VALUES(FALSE) > 0 THEN 
      RETURN 
      STOP EVENT 
    END IF
  MdlBootMngr.GENERATE_LILO_HEADER()
  MdlBootMngr.GENERATE_LILO_OS_LIST()
  ' after that's done, we need to run lilo. The config file has already been saved to /mnt/target/etc/lilo.conf
    IF Exist(ClsGlobal.sTargetPath &/ "etc" &/ "lilo.conf") THEN 
      MdlBootMngr.SETUP_LILO_BOOT_MANAGER()
      PRINT " \\ --> Lilo boot manager installed successfully."
    ELSE 
      DEBUG ClsGlobal.sTargetPath &/ "etc/lilo.conf not found...cannot install lilo."
      RETURN 
    END IF
    
  
END
PUBLIC SUB StartUp()
  
  
  
END

PUBLIC SUB Fake_Names()
  
  DIM tb AS TextBox
  DIM i AS Integer
  
    FOR i = 0 TO 2
    TsOsList.Index = i
    tb = NEW TextBox(ME.TsOsList) AS "Names"
    tb.Height = 28
    tb.Width = 200
    tb.text = "Test" & i
    tb.Tag = "Test" & i
    objNames.Add(tb)
    INC TsOsList.Count
    NEXT 
  
END

PUBLIC SUB Names_Change()
  

  
  TsOsList.Current.Text = LAST.text
  ME.Update_Default_boot_choices()
  
  
END
PUBLIC SUB Update_Default_boot_choices()
  DIM tb AS TextBox
  ME.cbDefBoot.Clear
  FOR EACH tb IN objNames
    cbDefBoot.Add(tb.text)
  NEXT 
  
  
END

PUBLIC SUB tbOsLabel_Change()
  
  LAST.text = Replace(LAST.text, " ", "")  
  IF Len(LAST.text) > 15 THEN 
    RETURN 
  END IF
    
  TsOsList.Current.Text = LAST.text
  ME.Update_Default_boot_choices()
  
END




PUBLIC SUB Form_Resize()

  hbox4.Height = ME.ClientH - (hbox4.top + 30)
  hbox1.Width = hbox1.Parent.Width - (hbox1.Left * 2)
  hbox2.Width = hbox2.Parent.Width - (hbox2.Left * 2)
  hbox3.Width = hbox3.Parent.Width - (hbox3.Left * 2)

END

PUBLIC SUB Toggle_window_controls(bval AS Boolean)
  
  DIM obj AS Object
  'DIM rb AS RadioButton
  
  FOR EACH obj IN ME.Children
    IF obj.Name <> "HPanel2" THEN 
     TRY obj.enabled = bval
    END IF
  NEXT 
  'FOR EACH obj IN ME.HPanel2.Children
  '  TRY obj.enabled = TRUE
  'NEXT 
END


PUBLIC SUB rbNone_Click()

    IF LAST.value = TRUE THEN 
   Message.Warning("<b>" & ("WARNING:") & "</b><br>" &
    ("Selecting this option will bypass your boot manager configuration.") & "<br>" &
    ("You may not be able to start your VectorLinux installation. Do not choose this option") & "<br>" &
    ("unless you are fully aware of what you are doing."))
  END IF
  Timer1.Enabled = FALSE
  ClsGlobal.fRunningMainForm.btnext.enabled = TRUE
  ME.Toggle_window_controls(FALSE)

END

PUBLIC SUB rbGrub_Click()
  DIM i AS Integer
  DIM $ob AS Object
  
  ME.Toggle_window_controls(TRUE)
    FOR i = 0 TO TsOsList.Count - 1
      FOR EACH $ob IN TsOsList[i].Children
        $ob.Delete
      NEXT 
    TRY TsOsList[i].Delete
  NEXT 
  TsOsList.Count = 1
  ME.PROBE_SYSTEM_FOR_OS(LCase(LAST.text))

END

PUBLIC SUB rbLilo_Click()
  DIM i AS Integer
  DIM $ob AS Object
  ME.Toggle_window_controls(TRUE)
  
    FOR i = 0 TO TsOsList.Count - 1 
        FOR EACH $ob IN TsOsList[i].Children
          $ob.Delete
        NEXT 
      TRY TsOsList[i].Delete
    NEXT 
    TsOsList.Count = 1
  ME.PROBE_SYSTEM_FOR_OS(LCase(LAST.text))
  Timer1.Enabled = TRUE

END




PUBLIC FUNCTION determine_boot_parameters(sRoot AS String) AS String
  
  ' needs to return a string[] containing the kernel, initrd, and append lines for an OS
  DIM sShortPart AS String = Right(sRoot, Len(sRoot) - Len("/dev/"))
  DIM sBootPath AS String
  DIM skernel, sinitrd, sAppend AS String
  DIM sDump AS String
  DIM sDumparr AS String[]
    TRY MKDIR "/mnt/hd"
    SHELL "mount " & sRoot & " /mnt/hd 2>/dev/null" WAIT 
    
      IF Exist("/mnt/hd/vmlinuz") THEN 
        sBootPath = "/"
      ELSE IF Exist("/mnt/hd/boot/vmlinuz") THEN 
        sBootPath = "/boot"
      END IF
      
      IF NOT (sBootPath) THEN ' the above lines did not find anything
        SHELL "ls -B /mnt/hd | grep vmlinuz" TO sDump
          sDump = Trim(sDump)
            IF sDump THEN 
              sBootPath = "/"
            ELSE ' not found in the roots dir of the distro, look in /boot
              SHELL "ls -B /mnt/hd/boot | grep vmlinuz" TO sDump
                sDump = Trim(sDump)
                  IF sDump THEN sBootPath = "/boot"
            END IF
      END IF
                  
        ' now get the real path
        
        sdump = Trim(sdump)
        Message(sdump)
          IF sdump THEN sDumparr = Split(Trim(sDump), gb.NewLine) ' found something
               ' this will either pick up the link to the default kernel, or the first kernel that comes up from that partition.
        IF sDumparr THEN 
          skernel = Trim(Replace(sDumparr[0], "@", ""))
            IF skernel THEN PRINT "Found kernel " & skernel & " for " & sRoot
      ' now get the initrd
      SHELL "ls -B " & sBootPath & " | grep initrd" TO sDump
        sDump = Trim(sDump)
          IF sDump THEN 
            sDumparr = Split(Trim(sdump), gb.NewLine) ' found something for initrd
              sinitrd = Trim(Replace(sDumparr[0], "@", ""))
              IF sinitrd THEN PRINT "Found initrd " & sinitrd & " for " & sRoot
          END IF
      
      TRY MKDIR ClsGlobal.sTargetPath &/ "boot" &/ "tamu"
      TRY COPY "/mnt/hd" &/ sBootPath &/ skernel TO ClsGlobal.sTargetPath &/ "boot" &/ "tamu" &/ skernel & "-" & sShortPart
      TRY COPY "/mnt/hd" &/ sBootPath &/ sinitrd TO ClsGlobal.sTargetPath &/ "boot" &/ "tamu" &/ sinitrd & "-" & sShortPart
      
    SHELL "umount -f /mnt/hd >/dev/null" WAIT 
    
    skernel = "/boot/tamu" &/ skernel & "-" & sShortPart
    sinitrd = "/boot/tamu" &/ sinitrd & "-" & sShortPart
        
      
      ' IF Exist(sBootPath &/ "initrd") THEN 
      '   sinitrd = sBootPath &/ "initrd"
      ' END IF
       sAppend = "splash=silent" 'generic kernel arguments.
      
      RETURN skernel & "," & sinitrd & "," & sAppend
    'END IF
    ELSE 
      RETURN 
    END IF
  
END


PUBLIC SUB PROBE_SYSTEM_FOR_OS(sBootManager AS String)
  
  DIM sDump, sOs, sRoot, sLongDesc, sType, sTitle AS String
  DIM i AS Integer
  DIM sOsList, sOsLine, sBootLine, sDumparr AS String[]
  DIM sKernel, sInitrd, sAppendLine AS String
  DIM sBootargs AS String
  
  SHELL "/bin/os-prober > /tmp/os.lst"
  
  sOsList = Split(Trim(File.Load("/tmp/os.lst")), gb.NewLine)
    FOR i = 0 TO sOsList.Max
      TsOsList.Index = TsOsList.Count - 1
      sOsLine = Split(Trim(sOsList[i]), ":")
       sType = Trim(sOsLine[3])
       sLongDesc = Trim(sOsLine[1])
       sOs = Trim(sOsLine[2])
       sRoot = Trim(sOsLine[0])
        IF sBootManager LIKE "lilo" THEN 
          sTitle = sOs
        ELSE 
          sTitle = sLongDesc
        END IF
       
        '  Message(sLongDesc & " was found in " & sRoot)
        ' -= NOW I NEED TO GET THE KERNEL, INITRD AND APPEND LINES FOR THIS OS. =-
          IF sType LIKE "linux" THEN 
            ' this function will return an array separated by "," in this order
            ' /path/to/kernel, /path/to/initrd, appendline here
              SHELL "/bin/linux-boot-prober " & sRoot & " >/tmp/bootargs.lst" WAIT ' we need to hunt these arguments for every OS found
            sBootargs = MdlBootMngr.Get_OS_Boot_Params(sRoot)
              IF NOT (sBootargs) THEN 
                DEBUG "Attempting to detect boot parameters for " & sRoot
                sBootargs = ME.determine_boot_parameters(sRoot) ' manually search for boot parameters.
              END IF
              
              IF NOT (sBootargs) THEN 
                '= CAN NOT FIND BOOT ARGUMENTS FOR THIS OS =' <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< DO SOMETHING ABOUT THIS.... WE NEED TO FIND THESE VALUES IN CASE THE PROBER FAILS >>>>>>>>>>>>>>>>>>>>>>>>>>>>
                  PRINT ("Unable to find boot arguments for OS in") & Space(1) & sRoot
                  PRINT "WARNING: default values filled in... this might not work"
                'RETURN 
              ELSE 
                sBootLine = Split(sbootargs, ",")
                  sKernel = sBootLine[0]
                  sInitrd = sBootLine[1]
                  sAppendLine = sBootLine[2]
                PRINT ("Offer") & Space(1) & sTitle & Space(1) & ("as a bootable choice")
                  PRINT " --\\ Kernel=" & sKernel
                  PRINT " --\\ Initrd=" & sInitrd
                  PRINT " --\\ Root=" & sRoot
                  'print " --\ Options=" &
                    
              END IF
              TsOsList.Current.Text = sRoot
                Populate_linux_tab(sRoot, sTitle, sKernel, sInitrd, sAppendLine, sBootManager)
                INC TsOsList.Count
              
          END IF
            
    NEXT 
TRY DEC TsOsList.Count ' remove trailing empty tab
END

PUBLIC SUB Populate_linux_tab($OsRoot AS String, $Title AS String, $kernel AS String, $initrd AS String, $appendline AS String, sBootLoader AS String)
  
  DIM $tb AS TextBox
  DIM $tl AS textlabel
  DIM $cb AS ComboBox
  DIM $cont AS HBox
  DIM $chk AS CheckBox
  
  
  $cont = NEW HBox(ME.TsOsList)
    $cont.Height = 12
    $cont.Expand = TRUE
  $cont = NEW HBox(ME.TsOsList)
    $cont.Height = 28
    $cont.Expand = TRUE
    $cont.Spacing = 4
    $cont.Padding = 2
    
    $tl = NEW TextLabel($cont)
      WITH $tl
        .text = ("Title") '--------------- title label -----------
        .Expand = FALSE
        .height = 28
        .Width = 64
        .Alignment = Align.Left
      END WITH 
    $tb = NEW TextBox($cont) AS "OsNameBox" ' ------------ Title text box ------------
      WITH $tb
        .Height = 28
        .Tag = $OsRoot
        .Expand = TRUE
        .Text = $Title
          IF sBootLoader LIKE "lilo" THEN 
            .MaxLength = 15
          ELSE 
            .MaxLength = 64
          END IF
      END WITH 
      objNames.Add($tb)
    $tl = NEW TextLabel($cont) '---------------------------- initrd label -------------
      WITH $tl
        .Height = 28
        .Text = ("Initial RAM Disk")
        .Alignment = Align.Left
        .Width = 150
        .Expand = FALSE
      END WITH 
    $cb = NEW ComboBox($cont) '-------------------------- initrd combobox --------------
      WITH $cb
      .ReadOnly = TRUE
      .Tag = $OsRoot
      .List = [$initrd]
      .Height = 28
      .Expand = FALSE
      .Width = 200
      END WITH 
      objinitrds.Add($cb)
    $cont = NEW HBox(TsOsList) ' --------------------------- new container (hbox) ----------
    $cont.Height = 28
    $cont.Expand = TRUE
    
    $tl = NEW TextLabel($cont) ' ------------------------ append label (holds the kernel path (hidden))----------------------
      WITH $tl
        .Text = ("Kernel boot options")
        .Width = 150
        .Height = 28
        .Name = $OsRoot
        .Expand = FALSE
        .Tag = $kernel ' set the kernel path here..
        .Alignment = Align.Left
      END WITH 
      objKernels.Add($tl)
    $tb = NEW TextBox($cont)
      WITH $tb
        .Height = 28
        .Tag = $OsRoot
          IF InStr($AppendLine, "append") THEN 
            .Text = Right($appendline, Len($appendline) - Len("append"))
              
          ELSE 
            .Text = $appendline
          END IF
          .Text = Trim(Replace(.Text, "\"", ""))
          IF Left(Trim(.Text)) = "=" THEN 
                .Text = Right(.Text, Len(.Text) - 1)
          END IF
          .Text = Trim(.Text)
          
        .Expand = TRUE
      END WITH 
        objappends.Add($tb)
        
    $chk = NEW CheckBox(TsOsList) AS "IncludeOs"
      WITH $chk
        .Expand = TRUE
        .Value = TRUE
        .Height = 28
        .Tag = $OsRoot
        .Text = ("Include this Operating System in boot menu")
      END WITH 
      objMenuObjects.Add($chk) ' Add to array of bootable OS's
    $chk = NEW CheckBox(TsOsList) AS "DefOS"
      WITH $chk
        .Expand = TRUE
        .Value = FALSE
        .Height = 28
        .Tag = $OsRoot
        .Text = ("Boot this operating system by default")
      END WITH 
      objDefOs.Add($chk)
        
        
  
END

PUBLIC SUB DefOS_Click()
  
  DIM cb AS CheckBox
  DIM tb AS TextBox
  
  IF objDefOs.Count > 1 THEN 
    FOR EACH cb IN objDefOs
      IF cb <> LAST THEN cb.Value = FALSE
    NEXT
  END IF
  FOR EACH tb IN objNames
    IF tb.Tag = LAST.tag THEN 
      'cbDefBoot.Tag = tb.Text
      ClsGlobal.sDefBoot = tb.Text
    END IF
  NEXT 
  'END IF
  IF LAST.value = FALSE THEN 
    FOR EACH tb IN objNames
      IF tb.Tag = LAST.tag THEN 
        IF cbDefBoot.Tag = tb.Text THEN 
        IF ClsGlobal.sDefBoot = tb.Text THEN ClsGlobal.sDefBoot = ""
        '  cbDefBoot.Tag = ""
        END IF
      END IF
    NEXT 
  END IF
    
    
    

END


PUBLIC SUB TLoSlIST_MouseDown()
  


END
PUBLIC SUB OsNameBox_KeyRelease()
  
  DIM cb AS CheckBox
    FOR EACH cb IN objDefOs
      IF cb.Value = TRUE THEN 
        IF cb.Tag = LAST.tag THEN ' we are modifying the default OS value
          cbDefBoot.Tag = LAST.text
        END IF
      END IF
    NEXT 
  
END


PUBLIC SUB Timer1_Timer()

  ClsGlobal.fRunningMainForm.btnext.enabled = MdlBootMngr.CHECK_LILO_VALUES(TRUE) < 1
  'DEBUG "Timer tick"
  'PRINT MdlBootMngr.CHECK_LILO_VALUES(TRUE)
  
END
