' Gambas class file
'    This file is part of vinstall-ng

'    vinstall-ng is free software: you can redistribute it and/or modify
'    it under the terms of the GNU General Public License as published by
'    the Free Software Foundation, either version 2 of the License, or
'    (at your option) any later version.

'    vinstall-ng  is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'    GNU General Public License for more details.

'    You should have received a copy of the GNU General Public License
'    along with vinstall-ng.  If not, see <http://www.gnu.org/licenses/>.
PRIVATE iCheckWarn AS Integer
PUBLIC SUB _new() ' executed every time the form is instanciated.
  
  ME.StartUp()
      gvdistdetails.Rows.Count = 2
    gvdistdetails.Columns.count = 2
  
END

PUBLIC SUB OnExit()
  
  
  ' this code is ran when the window is hidden before the next step
  DIM sname, sadd, sPart AS String
  
  'Message("Step1 exit")
  
  sname = Trim(Left(ComboBox1.Text, InStr(ComboBox1.Text, ("on")) - 1))
    IF Right(sname, Len(".iso")) LIKE ".iso" THEN 
      sadd = Trim(Right(ComboBox1.Text, Len(ComboBox1.Text) - InStr(ComboBox1.Text, "/") + 1))
    ELSE 
      sadd = Trim(Right(ComboBox1.Text, Len(ComboBox1.Text) - RInStr(ComboBox1.Text, " ") + 1))
    END IF
  
  'make sure /mnt/source is not mounted
  SHELL "umount /mnt/source 2>/dev/null" WAIT 
  
  
  ' Store this information to make it available to the whole installer program
  ClsGlobal.sSourceName = Trim(sname)
  ClsGlobal.sSourceAddr = Trim(sadd)
  TRY MKDIR "/mnt/source"
  ' mount the media and get ready for testing
  IF Right(sname, Len(".iso")) LIKE ".iso" THEN ' this is an iso image... doing hosted install i'm afraid
    spart = Trim(Right(sadd, Len(sadd) - RInStr(sadd, "/")))
  
    EXEC ["mkdir", "-p", "/mnt" &/ Trim(sPart)] WAIT 
    SHELL "mount /dev" &/ Trim(spart) & " /mnt" &/ Trim(spart) & " 2>/dev/null" WAIT 
    ' now mount the iso
    'EXEC ["mount -o loop", "/mnt" &/ Trim(spart) &/ Trim(sname), "/mnt/source"] WAIT 
    SHELL "mount -o loop /mnt" &/ Trim(spart) &/ Trim(sname) & " /mnt/source" WAIT 
  
  ELSE 
      PRINT "Mounting cd media"
    SHELL "mount /dev" &/ Trim(sadd) & " /mnt/source 2>/dev/null" WAIT 
    
    
  END IF

  IF ME.GetNext() = "Step2" THEN ClsGlobal.sToScan = Trim(ME.ComboBox1.Text)
   'Message("Image to scan = " & ClsGlobal.sToScan)
    
      
      
  
  
END


PUBLIC SUB Form_Open()

  ME.TextLabel1.Text = "<h2>" & TextLabel1.text & "</h2>"
  ME.FIND_CD_INSTALL_MEDIA()
  ME.FIND_ISO_INSTALL_MEDIA()
  ME.FIND_PARTITION_INSTALL_MEDIA()
  FMain.btNext.Enabled = ComboBox1.Count > 0


END

PUBLIC FUNCTION GetNext() AS String
  
  IF bcheckmedia.Value = TRUE THEN 
    RETURN "Step2"
      'IF Step2.sLastChecked <> Trim(ME.ComboBox1.Text) THEN 
      IF ClsGlobal.sLastScanned <> Trim(ME.ComboBox1.Text) THEN 
        Step2.bcheck = TRUE
        
      ELSE 
        Step2.bcheck = FALSE
      END IF
  ELSE 
    RETURN "Step3"
  END IF
  
  
  
  
END

PUBLIC SUB StartUp() ' Executed every time the Next button is pressed

    ' IF Step2.sLastChecked <> ClsGlobal.sSourceName THEN 
    '   Step2.Close ' try this
    ' END IF
  
END

PUBLIC SUB FIND_PARTITION_INSTALL_MEDIA() ' This SUB will be useful when installing from USB and a pre-loaded partition
  
  DIM sOutput, sPart, sISoName, sFile AS String
  DIM sName, sVersion, sKeyPath AS String
  DIM i AS Integer
  DIM sPartList AS String[]
  
  ME.ComboBox1.Enabled = FALSE
  tlStatus.Text = ("Scanning system partitions for installation files")
  PRINT tlStatus.Text
  SHELL "/sbin/probepart | grep \"^/dev\" | grep -v -i \"linux swap\" | tr -s \' \'\"\" | cut -f 1 -d \' \'" TO sOutput
    sOutput = Trim(sOutput)
      IF Len(sOutput) < 1 THEN RETURN 
  sPartList = Split(sOutput, "\n")
    FOR i = 0 TO sPartList.Count - 1
      sPart = Trim(Right(Trim(sPartList[i]), Len(Trim(sPartList[i])) - RInStr(Trim(sPartList[i]), "/")))
      sKeyPath = "/mnt" &/ Trim(sPart)
          TRY MKDIR sKeyPath
          SHELL "mount /dev" &/ Trim(sPart) & " /mnt" &/ Trim(sPart) & " 2>/dev/null" WAIT 
            IF Exist(sKeyPath &/ "veclinux" &/ "SETUP.CONF") THEN 
              ' Must read file first before we have anything to list
                SHELL "grep \"^DISTRO=\" " & sKeyPath &/ "veclinux" &/ "SETUP.CONF | cut -f 2 -d \"\'\"" TO sName
                SHELL "grep \"^VERSION=\" " & sKeyPath &/ "veclinux" &/ "SETUP.CONF | cut -f 2 -d \"\'\"" TO sVersion
                sName = Trim(sName)
                sVersion = Trim(sVersion)
                  File.Save(Temp(Trim(sName) & "-" & Trim(sVersion) & "-" & Trim(sPart)), File.Load(sKeyPath &/ "veclinux" &/ "SETUP.CONF"))
                  ComboBox1.Add(Trim(sname) & "-" & Trim(sVersion) & Space(1) & ("on") & Space(1) & Trim(sPart))
                    PRINT " \\__" & Space(1) & ("Found") & Space(1) & Trim(sname) & Space(1) & Trim(sVersion) & Space(1) & ("in partition") & Space(1) & Trim(sPart)
                    

            END IF
          'EXEC ["umount", "/mnt" &/ Trim(sPart)] WAIT 
          SHELL "umount /mnt" &/ Trim(sPart) & " 2>/dev/null" WAIT 
          EXEC ["sync"] WAIT 
          TRY RMDIR "/mnt" &/ Trim(sPart)

    NEXT 
          
    tlStatus.Text = ""
  ME.ComboBox1.Enabled = TRUE
  
  
  
  
END



PUBLIC SUB FIND_CD_INSTALL_MEDIA()
  
  DIM sDump, sDrive, sOutput, sShortDrive AS String
  DIM sName, sVersion AS String
  DIM i AS Integer
  DIM sDriveList AS String[]
  
  Step1.tlStatus.Text = ("Scanning for CD Media ... Please wait")
  
  SHELL "/sbin/probedisk | grep \"cdrom\" | cut -f 1 -d \"|\"" TO sOutput
  'Message(sOutput)
  sOutput = Trim(sOutput)
  IF Len(sOutput) < 1 THEN RETURN 
  'Message("scanning cds")
  sDriveList = Split(sOutput, "\n")
    FOR i = 0 TO sDriveList.Count - 1
      sShortDrive = Right(Trim(sDriveList[i]), Len(Trim(sDriveList[i])) - RInStr(Trim(sDriveList[i]), "/"))
        EXEC ["mkdir", "-p", "/mnt" &/ sShortDrive] WAIT 
        'EXEC ["mount", "-o", "ro", Trim(sDriveList[i]), "/mnt" &/ sShortDrive] WAIT 
        SHELL "mount " & Trim(sDriveList[i]) & Space(1) & "/mnt" &/ sShortDrive & " 2>/dev/null" WAIT 
        PRINT ("Scanning") & Space(1) & sDriveList[i]
          IF Exist("/mnt" &/ sShortDrive &/ "veclinux" &/ "SETUP.CONF") THEN 
              SHELL "grep \"^DISTRO=\" /mnt" &/ sShortDrive &/ "veclinux" &/ "SETUP.CONF | cut -f 2 -d \'=\'" TO sName
              SHELL "grep \"^VERSION=\" /mnt" &/ sShortDrive &/ "veclinux" &/ "SETUP.CONF | cut -f 2 -d \'=\'" TO sVersion
                sName = Trim(Replace(sName, "\'", ""))
                sVersion = Trim(Replace(sVersion, "\'", ""))
                File.Save(Temp(sShortDrive), File.Load("/mnt" &/ sShortDrive &/ "veclinux" &/ "SETUP.CONF"))
                  IF ME.ComboBox1.Find(sName & Space(1) & sVersion & Space(1) & ("on") & Space(1) & Trim(sShortDrive)) = -1 THEN 'Trim(sDriveList[i])) = -1 THEN 
                    ME.ComboBox1.Add(sName & Space(1) & sVersion & Space(1) & ("on") & Space(1) & Trim(sShortDrive)) 'Trim(sDriveList[i]))
                  END IF   
                  PRINT " \\__" & Space(1) & ("Found") & Space(1) & sName & "-" & sVersion & Space(1) & ("in") & Space(1) & Trim(sShortDrive) 'sDriveList[i]         
          END IF
        'EXEC ["umount", "/mnt" &/ sShortDrive, " 2>/dev/null"] WAIT 
        SHELL "umount /mnt" &/ Trim(sShortDrive) & " 2>/dev/null" WAIT 
        EXEC ["rm", "-rf", "/mnt" &/ sShortDrive] WAIT 
        
        'Message(sShortDrive)
    NEXT 
      
Step1.tlStatus.Text = ""
  
  'ComboBox1.ReadOnly = TRUE
  
  
END

PUBLIC SUB FIND_ISO_INSTALL_MEDIA()
  
  DIM sOutput, sPart, sISoName, sFile AS String
  DIM sName, sVersion AS String
  DIM i AS Integer
  DIM sPartList AS String[]
  
  ME.ComboBox1.Enabled = FALSE
  tlStatus.Text = ("Scanning system for installable ISO images")
  PRINT tlStatus.Text
  SHELL "/sbin/probepart | grep \"^/dev\" | grep -v -i \"linux swap\" | tr -s \' \'\"\" | cut -f 1 -d \' \'" TO sOutput
    sOutput = Trim(sOutput)
      IF Len(sOutput) < 1 THEN RETURN 
  sPartList = Split(sOutput, "\n")
    FOR i = 0 TO sPartList.Count - 1
      sPart = Trim(Right(Trim(sPartList[i]), Len(Trim(sPartList[i])) - RInStr(Trim(sPartList[i]), "/")))
          EXEC ["mkdir", "/mnt" &/ Trim(sPart)] WAIT 
          EXEC ["mount", "/dev" &/ Trim(sPart), "/mnt" &/ Trim(sPart)] WAIT 
            FOR EACH sFile IN Dir("/mnt" &/ Trim(sPart), "*.iso")
                TRY MKDIR "/mnt/loop"
                  EXEC ["mount", "-o", "loop", "/mnt" &/ Trim(sPart) &/ Trim(sFile), "/mnt/loop"] WAIT 
                    IF Exist("/mnt/loop/veclinux/SETUP.CONF") THEN 
                    'PRINT "Adding temp file" & Space(1) & Temp(Trim(sFile) & "-" & Trim(sPart))
                      File.Save(Temp(Trim(sFile) & "-" & Trim(sPart)), File.Load("/mnt/loop/veclinux/SETUP.CONF"))
                      ComboBox1.Add(sFile & Space(1) & ("on") & Space(1) & "/dev" &/ Trim(sPart))
                      'Message(sFile & "-" & Trim(sPart))
                      PRINT " \\__" & Space(1) & ("Found") & Space(1) & Trim(sFile) & Space(1) & ("on") & Space(1) & Trim(sPart)
                      
                    END IF
                  EXEC ["umount", "/mnt/loop"] WAIT 
                      
              
            NEXT 
          EXEC ["umount", "/mnt" &/ Trim(sPart)] WAIT 
          EXEC ["sync"] WAIT 
          TRY RMDIR "/mnt" &/ Trim(sPart)
          
          'EXEC ["rm,", "-rf", "/mnt" &/ Trim(sPart)] WAIT 
              
        'Message(sPart)
    NEXT 
          
    tlStatus.Text = ""
  ME.ComboBox1.Enabled = TRUE
END



PUBLIC SUB ComboBox1_Click()


  DIM sDigits AS String ' = sAddr LIKE "*[0-9]*"
  DIM sDist, sLoc AS String
    sDist = Trim(Left(LAST.text, InStr(LAST.text, " ") - 1))
    sLoc = Trim(Right(LAST.text, Len(LAST.text) - RInStr(LAST.text, " ") + 1))
    sDigits = sLoc LIKE "*[0-9]*"
    
    IF Right(sDist, Len(".iso")) LIKE ".iso" THEN 
      ME.DESCRIBE_ISO_INSTALL_MEDIA(Replace(Trim(ME.ComboBox1.Text), Space(1) & ("on") & Space(1), "-"))
    ELSE IF sDigits THEN 
      ME.DESCRIBE_PARTITION_INSTALL_MEDIA(Trim(ME.ComboBox1.Text))
    ELSE 
      ME.DESCRIBE_CD_INSTALL_MEDIA(sLoc)
    END IF
    
    ' debugging
      'Message(Step2.sLastChecked)
      'Message(ClsGlobal.sLastScanned)
    IF Trim(LAST.text) <> ClsGlobal.sLastScanned THEN 
      Step2.bcheck = TRUE
    ELSE 
      Step2.bcheck = FALSE
    END IF
  
  'ClsGlobal.sToScan = Trim(ME.ComboBox1.Text)


END

PUBLIC SUB DESCRIBE_PARTITION_INSTALL_MEDIA(sTempFileName AS String)
  
  DIM sDump AS String[]
  DIM sDistro, sVer, sLine AS String
  DIM i AS Integer
  
    sTempFileName = Replace(sTempFileName, "/dev/", "")
    sTempFileName = Replace(sTempFileName, Space(1) & ("on") & Space(1), "-")
  
  sDump = Split(File.Load(Temp(sTempFileName)), "\n")
    FOR i = 0 TO sDump.Count - 1
      sLine = Trim(sDump[i])
        IF Left(sLine, Len("DISTRO=")) = "DISTRO=" THEN 
          sDistro = Right(sLine, Len(sLine) - InStr(sLine, "\'"))
        ELSE IF Left(sLine, Len("VERSION=")) = "VERSION=" THEN 
          sVer = Right(sLine, Len(sLine) - InStr(sLine, "\'"))
        END IF
    NEXT 
      sDistro = Trim(Replace(sDistro, "\'", ""))
      sver = Trim(Replace(sver, "\'", ""))
    gvdistdetails[0, 0].Text = ("DISTRIBUTION")
    gvdistdetails.Columns[0].Width = 150
    gvdistdetails[0, 1].Text = sDistro
    gvdistdetails[1, 0].Text = ("VERSION")
    gvdistdetails[1, 1].Text = sVer
  
END


PUBLIC SUB DESCRIBE_ISO_INSTALL_MEDIA(sTempFileName AS String)
DIM sDump AS String[]
DIM sDistro, sVer, sLine AS String
DIM i AS Integer

sTempFileName = Replace(sTempFileName, "/dev/", "")
  sDump = Split(File.Load(Trim(Temp(sTempFileName))), "\n")
    FOR i = 0 TO sDump.Count - 1
      sLine = Trim(sDump[i])
        IF Left(sLine, Len("DISTRO=")) = "DISTRO=" THEN 
          sDistro = Right(sLine, Len(sLine) - InStr(sLine, "\'"))
        ELSE IF Left(sLine, Len("VERSION=")) = "VERSION=" THEN 
          sVer = Right(sLine, Len(sLine) - InStr(sLine, "\'"))
        END IF
    NEXT 
    sDistro = Trim(Replace(sDistro, "\'", ""))
    sVer = Trim(Replace(sver, "\'", ""))
    'Message(sDistro & "\n" & sVer)
    
    gvdistdetails[0, 0].Text = ("DISTRIBUTION")
    gvdistdetails.Columns[0].Width = 150
    gvdistdetails[0, 1].Text = sDistro
    gvdistdetails[1, 0].Text = ("VERSION")
    gvdistdetails[1, 1].Text = sVer
  
  
END



PUBLIC SUB DESCRIBE_CD_INSTALL_MEDIA(sAddress AS String)
  
  DIM sDistro, sVersion, sLine AS String
  DIM sSetup AS String[]
  DIM sFile AS String = File.Load(Temp(sAddress))
  DIM i, ir AS Integer
  
  
  sSetup = Split(sFile, "\n")
    FOR i = 0 TO sSetup.count - 1
      sLine = Trim(sSetup[i])
        IF Left(sLine, Len("DISTRO=")) = "DISTRO=" THEN 
          sDistro = Right(sLine, Len(sLine) - InStr(sline, "\'"))
          sDistro = Replace(sDistro, "\'", "")
          sDistro = Trim(sDistro)
        ELSE IF Left(sline, Len("VERSION=")) = "VERSION=" THEN 
          sVersion = Right(sLine, Len(sLine) - InStr(sline, "\'"))
          sVersion = Replace(sVersion, "\'", "")
          sVersion = Trim(sVersion)
        END IF
      
  
    NEXT 


    gvdistdetails[0, 0].Text = ("DISTRIBUTION")
    gvdistdetails.Columns[0].Width = 150
    gvdistdetails[0, 1].Text = sDistro
    gvdistdetails[1, 0].Text = ("VERSION")
    gvdistdetails[1, 1].Text = sVersion
  
END




PUBLIC SUB bCheckMedia_Click()

  IF iCheckWarn < 1 THEN 
    IF LAST.value = TRUE THEN 
      Message.Warning(("This feature can help you avoid an unsuccesful installation.") & "<br>" &
      "<b><br>" & ("WARNING:") & "</b><br>" & Space(1) & ("This process can take a long time to complete."))
      INC iCheckWarn
    END IF
  END IF

END
