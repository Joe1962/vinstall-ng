' Gambas class file
'    This file is part of vinstall-ng

'    vinstall-ng is free software: you can redistribute it and/or modify
'    it under the terms of the GNU General Public License as published by
'    the Free Software Foundation, either version 2 of the License, or
'    (at your option) any later version.

'    vinstall-ng  is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'    GNU General Public License for more details.

'    You should have received a copy of the GNU General Public License
'    along with vinstall-ng.  If not, see <http://www.gnu.org/licenses/>.

PRIVATE cb AS ComboBox
PRIVATE x AS Integer
PRIVATE y AS Integer
PUBLIC objMntPoints AS Object[]
PUBLIC objFS AS Object[]

PUBLIC FUNCTION GetNext() AS String
  
  RETURN "Step7"

  
END

PUBLIC SUB OnExit()
  
  ' DIM n AS Integer
  ' DIM sFmtAs, sList, sPartAddr AS String
  ClsGlobal.sVitalPartList = ""
  ClsGlobal.sWapPartList = ""
  read_partition_selection()
    ' FOR n = 1 TO gvPartListing.Rows.Count - 1
    '   IF gvPartListing[n, 2].Text THEN 
    '     sPartAddr = gvPartListing[n, 2].Text
    '     IF gvPartListing[n, 4].Text THEN 
    '       sFmtAs = gvPartListing[n, 4].Text
    '     ELSE 
    '       sFmtAs = gvPartListing[n, 5].Text
    '     END IF
    '   END IF
    '   sList = sList & sPartAddr & "," & sFmtAs & ";"
    '   'Message(gvPartListing[n, 0].Text & gb.NewLine & gvPartListing[n, 2].Text & gb.NewLine & sFmtAs)
    '   
    ' NEXT 
    ' ME.read_partition_selection
    'Message(ClsGlobal.sVitalPartList)
   ' sList = Trim(Left(sList, Len(sList) - 1))
  'ClsGlobal.sVitalPartList = Trim(sList)
  'Message(ClsGlobal.sVitalPartList)
END

PUBLIC SUB StartUp()
  
  ME.Resize(ClsGlobal.fRunningMainForm.Pnlstack.Width, ClsGlobal.fRunningMainForm.PnlStack.Height)
  
END

PUBLIC SUB PREPARE_PARTITION_LISTING()
  WITH ME.gvPartListing
    .Columns.Count = 7
    .Rows.count = 1
  END WITH 
    gvPartListing[0, 0].text = ("Partition") 
    gvPartListing[0, 1].text = ("Size") 
    gvPartListing[0, 2].text = ("Mount Point") 
    gvPartListing[0, 4].text = ("File System") 
    'gvPartListing[0, 4].text = ("File System") 
    gvPartListing[0, 0].BackColor = Color.LightBackground
    gvPartListing[0, 0].Font.Bold = TRUE
    gvPartListing.Columns[0].Width = 120
    gvPartListing[0, 1].BackColor = Color.LightBackground
    gvPartListing[0, 1].Font.Bold = TRUE
    gvPartListing.Columns[1].Width = 120
    gvPartListing[0, 2].BackColor = Color.LightBackground
    gvPartListing[0, 2].Font.Bold = TRUE
    gvPartListing.Columns[2].Width = 150
    gvPartListing[0, 3].BackColor = Color.LightBackground
    gvPartListing[0, 3].Font.Bold = TRUE
    gvPartListing.Columns[3].Width = 12
    gvPartListing[0, 4].BackColor = Color.LightBackground
    gvPartListing.Columns[4].Width = 150
    gvPartListing[0, 4].Font.Bold = TRUE
    gvPartListing[0, 5].BackColor = Color.LightBackground
    gvPartListing.Columns[5].Width = 1
    gvPartListing[0, 6].BackColor = Color.LightBackground
    'gvPartListing[0, 5].BackColor = Color.LightBackground
    'gvPartListing[0, 5].Font.Bold = TRUE 
    'gvPartListing[0, 5]
    
  END


PUBLIC SUB LIST_PARTITIONS()
  
  DIM sDump AS String
  DIM sDisks, sPartitions, sPartLine AS String[]
  DIM sDisk, sPartNo, sSize, sFs AS String
  DIM i, ii, irow AS Integer
  DIM hproc AS Process
  
  objFS = NEW Object[]
  objMntPoints = NEW Object[]
  
  INC ME.gvPartListing.Rows.Count
  irow = 2
  SHELL "probedisk | grep -vi rom | cut -f 1 -d \'|\'" TO sDump ' This gets the list of present hard drisks
  sDisks = Split(Trim(sDump), "\n")
      FOR i = 0 TO sDisks.Count - 1
        'hproc = SHELL "parted " & Trim(sDisks[i]) & " print | grep \"^ [0-9]\" | tr -s \' \',\"\"" ' just to test'
          'IF hproc.Value > 0 THEN CONTINUE 
                  SHELL "parted " & Trim(sDisks[i]) & " print | grep \"^ [0-9]\" | grep -vi \"extended\" | tr -s \' \',\"\"" TO sDump
          spartitions = Split(Trim(sdump), "\n")
            FOR ii = 0 TO spartitions.count - 1
              sPartLine = Split(Trim(spartitions[ii]), " ")
              'Message(spartitions[ii])
                sPartNo = sPartLine[0]
                sSize = sPartLine[3]
                sFs = sPartLine[5]
            'NEXT 
              ' add partition to the gridview
              INC ME.gvPartListing.Rows.Count
              ME.gvPartListing.Rows[irow].Height = 24
              ME.gvPartListing[irow, 0].text = Trim(sDisks[i]) & Trim(sPartNo)
              ME.gvPartListing[irow, 1].Text = Trim(sSize)
              IF sFs LIKE "linux-swap" THEN 
                gvPartListing[irow, 4].Text = Trim(sfs)
                gvPartListing[irow, 0].BackColor = Color.LightGray
                gvPartListing[irow, 1].BackColor = Color.LightGray
                gvPartListing[irow, 2].BackColor = Color.LightGray
                gvPartListing[irow, 3].BackColor = Color.LightGray
                gvPartListing[irow, 4].BackColor = Color.LightGray
                gvPartListing[irow, 5].BackColor = Color.LightGray
                gvPartListing[irow, 6].BackColor = Color.LightGray
                
                ' ---------------------- make distinction from swap partitions to regular mountable ones ------------------
                
                cbMntPoint = NEW ComboBox(gvPartListing.Parent) AS "MountPointSel"
                WITH cbMntPoint
                  .Move(gvPartListing[irow, 2].left, gvPartListing[irow, 2].top)
                  .Width = gvPartListing[irow, 2].Width
                  .Height = gvPartListing[irow, 2].Height
                  .ReadOnly = TRUE
                  .tag = gvPartListing[irow, 0].Text
                  .List = [("Swap"), ("Not Used")]
                END WITH 
                objMntPoints.Add(cbMntPoint)
                
                ' ---- continue----
                
                
              ELSE 
                gvPartListing[irow, 5].Text = Trim(SFS)
                gvPartListing[irow, 5].ForeColor = Color.White
                
              cbMntPoint = NEW ComboBox(gvPartListing.Parent) AS "MountPointSel"
                WITH cbMntPoint
                  .Move(gvPartListing[irow, 2].left, gvPartListing[irow, 2].top)
                  .Width = gvPartListing[irow, 2].Width
                  .Height = gvPartListing[irow, 2].Height
                  .ReadOnly = TRUE
                  .tag = gvPartListing[irow, 0].Text
                    IF ClsGlobal.sSourceAddr LIKE .Tag THEN 
                      '.Enabled = FALSE
                      .List = [("Not Used"), "/mnt" &/ Right(gvPartListing[irow, 0].text, Len(gvPartListing[irow, 0].text) - RInStr(gvPartListing[irow, 0].text, "/"))]
                    ELSE 
                      .list = [("Not Used"), "/", "/home", "/usr", "/opt", "/tmp", "/var", "/boot", "/mnt" &/ Right(gvPartListing[irow, 0].text, Len(gvPartListing[irow, 0].text) - RInStr(gvPartListing[irow, 0].text, "/"))]
                      '.Enabled = TRUE
                    END IF  
                  .Text = ("Not Used")
                END WITH 
                objMntPoints.Add(cbMntPoint)
              cbfs = NEW ComboBox(gvPartListing.Parent) AS "FsSel"
                WITH cbfs
                  .Move(gvPartListing[irow, 4].left, gvPartListing[irow, 3].top)
                  .Width = gvPartListing[irow, 4].Width
                  .Height = gvPartListing[irow, 4].Height
                  .ReadOnly = TRUE
                  .tag = gvPartListing[irow, 0].Text
                  'Message(ClsGlobal.sSourceAddr)
                    IF ClsGlobal.sSourceAddr LIKE .Tag THEN 
                      .Enabled = FALSE
                    ELSE 
                      .Enabled = TRUE
                    END IF  
                  .list = [("Do not format"), "ext2", "ext3", "jfs", "xfs", "reiserfs"]
                  .Text = ("Do not format")
                  .Enabled = FALSE
                END WITH 
                objFS.Add(cbFS)
              END IF
              'ME.gvPartListing[irow, 2].Text = Trim(sFs)
              INC irow
            NEXT
      NEXT 
              
        
  
  
END

PUBLIC SUB FsSel_Click()
  
  'Message(LAST.tag)
  x = LAST.x
  y = LAST.y
  
  
  
    IF LAST.text <> ("Do not format") THEN 
      ME.gvPartListing[gvPartListing.RowAt(y), gvPartListing.ColumnAt(x)].Text = LAST.text
      'ME.OnExit()
    ELSE 
      ME.gvPartListing[gvPartListing.RowAt(y), gvPartListing.ColumnAt(x)].Text = ""
    END IF
    
    'IF ME.gvPartListing[gvPartListing.RowAt(y), gvPartListing.ColumnAt(x)].Text THEN Message(ME.gvPartListing[gvPartListing.RowAt(y), gvPartListing.ColumnAt(x)].Text)
    
    ME.MOUNT_TARGET_PARTITIONS()
  
END

PUBLIC FUNCTION CheckEntry(sEntry AS String, iCurrRow AS Integer) AS Integer
  
  DIM irow AS Integer '= 2
   irow = 0
      REPEAT 
        IF irow <> iCurrRow THEN 
          IF gvPartListing[irow, 2].Text AND gvPartListing[irow, 2].Text = sEntry THEN 
            Message.Error(("You have already selected") & Space(1) & gvPartListing[irow, 0].Text & Space(1) & ("as your") & Space(1) & Trim(sEntry) & Space(1) & ("partition.") & gb.NewLine &
           ("Please select only one partition for this purpose"))          
            RETURN 1
          END IF
        END IF
        INC irow
    UNTIL irow = gvPartListing.Rows.count - 1
    RETURN 0
  
END


PUBLIC SUB MountPointSel_Click()
  DIM cb AS ComboBox
  DIM irow AS Integer
  'Message(LAST.tag)
  
  x = LAST.x
  y = LAST.y
  
  
  'IF LAST.text = ("Swap") THEN RETURN 
  IF LAST.text <> ("Not Used") THEN 
    IF LAST.TEXT <> ("Swap") THEN 
    IF ME.CheckEntry(LAST.text, gvPartListing.RowAt(LAST.y)) > 0 THEN 
    LAST.text = ("Not Used")
    STOP EVENT 
    RETURN 
  END IF
  END IF
  END IF
    
  IF LAST.text <> ("Not Used") THEN 
      FOR EACH cb IN objFS
        
        IF cb.tag = LAST.tag THEN 
          IF ClsGlobal.sSourceAddr LIKE LAST.tag THEN 
          cb.Enabled = FALSE
          ELSE 
          cb.Enabled = TRUE
          END IF
        END IF
    NEXT 
    ' save the text in the background to the gridview
      
      ME.gvPartListing[gvPartListing.RowAt(y), gvPartListing.ColumnAt(x)].Text = LAST.text

  ELSE 
    FOR EACH cb IN objFS
      IF cb.tag = LAST.tag THEN cb.Enabled = FALSE
      ME.gvPartListing[gvPartListing.RowAt(y), gvPartListing.ColumnAt(x)].Text = ""
    NEXT 
  END IF
  
  ' find out if are good to go yet
  FOR EACH cb IN objMntPoints
    IF cb.Text = "/" THEN 
      ClsGlobal.fRunningMainForm.btnext.enabled = TRUE
      RETURN 
    END IF
    ClsGlobal.fRunningMainForm.btnext.enabled = FALSE
  NEXT 
  

      
  
END


PUBLIC SUB MOUNT_TARGET_PARTITIONS()
  
  DIM n AS Integer
  DIM sPartAddr, sMntPoint, sFs AS String
    FOR n = 2 TO gvPartListing.Rows.count - 1 ' rows 0 and 1 are meaningless to this sub
      IF gvPartListing[n, 2].Text THEN ' Partition address in in column 0, mountpoint is in column 2
        sMntPoint = Trim(gvPartListing[n, 2].Text)
        sPartAddr = Trim(gvPartListing[n, 0].Text)
        sfs = Trim(gvPartListing[n, 4].Text)
          IF NOT sfs THEN sfs = Trim(gvPartListing[n, 5].Text) ' use the current filesystem.
        ' maybe this is a good time to store these values to the future fstab file ??
        ' use ClsFstab class to store these things until we need them in configure.
          
          'Message(sPartAddr & "\n" & sMntPoint & "\n" & sFs)
        
      END IF
    NEXT   
  
END


PUBLIC SUB read_partition_selection()


  DIM cbox, cb AS ComboBox
  DIM sPart, sFormat, sSize, sMntPoint AS String
  DIM i, irow AS Integer
  DIM sarr, scomp AS String[]
  'DIM scomp AS String
  
  
  ' ================= get the list of vital partitions =====================
    FOR irow = 2 TO gvPartListing.Rows.count - 1
      IF Trim(gvPartListing[irow, 2].Text) THEN 
      IF Trim(gvPartListing[irow, 2].Text) <> ("Not Used") AND Trim(gvPartListing[irow, 2].Text) <> ("Swap") THEN 
        sPart = Trim(gvPartListing[irow, 0].Text)
        sSize = Trim(gvPartListing[irow, 1].Text)
        sMntPoint = Trim(gvPartListing[irow, 2].Text)
        sFormat = Trim(gvPartListing[irow, 4].Text)
        
      '          Message(gvPartListing[irow, 0].Text & " - (" & gvPartListing[irow, 1].Text & ") - " & gvPartListing[irow, 2].Text)
      '         ClsGlobal.sVitalPartList = ClsGlobal.sVitalPartList & cbox.Tag & "-" & sSize & "-" & cbox.Text & "-" & sFormat & ","
      ClsGlobal.sVitalPartList = ClsGlobal.sVitalPartList & sPart & "-" & sSize & "-" & sMntPoint & "-" & sFormat & "|"
          'CATCH THE ROOT PARTITIONG HERE
          IF sMntPoint = "/" THEN ClsGlobal.sRoot = sPart
      
        END IF
      END IF
      
    NEXT 
    

      
      
    
    ' =========== get list of swap partitions selected .(if any) =====================
    
    FOR irow = 2 TO gvPartListing.Rows.count - 1
      IF Trim(gvPartListing[irow, 2].Text) = ("Swap") THEN 
        sPart = Trim(gvPartListing[irow, 0].Text)
        sSize = Trim(gvPartListing[irow, 1].Text)
  '                   ClsGlobal.sWapPartList = ClsGlobal.sWapPartList & gvPartListing[i, 0].Text & "-" & gvPartListing[i, 1].Text & ","
      ClsGlobal.sWapPartList = ClsGlobal.sWapPartList & spart & "-" & sSize & "|"
    END IF
  NEXT 
        
    
  'Message(ClsGlobal.sVitalPartList)
'   
'     FOR EACH cbox IN objMntPoints
'       IF cbox.Text <> ("Not Used") THEN 
'         i = 2
'         REPEAT 
'           IF Trim(gvPartListing[i, 0].Text) = Trim(cbox.Tag) THEN 
'             sSize = Trim(gvPartListing[i, 1].Text)
'           END IF
'           INC i
'         UNTIL sSize OR i = gvPartListing.Rows.Count
'         
'         FOR EACH cb IN objFS
'           IF cbox.tag = cb.Tag THEN 
'             sFormat = Trim(cb.Text)
'             BREAK 
'           ELSE 
'             sFormat = ""
'           END IF
'         NEXT 
'         ClsGlobal.sVitalPartList = ClsGlobal.sVitalPartList & cbox.Tag & "-" & sSize & "-" & cbox.Text & "-" & sFormat & ","
'     END IF
'     NEXT 
'       
' FOR i = 2 TO gvPartListing.Rows.count - 1
'         IF gvPartListing[i, 4].Text LIKE "linux-swap" THEN 
'             FOR EACH cbox IN objMntPoints
'               IF cbox.tag = gvPartListing[i, 0].Text THEN 
'                 IF cbox.text <> ("Not Used") THEN 
'                   ClsGlobal.sWapPartList = ClsGlobal.sWapPartList & gvPartListing[i, 0].Text & "-" & gvPartListing[i, 1].Text & ","
'                 END IF
'               END IF
'             NEXT           
'         END IF
'       NEXT   
' 
'   
 END
' 
' 

PUBLIC SUB Form_Open()

  ME.tlbanner.Text = "<h2>" & ("Select which partitions to use for installation") & "</h2>"
  ME.PREPARE_PARTITION_LISTING()
  ME.LIST_PARTITIONS()
  'ME.cbMntPoint.list = [("Not Used"), "/", "/home", "/usr", "/opt", "/tmp", "/var", "/boot"]
  'ME.cbMntPoint.ReadOnly = TRUE
END

PUBLIC SUB Form_Resize()

  'ME.gvPartListing.Height = gvPartListing.Parent.Height
  ME.Panel1.Height = ME.ClientH - (ME.HPanel1.Top + ME.HPanel1.Height + 8)
  ME.gvPartListing.Resize(gvPartListing.Parent.Width, gvPartListing.Parent.Height)

END




PUBLIC SUB gvPartListing_Click()


  IF LAST.row < 2 THEN RETURN 
x = LAST.column
y = LAST.row

IF X = 2 THEN 
  ME.cbMntPoint.Move(gvPartListing[y, x].left, gvPartListing[y, x].top)
  ME.cbMntPoint.Width = gvPartListing[y, x].Width
  ME.cbMntPoint.Height = gvPartListing[y, x].Height
  
  ME.cbMntPoint.Visible = TRUE
END IF

 END

PUBLIC SUB cbYN_Click()

gvPartListing[y, x].Text = cbYN.Text

WAIT 0.25
cbYN.Visible = FALSE

END

