' Gambas module file


'    This file is part of vinstall-ng

'    vinstall-ng is free software: you can redistribute it and/or modify
'    it under the terms of the GNU General Public License as published by
'    the Free Software Foundation, either version 2 of the License, or
'    (at your option) any later version.

'    vinstall-ng  is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'    GNU General Public License for more details.

'    You should have received a copy of the GNU General Public License
'    along with vinstall-ng.  If not, see <http://www.gnu.org/licenses/>.

PUBLIC oMountPoints AS Object[]
PUBLIC oFsTypes AS Object[]

PUBLIC SUB DISPLAY_PARTITION_OPTIONS()
  
  DIM tl AS TextLabel
  DIM cb AS ComboBox
  DIM sPartList AS String[]
  DIM sPart AS String
  DIM sSize AS String
  DIM i AS Integer
  DIM y AS Integer
  DIM sDump1 AS String ' partition list dump
  DIM lbwidth AS Integer = 0
  DIM sSwapList AS String
  DIM vSwapSize AS Variant
  DIM iswapsize AS Float
  DIM i3drdrowX AS Integer
  DIM iX AS Integer
  
  ' fire up the arrays
  oFsTypes = NEW Object[]
  oMountPoints = NEW Object[]
  
  
  ' We will mount the partitions first, and then figure out their size
  SHELL "export PATH=$PATH:/sbin && sudo probepart | grep -e \" Linux$\" | cut -f 1 -d \' \'" TO sDump1
  sDump1 = Trim(sDump1)
  
      
    y = FrmPartSel.tlPartRow.top + FrmPartSel.tlPartRow.Height + 8
  
    IF InStr(sDump1, gb.NewLine) > 0 THEN 
      sPartList = Split(sDump1, gb.NewLine)
        FOR i = 0 TO sPartList.Count - 1
          sPart = Right(sPartList[i], Len(sPartList[i]) - RInStr(sPartList[i], "/"))
            'Message.Info(sPart)
            
              'make sure the mount point exists
                IF IsDir("/mnt" &/ sPart) = FALSE THEN 
                  SHELL "sudo mkdir /mnt" &/ sPart WAIT 
                END IF
                ' Now mount the partition
                SHELL "sudo mount " & Trim(sPartList[i]) & Space(1) & "/mnt" &/ sPart WAIT 
                    ' get the size using df -h | grep sPart and some sed
                    ' will embed some bash, but should probabbly be fixed
                SHELL "export " & sPart & "=$(df -h | grep " & sPart & ") && echo $" & sPart & " | cut -f 2 -d \' \'" TO sSize
                  'Message(sPart & Space(1) & "[ " & Trim(sSize) & " ]")
            'create the label and the drop down box here
              tl = NEW TextLabel(FrmPartSel.scrollPartitions) AS "Labels"
                WITH tl
                  .Tag = Trim(sPartList[i])
                  .Text = Trim(sPartList[i]) & Space(1) & "( " & sSize & " )"
                  .Width = MdlObjSizer.get_object_width(.Text) * 1.25
                    IF .Width > lbwidth THEN 
                      lbwidth = .Width
                    END IF
                    IF .Width < lbwidth THEN 
                    .Width = lbwidth
                    END IF
                  .Height = 27
                  .x = FrmPartSel.tlPartRow.Left
                  .Alignment = Align.Normal
                  .y = y
                END WITH 
                
              'create the combobox
              cb = NEW ComboBox(FrmPartSel.scrollPartitions) AS "MountPoints"
                WITH cb
                .tag = Trim(sPartList[i])
                '.x = lbwidth + 24
                .X = FrmPartSel.tlPartRow2.Left
                .y = y
                .Height = tl.Height
                .Width = tl.Width
                .ReadOnly = TRUE
                .tag = Trim(sPartList[i])
                .Add("Not Used")
                .Add("/")
                .Add("/home")
                .Add("/opt")
                .Add("/usr")
                .Add("/var")
                .Add("/tmp")
                END WITH 
                oMountPoints.Add(cb)
                i3drdrowX = cb.x + cb.Width + 8
              'create the file system options
                cb = NEW ComboBox(FrmPartSel.scrollPartitions) AS "fsTypes"
                  WITH cb
                  .Tag = Trim(sPartList[i])
                  '.x = i3drdrowX
                  .x = FrmPartSel.tlPartRow3.Left
                  .y = y
                  .ReadOnly = TRUE
                  .Width = tl.Width
                  .Add("Do not format")
                  .Add("XFS")
                  .Add("ReiserFS")
                  .Add("Ext2")
                  .Add("Ext3")
                  .Add("JFS")
                  
                  
                  END WITH 
                  oFsTypes.Add(cb)
                  
                                       
                ' now umount the partition and delete the mount point
                  SHELL "sudo umount /mnt" &/ sPart & " && sudo rm -r /mnt" &/ sPart WAIT 
                ' increase the value of y for the next label
                y = y + tl.Height + 4
                  
                
        NEXT 
            
      ELSE 
        'only one partition found. This could be trouble
        
        
            
      END IF
      
      SHELL "export PATH=$PATH:/sbin && sudo probepart | grep -i \" *swap$\" | cut -f 1 -d \' \'" TO sSwapList
        sSwapList = Trim(sSwapList)
        'Message.Info(sSwapList)
        IF InStr(sSwapList, gb.NewLine) THEN 
          'several swap partitions found
          'how do we deal w/ this?
        ELSE 
          spart = Trim(sSwapList)
          'SHELL "export " & sSwapList & "=$(df -h | grep -i swap) | cut -f 2 -d \' \'" TO vSwapSize
          SHELL "export PATH=$PATH:/sbin && export sw=$(sudo probepart | grep -i \" *swap$\") && echo $sw | cut -f 4 -d \' \'" TO vSwapSize
          
            iswapsize = CInt(vSwapSize)
            iswapsize = Round(iswapsize / 1024 / 1024, -2)
            'now create the swap label and combo box
              tl = NEW TextLabel(FrmPartSel.scrollPartitions) AS "swlabel"
                WITH tl
                  '.x = .Parent.x
                  .x = FrmPartSel.tlPartRow.Left
                  .y = y
                  .Text = sPart & " ( " & CStr(iswapsize) & "G )"
                  .Width = lbwidth
                  .Height = 27
                  .tag = "SwapLbl"
                  .Alignment = Align.Normal
                  ClsPartSel.sSwap = sPart
                  
                END WITH 
              
              ' now create a combobox with the swap-only option
                cb = NEW ComboBox(FrmPartSel.scrollPartitions) AS "swapsel"
                  WITH cb
                    .y = y
                    '.x = lbwidth + 24
                    .x = FrmPartSel.tlPartRow2.Left
                    .Width = tl.Width
                    .tag = "swapSelection"
                    .ReadOnly = TRUE
                    .Add("Swap")
                    
                  END WITH 
                    
                
                
          'Message.Info("Swap total = " & iswapsize)
        END IF

  
END
 
PUBLIC SUB MountPoints_CLick()
  
  DIM sdropdwn AS ComboBox
  DIM sTag AS String = LAST.tag
  DIM sText AS String = Trim(LAST.text)
    
    FOR EACH sdropdwn IN oMountPoints
      IF LAST.text <> "Not Used" AND LAST.text = sdropdwn.Text AND LAST.tag <> sdropdwn.tag THEN 
        Message.Error("You have already select a " & LAST.text & " partition. Please " &
        "select only one")
        LAST.text = "Not Used"
      END IF
      STOP EVENT 
    NEXT 
      
          
      
  IF sText = "Not Used" THEN 
    FOR EACH sdropdwn IN oFsTypes
      IF sdropdwn.Tag = sTag THEN 
        sdropdwn.Text = "Do not format"
        sdropdwn.Enabled = FALSE
      ELSE 
        sdropdwn.Enabled = TRUE
      END IF
    NEXT 
  ELSE 
    FOR EACH sdropdwn IN oFsTypes
      IF sdropdwn.Tag = sTag THEN 
        sdropdwn.Enabled = TRUE
      END IF
    NEXT 
  END IF
  IF LAST.text <> "Not Used" THEN 
    FOR EACH sdropdwn IN oFsTypes
      IF sdropdwn.tag = LAST.tag THEN 
        sdropdwn.Text = "XFS"
      'Balloon.Info("Select which filesystem to use with this partition", sdropdwn)
      Balloon("Select which filesystem to use with this partition", sdropdwn)
      
      END IF
    NEXT 
  END IF
  
  'send the value to the form public value
  ME.SET_SELECTED_PARTITION(LAST.tag, LAST.text)
  
  
  
END

PUBLIC SUB fsTypes_click()
  
  DIM cb AS ComboBox
    
IF LAST.text = "Do not format"
      FOR EACH cb IN oMountPoints
        IF cb.tag = LAST.tag AND cb.text = "/" THEN 
          Message.Error("The / partition MUST be formatted no matter what. Please select a filesystem for this partition")
            'default it to xfs
            LAST.text = "XFS"
          STOP EVENT 
        END IF
      NEXT 
    END IF
  
  'PRINT "format " & LAST.tag & " as " & LAST.text
  
  ME.SET_PARTITION_FORMAT(LAST.tag, LAST.text)
  
  
END

PUBLIC SUB SET_SELECTED_PARTITION(SPartition AS String, sMountPoint AS String)
  
  SELECT CASE sMountPoint
    CASE "/"
      FrmPartSel.sRootAddr = SPartition
    CASE "/home"
      FrmPartSel.sHomeAddr = SPartition
    CASE "/opt"
      FrmPartSel.sOptAddr = SPartition
    CASE "/usr"
      FrmPartSel.sUsrAddr = SPartition
    CASE "/var"
      FrmPartSel.sVarAddr = SPartition
    CASE "/tmp"
      FrmPartSel.sTmpAddr = SPartition
  END SELECT 
  
END

PUBLIC SUB SET_PARTITION_FORMAT(sMountPoint AS String, sFormat AS String)
  
    SELECT CASE sMountPoint
      CASE "/" 
        FrmPartSel.sRootFrmt = sFormat
      CASE "/home"
        FrmPartSel.sHomeFrmt = sFormat
      CASE "/opt"
        FrmPartSel.sOptFrmt = sFormat
      CASE "/usr"
        FrmPartSel.sUsrFrmt = sFormat
      CASE "/var"
        FrmPartSel.sVarFrmt = sFormat
      CASE "/tmp"
        FrmPartSel.sTrmFrmt = sFormat
    END SELECT 
    
  
END



