' Gambas module file

  
'    This file is part of vinstall-ng

'    vinstall-ng is free software: you can redistribute it and/or modify
'    it under the terms of the GNU General Public License as published by
'    the Free Software Foundation, either version 2 of the License, or
'    (at your option) any later version.

'    vinstall-ng  is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'    GNU General Public License for more details.

'    You should have received a copy of the GNU General Public License
'    along with vinstall-ng.  If not, see <http://www.gnu.org/licenses/>.


' needs to read arrays from clsPkgsel and install all required packages
'PUBLIC fPbInc AS Float

PRIVATE hproc AS Process
PRIVATE sDump AS String
PRIVATE sErr AS String
'PRIVATE iPkgCnt AS Integer
'PRIVATE iPkgNum AS Integer


PUBLIC SUB PERFORM_CUSTOM_INSTALL()
  
  DIM iRet AS Integer = 0
  
  WITH FMain
      .tvPlan["Inst1"].Selected = TRUE
      .tvPlan["Inst1"].Picture = MdlCore.sNowPic
      .tvPlan["Inst0"].Picture = MdlCore.sDonePic
  END WITH 
  'pass the pkg count to the function in mdlsetup
  MdlSetup.CALCULATE_PACKAGE_COUNT(TRUE)
  'ME.CALCULATE_TOTAL_PACKAGES() 
    'RETURN 
  WAIT 2  
  PRINT " INSTALLING REQUIRED BULKS"
  iRet = ME.INSTALL_REQUIRED_BULKS()
  IF iRet <> 0 THEN 
    'exit this is an error
     Message.Error(("There as been an error while installing required system software. ") & gb.newline & sErr)
     RETURN 
  END IF
  
  PRINT "INSTALING USER-SELECTED BULKS"
  iRet = ME.INSTALL_USER_SELECTED_BULKS()
  'Message("Installing user-selected bulks")
  IF iRet <> 0 THEN 
    Message.Error(("There has been an error while installing optional software to your system. ") & gb.newline & sErr)
    RETURN 
  END IF
  
  'iret = ME.INSTALL_USER_SELECTED_PACKAGES()
  PRINT "INSTALLING OPTIONAL SOFTWARE SELECTED BY USER"
  iret = ME.INSTALL_USER_PACKAGES() ' new code based on the gridview
    'Message("Installing user-selected packages")
  IF iRet <> 0 THEN 
    Message.Error(("There has been an error while installing optional software to your system.") & gb.newline & sErr)
    RETURN 
  END IF
      
  'iret = ME.INSTALL_PACKAGES_REQUIRED()
  ' Make sure we set the right value for the progress bar here
    'MdlInstallSys.iPkgCnt = iPkgCnt
    'MdlInstallSys.iPkgNum = iPkgNum
  PRINT "INSTALLING ADDITIONAL REQUIRED SOFTWARE"
  iret = MdlInstallSys.INSTALL_REQUIRED_PACKAGES()
  IF iret <> 0 THEN 
    Message.Error(("Error while installing required system software. ") & gb.NewLine & sErr)
    RETURN 
  END IF
  
  'iret = ME.INSTALL_CONF_PACKAGES()
    '/ USE THE FUNCTION IN MDLINSTALLSYS.MODULE DOES THE EXACT SAME THING AND HAS PROGRESS UPDATING
  PRINT "INSTALLING CONFIGURATION PACKAGES"
  iret = MdlInstallSys.INSTALL_CONFIG_PACKAGES()
  IF iret <> 0 THEN 
    Message.Error(("Error while installing system configuration. ") & gb.NewLine & sErr)
    RETURN 
  END IF
  
  PRINT "INSTALLING KERNELS"
  iret = ME.INSTALL_KERNELS()
  IF iret <> 0 THEN 
    Message.Error(("Unable to install kernels. ") & gb.NewLine & sErr)
    RETURN 
  END IF
  
  PRINT "Binding and config"
  MdlConfLilo.PERFORM_BINDING()
  'iret = MdlConfLilo.PERFORM_BINDING()
  'IF iret <> 0 THEN 
  '  Message.Error(("Unable to Bind Mount. ") & gb.NewLine & sErr)
  '  RETURN 
  'END IF
  
  ' write new fstab now
   MdlInstallSys.WRITE_NEW_FSTAB()
  
  ' Installation complete....
  FrmInstallSys.pbInstallProg.Value = 1
  FrmInstallSys.pbInstallProg2.Value = 1
  'Message.Info("packages have been installed in your system. Please click next to configure it.")
  FrmInstallSys.tlBanner.Text = ("Vectorlinux is now installed in your system. Please click next to configure it.")
  FrmInstallSys.tlCurrPkg.Text = ("packages have been Installed. Please click next to move on to System Configuration.")
  WITH FMain
    .btQuit.Enabled = TRUE
    .btQuit.ForeColor = Color.Black
    .btnext.Enabled = TRUE
    .btnext.ForeColor = Color.Black
  END WITH   
  'MdlCore.unlock_gui()  
END


PUBLIC FUNCTION INSTALL_KERNELS() AS Integer
  ' Dont know if I should install all kernels, but for the lack of information now, I will
  DIM sKerNames AS String
  DIM sKernels AS String[]
  DIM sKenVs AS String[]
  DIM sKernVers AS String
  DIM sKernNo AS String
  DIM sKrnLbl AS String
  DIM sFoundOut AS String
  DIM sKernName AS String
  DIM sLabel AS String
  DIM sKernelPath AS String
  DIM i AS Integer
  ClsGlobal.sSourceMnt = "/mnt/cdrom"
  
  SHELL "cat " & ClsGlobal.sSourceMnt &/ "veclinux" &/ "SETUP.CONF | grep ^ISO_KERNEL_" TO sKernames
  SHELL "cat " & ClsGlobal.sSourceMnt &/ "veclinux" &/ "SETUP.CONF | grep ^HD_KERNEL_" TO sKernVers
  sKernames = Trim(sKernames)
  sKernVers = Trim(sKernVers)
  sKernels = Split(sKernames, "\n")
  FOR i = 0 TO sKernels.Count - 1
    sKrnLbl = Trim(sKernels[i])
    'sKernNo = Left(sKrnLbl, InStr(sKrnLbl, "="))
    sKernNo = Left(sKrnLbl, InStr(sKrnLbl, "=") - 1)
    sKernNo = Trim(sKernNo)
    sLabel = Right(sKrnLbl, Len(sKrnLbl) - InStr(sKrnLbl, "\'"))
    sLabel = Left(sLabel, RInStr(sLabel, "\'") - 1)
    sKernNo = Right(sKernNo) ' this is the number of the kernel
    SHELL " cat " & ClsGlobal.sSourceMnt &/ "veclinux" &/ "SETUP.CONF | grep ^HD_KERNEL_" & sKernNo TO sFoundOut
    sFoundOut = Trim(sFoundOut)
    sKernName = Right(sFoundOut, Len(sFoundOut) - InStr(sFoundOut, "\'"))
    sKernName = Left(sKernName, RInStr(sKernName, "\'") - 1)
    'Message.Info(sLabel & " - " & sKernName)
     'now copy the kernel to the right place
     sKernelPath = ClsGlobal.sSourceMnt &/ "isolinux" &/ "kernel" &/ sLabel
     IF Exist(sKernelPath) THEN 
       sDump = ""
       SHELL "echo \"\" > /tmp/installdump" WAIT 
       sErr = ""
       hproc = SHELL "cp " & sKernelPath & Space(1) & ClsGlobal.sTargetMnt &/ "boot" &/ "vmlinuz-" & sKernName & " 2> /tmp/installdump" 'FOR READ
       WAIT 3
          IF hproc.State = Process.Stopped THEN 
            sDump = File.Load("/tmp/installdump")
              IF InStr(sDump, "FAILED") > 0 THEN 
                RETURN 1 
              ELSE
                RETURN 0
              END IF
            END IF
     END IF
     'SHELL "cp " & ClsGlobal.sSourceMnt &/ "isolinux" &/ "kernel" &/ 
  NEXT               
END




PUBLIC FUNCTION INSTALL_USER_PACKAGES() AS Integer
  
  DIM ii, i, iStepTotal AS Integer
  DIM sBasePath AS String = ClsGlobal.sSourceMnt &/ "packages"
  DIM sLoc, spkg, sDump AS String
  
  ' get the step total by running though the list and comparing pictures
  ii = 0
    REPEAT 
    IF FrmUsrPkgSel.GridView1[ii, 0].Picture = FrmUsrPkgSel.pYes THEN 
    INC iStepTotal
    END IF
      INC ii
    UNTIL ii = FrmUsrPkgSel.GridView1.Rows.Count - 1
    
  ii = 0    
  
  
  REPEAT 
    IF FrmUsrPkgSel.GridView1[ii, 0].Picture = FrmUsrPkgSel.pYes THEN 
      sLoc = FrmUsrPkgSel.GridView1[ii, 4].Text
      sPkg = FrmUsrPkgSel.GridView1[ii, 5].Text
      INC i
        ' install this package
        EXEC ["echo \" \" > /tmp/installdump"] WAIT 
          FrmInstallSys.tlCurrPkg.Text = ("Installing") & Space(1) & FrmUsrPkgSel.GridView1[ii, 1].Text
                FrmInstallSys.pbInstallProg.Value = i / iStepTotal
          INC ClsGlobal.iPkgNum
          FrmInstallSys.pbInstallProg2.Value = MdlSetup.UPDATE_OVERALL_PROGRESS(ClsGlobal.iPkgTot, ClsGlobal.iPkgNum)
          
              'hproc = EXEC ["installpkg", sBasePath &/ sLoc &/ sPkg, " -R ", ClsGlobal.sTargetMnt, " || echo \'FAILED\' 2> /tmp/installdump"]
              'hproc = EXEC ["installpkg -R " & ClsGlobal.sTargetMnt & Space(1) & sBasePath &/ sLoc &/ sPkg & " || echo \'FAILED\' 2> /tmp/installdump"]
              'hproc = EXEC ["installpkg " & sBasePath &/ sLoc &/ sPkg & " -R " & ClsGlobal.sTargetMnt & " || echo \'FAILED\' 2> /tmp/installdump"]
              'hproc = EXEC ["installpkg", sBasePath &/ sLoc &/ sPkg, "-R " & ClsGlobal.sTargetMnt & " || echo \'FAILED\' 2> /tmp/installdump"] WAIT 
              'hproc = EXEC ["installpkg " & sBasePath &/ sLoc &/ sPkg & Space(1) & "-R" & Space(1) & ClsGlobal.sTargetMnt & " || echo \'FAILED\' 2> /tmp/installdump"] WAIT 
              'hproc = SHELL "installpkg " & sBasePath &/ sLoc &/ sPkg & Space(1) & "-R" & Space(1) & ClsGlobal.sTargetMnt & Space(1) & "|| echo \'FAILED\' 2> /tmp/installdump" 'WAIT
              hproc = EXEC ["installpkg", "-R", ClsGlobal.sTargetMnt, sBasePath &/ sLoc &/ sPkg] ' WAIT 
                  'if hpro
                    WAIT 1
                    IF hproc.State = Process.Running THEN 
                      REPEAT 
                        WAIT 
                    UNTIL hproc.State = Process.Stopped
                  END IF
                  IF hproc.Value > 0 THEN 
                    Message.Error(sPkg & Space(1) & ("Failed to install. Installation will stop"))
                    RETURN 1
                  END IF
'          sDump = File.Load("/tmp/installdump")
          
          'INC i
    
          
            ' ' IF InStr(sDump, "FAILED") > 0 THEN 
            ' '       Message.Error("Error installing user-selected package" & Space(1) & sPkg)
            ' '       RETURN 1
            ' '     ' ELSE 
            ' '     '   RETURN 0
            ' '     END IF
            ' ' 
    END IF
    INC ii
  UNTIL ii = FrmUsrPkgSel.GridView1.Rows.Count - 1
  
    
    
  
END

PUBLIC FUNCTION INSTALL_USER_SELECTED_PACKAGES() AS Integer
  
  DIM cb AS CheckBox
  DIM sBasePath AS String = ClsGlobal.sSourceMnt &/ "packages"
  DIM iStepTotal AS Integer = 0
  DIM i AS Integer = 0
  DIM sDump AS String
  
  'Message.Info("Begin installation of user selected software")
  
    FOR EACH cb IN MdlPkgSel.Pkgs
      IF cb.value = TRUE THEN 
        INC iStepTotal
      END IF
    NEXT 
          
    FOR EACH cb IN MdlPkgSel.Pkgs
      IF cb.Value = TRUE THEN 
        ' we will only measure #/##
        sDump = ""
        SHELL "echo \"\" > /tmp/installdump" WAIT 
          'Message.Info(sBasePath &/ cb.tag)
          FrmInstallSys.tlCurrPkg.Text = ("Installing user-selected package") & Space(1) & File.Name(sBasePath &/ cb.Tag)
        'hproc = SHELL "installpkg " & sBasePath &/ cb.tag & Space(1) & "-R" & Space(1) & ClsGlobal.sTargetMnt & Space(1) & "|| echo \'FAILED\' 2> /tmp/installdump" 'WAIT
          hproc = EXEC ["installpkg", sBasePath &/ cb.tag, "-R", ClsGlobal.sTargetMnt] 
          ' 
          WAIT 1
            IF hproc.State = Process.running THEN 
              REPEAT 
                WAIT 
              UNTIL hproc.State = Process.Stopped
            END IF
            'sDump = File.Load("/tmp/installdump")
            ' update step progress
            INC i
              FrmInstallSys.pbInstallProg.Value = i / iStepTotal
            INC ClsGlobal.iPkgNum
              'MdlSetup.UPDATE_OVERALL_PROGRESS(iPkgCnt, iPkgNum)
              FrmInstallSys.pbInstallProg2.Value = MdlSetup.UPDATE_OVERALL_PROGRESS(ClsGlobal.iPkgTot, ClsGlobal.iPkgNum)
                'IF InStr(sDump, "FAILED") > 0 THEN 
                IF hproc.Value > 0 THEN 
                  Message.Error("Error installing user-selected package" & Space(1) & cb.Text)
                  RETURN 1
                ' ELSE 
                '   RETURN 0
                END IF
'        NEXT 
        'Message.Warning("Package " & File.Name(sBasePath &/ cb.tag) & " is installed")
      END IF
      
    NEXT 
    'Message.Info("End installation of user selected software")
END

PUBLIC FUNCTION INSTALL_USER_SELECTED_BULKS() AS Integer
  
  DIM SPkg AS String
  DIM sPkgPath AS String = ClsGlobal.sSourceMnt &/ "veclinux"
  DIM i, ii AS Integer
  DIM iRet AS Integer
  
  REPEAT 
    IF FrmPkgSel.scrlInstallOpts[ii, 0].Picture = FrmPkgSel.pyes THEN
      sPkg = FrmPkgSel.scrlInstallOpts[ii, 1].text & ".tlz"
      iret = ME.INSTALL_THIS_BULK(sPkgPath &/ "optional" &/ sPkg)
        IF iret <> 0 THEN 
          RETURN 1
        END IF
      
      END IF
      INC ii
    UNTIL ii = FrmPkgSel.scrlInstallOpts.Rows.Count
  
  
 END


PUBLIC FUNCTION INSTALL_REQUIRED_BULKS() AS Integer
  
  DIM sOutput AS String
  DIM sList AS String[]
  DIM sLine AS String[]
  DIM i AS Integer
  DIM sBulk AS String
  DIM sTrimmed AS String
  DIM sBUlkDesc AS String
  DIM iRet AS Integer
  
  SHELL "cat " & ClsGlobal.sSourceMnt &/ "veclinux" &/ "SETUP.CONF" & " | grep ^BULK | grep required" TO sOutput
  sOutput = Trim(sOutput)
  IF InStr(sOutput, gb.NewLine) THEN 
    sList = Split(sOutput, gb.NewLine)
    'iPkgCnt = iPkgCnt + sList.Count ' add these to the overall package count.
    FOR i = 0 TO sList.count - 1
      sTrimmed = Right(sList[i], Len(sList[i]) - InStr(sList[i], "\'"))
      sTrimmed = Left(sTrimmed, RInStr(sTrimmed, "\'") - 1)
      'sTrimmed = Left(sTrimmed, Len(sTrimmed) - RInStr(sTrimmed, "\'"))
      sLine = Split(sTrimmed, ":")
      sBulk = sLine[0]
      sBUlkDesc = sLine[2]
      PRINT " + install " & ClsGlobal.sSourceMnt &/ "veclinux" &/ sBulk
      'iRet = ME.INSTALL_THIS_PACKAGE(ClsGlobal.sSourceMnt &/ "veclinux" &/ sBulk)
      iret = ME.INSTALL_THIS_BULK(ClsGlobal.sSourceMnt &/ "veclinux" &/ sBulk)
      IF iRet <> 0 THEN 
        ' error... stop
        PRINT ("Error while installing ") & sBulk & " -> " & sBUlkDesc
        RETURN 1
      END IF                  
      PRINT " ! " & ClsGlobal.sSourceMnt &/ "veclinux" &/ sBulk & " is installed"
    NEXT 
  ELSE ' found only one line
    'iPkgCnt = iPkgCnt + 1 ' add only one to the overall package count
    sTrimmed = Right(sOutput, Len(sOutput) - InStr(sOutput, "\'"))
    sTrimmed = Left(sTrimmed, Len(sTrimmed) - RInStr(sTrimmed, "\'"))
    sLine = Split(sTrimmed, ":")
    sBulk = sLine[0]
    sBUlkDesc = sLine[2]
    iRet = ME.INSTALL_THIS_PACKAGE(ClsGlobal.sSourceMnt &/ "veclinux" &/ sBulk)
    IF iRet <> 0 THEN 
      ' error... stop
      PRINT ("Error while installing ") & sBulk & " -> " & sBUlkDesc
      RETURN 1
    END IF           
  END IF
END


PUBLIC FUNCTION INSTALL_THIS_BULK(sBulkPath AS String) AS Integer
  
  DIM vSize AS Integer
  DIM vTargetSize AS Integer
  
  DIM sDesc AS String
  
  SHELL "cat " & ClsGlobal.sSourceMnt &/ "veclinux" &/ "SETUP.CONF | grep " & File.Name(sBulkPath) & " | cut -f 2 -d :" TO vSize
  SHELL "cat " & ClsGlobal.sSourceMnt &/ "veclinux" &/ "SETUP.CONF | grep " & File.Name(sBulkPath) & " | cut -f 3 -d :" TO sDesc
    ' IF Right(sDesc) = "\'" THEN 
    '     sDesc = Left(sDesc, RInStr(sDesc, "\'") - 1)
    ' END IF
    sDesc = Replace(sDesc, "\'", "")
  vSize = Trim(CStr(vSize))
  sDump = ""
  'SHELL "echo \" \" > /tmp/installdump" WAIT 
  EXEC ["echo \" \" > /tmp/installdump"] WAIT 
  sErr = ""
  IF vSize <> "" THEN 
    SHELL "gsize=$(df| grep " & ClsGlobal.sTargetMnt & " ) && echo $gsize | cut -f3 -d \' \'" TO vTargetSize
'    EXEC ["gzise=$(df | grep " & ClsGlobal.sTargetMnt & ") && echo $gzise | cut -f3 -d \' \'"] TO vTargetSize
  END IF
  FrmInstallSys.pbInstallProg.Value = 0
  INC ClsGlobal.iPkgNum
  PRINT " Installing " & sBulkPath
        MdlSetup.SHOW_PROGRESS_CONTROLS()
  FrmInstallSys.tlCurrPkg.Text = "Installing " & File.Name(sBulkPath)
  hproc = SHELL "lzmadec <" & sBulkPath & " | tar -xp -C " & ClsGlobal.sTargetMnt & " || echo \'FAILED\' 2> /tmp/installdump" 'FOR READ  
      'hproc = EXEC ["lzmadec", "<", sBulkPath, "|", "tar", "-xp", "-C", clsglobal.sTargetMnt] 'WAIT 
      'hproc = EXEC ["lzmadec", "<" & sBulkPath & " | tar -xp -C " & ClsGlobal.sTargetMnt]
  WAIT 1
  IF hproc.State = Process.Running THEN 
    WAIT 1
      'sDump = File.Load("/tmp/installdump")
    REPEAT 
      WAIT 1
      ' do the progress updating here
        FrmInstallSys.tlCurrPkg.Text = Trim(sDesc)
      IF vSize <> "" THEN 
        'MdlInstallSys.UPDATE_STEP_PROGRESS(CFloat(vTargetSize), CFloat(vSize))
        MdlInstallSys.UPDATE_STEP_PROGRESS(vTargetSize, vSize, ClsGlobal.iPkgNum)
        
        FrmInstallSys.pbInstallProg2.Value = (FrmInstallSys.pbInstallProg2.Value + (ClsGlobal.fPbInc - (ClsGlobal.fPbInc * FrmInstallSys.pbInstallProg.Value)) / 100)
      END IF
    UNTIL 
      hproc.State = Process.Stopped
        IF hproc.value > 0 THEN 
            Message.Error(File.BaseName(sBulkPath) & Space(1) & ("failed to install. Installation will stop now"))
              RETURN 1
      END IF
      ' ' '   sDump = File.Load("/tmp/installdump")
      ' ' ' IF InStr(sDump, "FAILED") > 0 THEN 
      ' ' '   RETURN 1
      ' ' ' ELSE
        FrmInstallSys.pbInstallProg2.Value = MdlSetup.UPDATE_OVERALL_PROGRESS(ClsGlobal.iPkgTot, ClsGlobal.iPkgNum) 
      RETURN 0
    END IF
'  END IF
END


PUBLIC FUNCTION INSTALL_THIS_PACKAGE(sPackagePath AS String) AS Integer
  DIM vSize AS Variant
  DIM vTargetSize AS Integer
  
  
  sDump = ""
  SHELL "echo \"\" > /tmp/installdump" WAIT 
  sErr = ""
      
  SHELL "cat " & ClsGlobal.sSourceMnt &/ "veclinux" &/ "SETUP.CONF | grep " & File.Name(sPackagePath) & " | cut -f 2 -d :" TO vSize
  IF vSize <> "" THEN 
    SHELL "gsize=$(df| grep " & ClsGlobal.sTargetMnt & " ) && echo $gsize | cut -f3 -d \' \'" TO vTargetSize
  END IF
  FrmInstallSys.pbInstallProg.Value = 0          
  INC ClsGlobal.iPkgNum
  PRINT "Package " & ClsGlobal.iPkgNum & " of " & ClsGlobal.iPkgTot
  MdlSetup.SHOW_PROGRESS_CONTROLS()
  FrmInstallSys.tlCurrPkg.Text = "Processing " & File.Name(sPackagePath)
  'hproc = SHELL "install-pkg " & sPackagePath & Space(1) & ClsGlobal.sTargetMnt & " || echo \'FAILED\'" FOR READ
  IF Right(sPackagePath, 3) LIKE "t?z" THEN
    'hproc = SHELL "installpkg " & sPackagePath & " -R " & ClsGlobal.sTargetMnt & " || echo \'FAILED\' 2> /tmp/installdump" 'FOR READ
    hproc = EXEC ["installpkg", sPackagePath, "-R", ClsGlobal.sTargetMnt]
  ENDIF 
  WAIT 1
  IF hproc.State = Process.Running THEN 
    REPEAT 
    WAIT 1
    ' do the progress bar updating here
    IF vSize <> "" THEN 
      'MdlInstallSys.UPDATE_STEP_PROGRESS(CFloat(vTargetSize), CFloat(vSize))
      MdlInstallSys.UPDATE_STEP_PROGRESS(vTargetSize, CInt(vSize), ClsGlobal.iPkgNum)
      
    END IF
    UNTIL 
      hproc.state = Process.Stopped
      ' now do the error checking here and return a value
          'sDump = File.Load("/tmp/installdump")
          
      'IF InStr(sDump, "FAILED") > 0 THEN 
      IF hproc.Value > 0 THEN 
        'ERROR HAS OCCURRED
        RETURN 1
      ELSE
        FrmInstallSys.pbInstallProg.Value = 1
        WAIT  
        FrmInstallSys.pbInstallProg2.Value = MdlSetup.UPDATE_OVERALL_PROGRESS(ClsGlobal.iPkgTot, ClsGlobal.iPkgNum)
        RETURN 0
      END IF
  END IF
END


' PUBLIC SUB Process_read()
'   
'   DIM sLine AS String
'   READ #LAST, sLine, -256
'   sDump = sDump & gb.NewLine & sLine
'   PRINT sLine
' END
' PUBLIC SUB Process_kill()
'   
'   DIM sDump AS String = File.Load("/tmp/installdump")
'     IF InStr(sDump, "FAILED") > 0 THEN 
'       Message.Error("The install process has returned an error.")
'   
' END

PUBLIC SUB process_error(msg AS String)

  sErr = sErr & gb.NewLine & sErr
  PRINT MSG
END 

