' Gambas module file

  
'    This file is part of vinstall-ng

'    vinstall-ng is free software: you can redistribute it and/or modify
'    it under the terms of the GNU General Public License as published by
'    the Free Software Foundation, either version 2 of the License, or
'    (at your option) any later version.

'    vinstall-ng  is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'    GNU General Public License for more details.

'    You should have received a copy of the GNU General Public License
'    along with vinstall-ng.  If not, see <http://www.gnu.org/licenses/>.


' needs to read arrays from clsPkgsel and install all required packages
PRIVATE hproc AS Process
PRIVATE sDump AS String
PRIVATE sErr AS String
PRIVATE iPkgCnt AS Integer
PRIVATE iPkgNum AS Integer


PUBLIC SUB PERFORM_CUSTOM_INSTALL()
  
  DIM iRet AS Integer = 0
  
  WITH FMain
      .tvPlan["Inst1"].Selected = TRUE
      .tvPlan["Inst1"].Picture = MdlCore.sNowPic
      .tvPlan["Inst0"].Picture = MdlCore.sDonePic
  END WITH 
  ME.CALCULATE_TOTAL_PACKAGES() 
    'RETURN 
  WAIT 2  
  iRet = ME.INSTALL_REQUIRED_BULKS()
  PRINT " INSTALLING REQUIRED BULKS"
  IF iRet <> 0 THEN 
    'exit this is an error
     Message.Error(("There as been an error while installing required system software. ") & gb.newline & sErr)
     RETURN 
  END IF
  
  iRet = ME.INSTALL_USER_SELECTED_BULKS()
  'Message("Installing user-selected bulks")
  PRINT "INSTALING USER-SELECTED BULKS"
  IF iRet <> 0 THEN 
    Message.Error(("There has been an error while installing optional software to your system. ") & gb.newline & sErr)
    RETURN 
  END IF
  
  'iret = ME.INSTALL_USER_SELECTED_PACKAGES()
  iret = ME.INSTALL_USER_PACKAGES() ' new code based on the gridview
    'Message("Installing user-selected packages")
  PRINT "INSTALLING OPTIONAL SOFTWARE SELECTED BY USER"
  IF iRet <> 0 THEN 
    Message.Error(("There has been an error while installing optional software to your system.") & gb.newline & sErr)
    RETURN 
  END IF
      
  'iret = ME.INSTALL_PACKAGES_REQUIRED()
  ' Make sure we set the right value for the progress bar here
    MdlInstallSys.iPkgCnt = iPkgCnt
    MdlInstallSys.iPkgNum = iPkgNum
  iret = MdlInstallSys.INSTALL_REQUIRED_PACKAGES()
  PRINT "INSTALLING ADDITIONAL REQUIRED SOFTWARE"
  
  IF iret <> 0 THEN 
    Message.Error(("Error while installing required system software. ") & gb.NewLine & sErr)
    RETURN 
  END IF
  
  'iret = ME.INSTALL_CONF_PACKAGES()
    '/ USE THE FUNCTION IN MDLINSTALLSYS.MODULE DOES THE EXACT SAME THING AND HAS PROGRESS UPDATING
    iret = MdlInstallSys.INSTALL_CONFIG_PACKAGES()
  PRINT "INSTALLING CONFIGURATION PACKAGES"
  IF iret <> 0 THEN 
    Message.Error(("Error while installing system configuration. ") & gb.NewLine & sErr)
    RETURN 
  END IF
  
  iret = ME.INSTALL_KERNELS()
  PRINT "INSTALLING KERNELS"
  IF iret <> 0 THEN 
    Message.Error(("Unable to install kernels. ") & gb.NewLine & sErr)
    RETURN 
  END IF
  
  ' write new fstab now
   MdlInstallSys.WRITE_NEW_FSTAB()
  
  ' Installation complete....
  FrmInstallSys.pbInstallProg.Value = 1
  FrmInstallSys.pbInstallProg2.Value = 1
  'Message.Info("packages have been installed in your system. Please click next to configure it.")
  FrmInstallSys.tlBanner.Text = ("Vectorlinux is now installed in your system. Please click next to configure it.")
  FrmInstallSys.tlCurrPkg.Text = ("packages have been Installed. Please click next to move on to System Configuration.")
  WITH FMain
    .btQuit.Enabled = TRUE
    .btQuit.ForeColor = Color.Black
    .btnext.Enabled = TRUE
    .btnext.ForeColor = Color.Black
  END WITH   
  'MdlCore.unlock_gui()  
END


PUBLIC FUNCTION INSTALL_KERNELS() AS Integer
  ' Dont know if I should install all kernels, but for the lack of information now, I will
  DIM sKerNames AS String
  DIM sKernels AS String[]
  DIM sKenVs AS String[]
  DIM sKernVers AS String
  DIM sKernNo AS String
  DIM sKrnLbl AS String
  DIM sFoundOut AS String
  DIM sKernName AS String
  DIM sLabel AS String
  DIM sKernelPath AS String
  DIM i AS Integer
  ClsGlobal.sSourceMnt = "/mnt/cdrom"
  
  SHELL "cat " & ClsGlobal.sSourceMnt &/ "veclinux" &/ "SETUP.CONF | grep ^ISO_KERNEL_" TO sKernames
  SHELL "cat " & ClsGlobal.sSourceMnt &/ "veclinux" &/ "SETUP.CONF | grep ^HD_KERNEL_" TO sKernVers
  sKernames = Trim(sKernames)
  sKernVers = Trim(sKernVers)
  sKernels = Split(sKernames, "\n")
  FOR i = 0 TO sKernels.Count - 1
    sKrnLbl = Trim(sKernels[i])
    'sKernNo = Left(sKrnLbl, InStr(sKrnLbl, "="))
    sKernNo = Left(sKrnLbl, InStr(sKrnLbl, "=") - 1)
    sKernNo = Trim(sKernNo)
    sLabel = Right(sKrnLbl, Len(sKrnLbl) - InStr(sKrnLbl, "\'"))
    sLabel = Left(sLabel, RInStr(sLabel, "\'") - 1)
    sKernNo = Right(sKernNo) ' this is the number of the kernel
    SHELL " cat " & ClsGlobal.sSourceMnt &/ "veclinux" &/ "SETUP.CONF | grep ^HD_KERNEL_" & sKernNo TO sFoundOut
    sFoundOut = Trim(sFoundOut)
    sKernName = Right(sFoundOut, Len(sFoundOut) - InStr(sFoundOut, "\'"))
    sKernName = Left(sKernName, RInStr(sKernName, "\'") - 1)
    'Message.Info(sLabel & " - " & sKernName)
     'now copy the kernel to the right place
     sKernelPath = ClsGlobal.sSourceMnt &/ "isolinux" &/ "kernel" &/ sLabel
     IF Exist(sKernelPath) THEN 
       sDump = ""
       SHELL "echo \"\" > /tmp/installdump" WAIT 
       sErr = ""
       hproc = SHELL "cp " & sKernelPath & Space(1) & ClsGlobal.sTargetMnt &/ "boot" &/ "vmlinuz-" & sKernName & " 2> /tmp/installdump" 'FOR READ
       WAIT 3
          IF hproc.State = Process.Stopped THEN 
            sDump = File.Load("/tmp/installdump")
              IF InStr(sDump, "FAILED") > 0 THEN 
                RETURN 1 
              ELSE
                RETURN 0
              END IF
            END IF
     END IF
     'SHELL "cp " & ClsGlobal.sSourceMnt &/ "isolinux" &/ "kernel" &/ 
  NEXT               
END


' ' PUBLIC FUNCTION INSTALL_CONF_PACKAGES() AS Integer
' '   
' '   DIM sOutput, sLine, sPkg, sPkgPath AS String
' '   DIM i, iret AS Integer
' '   DIM sList, sLinearr AS String[]
' '   
' '   SHELL "cat " & ClsGlobal.sSourceMnt &/ "veclinux" &/ "SETUP.CONF | grep ^CONF" TO sOutput
' '   sOutput = Trim(sOutput)
' '   IF InStr(sOutput, "\n") > 0 THEN 
' '     sList = Split(sOutput, "\n")
' '     FOR i = 0 TO sList.Count - 1
' '       sLine = sList[i]
' '       sPkg = Right(sLine, Len(sLine) - InStr(sLine, "\'"))
' '       sPkg = Left(sPkg, RInStr(sPkg, "\'") - 1)                
' '       sLinearr = Split(sPkg, ":")
' '       sPkgPath = ClsGlobal.sSourceMnt &/ "veclinux" &/ sLinearr[0]
' '       ' install it now
' '       PRINT " + Install " & sPkgPath
' '       'iret = ME.INSTALL_THIS_PACKAGE(sPkgPath)
' '       iret = ME.INSTALL_THIS_BULK(sPkgPath)
' '       IF iret <> 0 THEN 
' '         RETURN iret
' '       END IF
' '       PRINT " ! " & sPkgPath & " is installed"
' '     NEXT 
' '   ELSE ' single CONF line
' '     sPkg = Right(sOutput, Len(sOutput) - InStr(sOutput, "\'"))
' '     sPkg = Left(sPkg, RInStr(sPkg, "\'") - 1)
' '     sLinearr = Split(sPkg, ":")
' '     sPkgPath = ClsGlobal.sSourceMnt &/ "veclinux" &/ sLinearr[0]
' '     'iret = ME.INSTALL_THIS_PACKAGE(sPkgPath)
' '     iret = ME.INSTALL_THIS_BULK(sPkgPath)
' '     IF iret <> 0 THEN   
' '       RETURN iret
' '     END IF
' '   END IF
' ' END


' ' ' PUBLIC FUNCTION INSTALL_PACKAGES_REQUIRED() AS Integer
' ' ' 
' ' '   DIM i, iRet AS Integer
' ' '   DIM sPkg AS String
' ' '   DIM sDump AS String
' ' '   DIM ii AS Integer
' ' '     FOR EACH spkg IN RDir(ClsGlobal.sSetupConfPath &/ "packages" &/ "required", "t?z")
' ' '       INC ii
' ' '     NEXT 
' ' '   
' ' '   i = 0
' ' '   FOR EACH sPkg IN RDir(ClsGlobal.sSourceMnt &/ "packages" &/ "required")
' ' '     SELECT CASE File.Ext(ClsGlobal.sSourceMnt &/ "packages" &/ "required" &/ sPkg)
' ' '     CASE "tlz", "tgz"
' ' '       INC i
' ' '       PRINT " + Install " & ClsGlobal.sSourceMnt &/ "packages" &/ "required" &/ sPkg
' ' '       'iret = ME.INSTALL_THIS_PACKAGE(ClsGlobal.sSourceMnt &/ "packages" &/ "required" &/ sPkg)
' ' '       SHELL "echo \"\" > /tmp/installdump" WAIT 
' ' '       
' ' '       hproc = SHELL "installpkg " & ClsGlobal.sSourceMnt &/ "packages" &/ "required" &/ sPkg & " -R " & ClsGlobal.sTargetMnt & " || echo \'FAILED\' 2> /tmp/installdump"
' ' '       WAIT 1
' ' '         IF hproc.State = Process.Running THEN 
' ' '           REPEAT 
' ' '             WAIT 
' ' '           UNTIL hproc.State = Process.Stopped
' ' '         END IF
' ' '           sDump = File.Load("/tmp/installdump")
' ' '             IF InStr(sDump, "FAILED") THEN 
' ' '               RETURN 1
' ' '             END IF
' ' '       
' ' '       PRINT " ! " & ClsGlobal.sSourceMnt &/ "packages" &/ "required" &/ sPkg & " is installed"
' ' '         FrmInstallSys.pbInstallProg.Value = i / ii
' ' '         
' ' '         INC iPkgNum
' ' '         
' ' '         FrmInstallSys.pbInstallProg2.Value = MdlSetup.UPDATE_OVERALL_PROGRESS(iPkgCnt, iPkgNum)
' ' '     END SELECT 
' ' '   NEXT 
' ' ' END


PUBLIC FUNCTION INSTALL_USER_PACKAGES() AS Integer
  
  DIM ii, i, iStepTotal AS Integer
  DIM sBasePath AS String = ClsGlobal.sTargetMnt &/ "packages"
  DIM sLoc, spkg, sDump AS String
  
  ' get the step total by running though the list and comparing pictures
  ii = 0
    REPEAT 
    IF FrmUsrPkgSel.GridView1[ii, 0].Picture = FrmUsrPkgSel.pYes THEN 
    INC iStepTotal
    END IF
      INC ii
    UNTIL ii = FrmUsrPkgSel.GridView1.Rows.Count - 1
    
  ii = 0    
  
  
  REPEAT 
    IF FrmUsrPkgSel.GridView1[ii, 0].Picture = FrmUsrPkgSel.pYes THEN 
      sLoc = FrmUsrPkgSel.GridView1[ii, 4].Text
      sPkg = FrmUsrPkgSel.GridView1[ii, 5].Text
      INC i
        ' install this package
        EXEC ["echo", " ", " > /tmp/installdump"] WAIT 
          FrmInstallSys.tlCurrPkg.Text = ("Installing") & Space(1) & FrmUsrPkgSel.GridView1[ii, 1].Text
              hproc = EXEC ["installpkg", sBasePath &/ sLoc &/ sPkg, " -R ", ClsGlobal.sTargetMnt, " || echo \'FAILED\' 2> /tmp/installdump"]
                    WAIT 1
                    IF hproc.State = Process.Running THEN 
                      REPEAT 
                        WAIT 
                    UNTIL hproc.State = Process.Stopped
                  END IF
          sDump = File.Load("/tmp/installdump")
          
          INC i
          FrmInstallSys.pbInstallProg.Value = i / iStepTotal
            IF InStr(sDump, "FAILED") > 0 THEN 
                  Message.Error("Error installing user-selected package" & Space(1) & sPkg)
                  RETURN 1
                ' ELSE 
                '   RETURN 0
                END IF
            
    END IF
    INC ii
  UNTIL ii = FrmUsrPkgSel.GridView1.Rows.Count - 1
  
    
    
  
END

PUBLIC FUNCTION INSTALL_USER_SELECTED_PACKAGES() AS Integer
  
  DIM cb AS CheckBox
  DIM sBasePath AS String = ClsGlobal.sSourceMnt &/ "packages"
  DIM iStepTotal AS Integer = 0
  DIM i AS Integer = 0
  DIM sDump AS String
  
  'Message.Info("Begin installation of user selected software")
  
    FOR EACH cb IN MdlPkgSel.Pkgs
      IF cb.value = TRUE THEN 
        INC iStepTotal
      END IF
    NEXT 
          
    FOR EACH cb IN MdlPkgSel.Pkgs
      IF cb.Value = TRUE THEN 
        ' we will only measure #/##
        sDump = ""
        SHELL "echo \"\" > /tmp/installdump" WAIT 
          'Message.Info(sBasePath &/ cb.tag)
          FrmInstallSys.tlCurrPkg.Text = ("Installing user-selected package") & Space(1) & File.Name(sBasePath &/ cb.Tag)
        hproc = SHELL "installpkg " & sBasePath &/ cb.tag & Space(1) & "-R" & Space(1) & ClsGlobal.sTargetMnt & Space(1) & "|| echo \'FAILED\' 2> /tmp/installdump" 'WAIT
          ' 
          WAIT 1
            IF hproc.State = Process.running THEN 
              REPEAT 
                WAIT 
              UNTIL hproc.State = Process.Stopped
            END IF
            sDump = File.Load("/tmp/installdump")
            ' update step progress
            INC i
              FrmInstallSys.pbInstallProg.Value = i / iStepTotal
            INC iPkgNum
              'MdlSetup.UPDATE_OVERALL_PROGRESS(iPkgCnt, iPkgNum)
              FrmInstallSys.pbInstallProg2.Value = MdlSetup.UPDATE_OVERALL_PROGRESS(iPkgCnt, iPkgNum)
                IF InStr(sDump, "FAILED") > 0 THEN 
                  Message.Error("Error installing user-selected package" & Space(1) & cb.Text)
                  RETURN 1
                ' ELSE 
                '   RETURN 0
                END IF
'        NEXT 
        'Message.Warning("Package " & File.Name(sBasePath &/ cb.tag) & " is installed")
      END IF
      
    NEXT 
    'Message.Info("End installation of user selected software")
END
' ' 
' ' 
' '             
' '   
' '   DIM i AS Integer
' '     DIM sFile AS String[]
' '     DIM sLine AS String
' '     DIM sRawFile AS String
' '     DIM sTlzPath AS String
' '     DIM sTlzName AS String
' '     DIM sTlzDesc AS String
' '     DIM iTlzSize AS Integer
' '     DIM sTlzBasePath AS String = ClsGlobal.sSourceMnt &/ "packages"
' '     DIM sTargetSize AS Variant
' '     DIM cb AS CheckBox
' '     DIM sName AS String
' '     
' '     sRawFile = DConv(File.Load(ClsGlobal.sSourceMnt &/ "packages" &/ "PACKAGES.TXT"))
' '     
' '       sFile = Split(sRawFile, "\n")
' '       
' '         FOR EACH cb IN MdlPkgSel.Pkgs
' '           sName = Trim(cb.text)
' '           
' '         
' '         FOR i = 0 TO sFile.count - 1
' '           sLine = Trim(sFile[i])
' '           IF InStr(sLine, sName) THEN 
' '             IF Left(sLine, Len("PACKAGE NAME")) = "PACKAGE NAME" THEN 
' '               sTlzName = Trim(Right(sLine, Len(sLine) - InStr(sLine, ":")))
' '               sTlzPath = Trim(Right(sFile[i + 1], Len(sFile[i + 1]) - InStr(sFile[i + 1], ":")))
' '               sTlzPath = Right(sTlzPath, Len(sTlzPath) - 2) ' remove the ./ from the location line
' '               iTlzSize = Trim(Right(sFile[i + 3], Len(sFile[i + 3]) - InStr(sFile[i + 3], ":")))
' '               'iTlzSize = Left(iTlzSize, Len(iTlzSize) - 1)
' '               'iTlzSize = Trim(iTlzSize)
' '               FrmInstallSys.tlCurrPkg.Text = "Installing " & sTlzName & " ..."
' '               FrmInstallSys.pbInstallProg.Value = 0.0
' '               
' '               'IF sTlzName = sName THEN 
' '               Message.Info(sTlzName)
' '               'RETURN 
' '               
' '               PRINT " Install " & sTlzBasePath &/ sTlzPath &/ sTlzName 
' '                   ' install each package
' '                SHELL "export gsize=$(df| grep " & ClsPartSel.sRoot & " ) && echo $gsize | cut -f3 -d \' \'" TO sTargetSize
' '                sTargetSize = Trim(CStr(sTargetSize))
' '               SHELL "echo \"\" > /tmp/installdump" WAIT 
' '               sDump = ""
' '               sErr = ""
' '               'hproc = SHELL "install-pkg " & sTlzBasePath &/ sTlzPath &/ sTlzName & Space(1) & ClsGlobal.sTargetMnt & " || echo \'FAILED\'" FOR READ
' '               hproc = SHELL "installpkg " & sTlzBasePath &/ sTlzPath &/ sTlzName & " -R " & ClsGlobal.sTargetMnt & " || echo \'FAILED\' 2> /tmp/installdump" WAIT 'FOR READ
' '                 WAIT 1
' '                   IF hproc.State = Process.Running THEN 
' '                     REPEAT 
' '                       WAIT 1
' '                       MdlInstallSys.UPDATE_STEP_PROGRESS(sTargetSize, iTlzSize)
' '                       
' '                           ' figure out the progress again
' ' 
' '                     UNTIL 
' '                       hproc.State = Process.Stopped
' '                         sDump = File.Load("/tmp/installdump")
' '                         
' '                           IF InStr(sDump, "FAILED") > 0 THEN 
' '                             ERROR 
' '                             RETURN 1
' '                           ELSE 
' '                             IF FrmInstallSys.pbInstallProg.Value <> 1 THEN 
' '                               FrmInstallSys.pbInstallProg.Value = 1
' '                             END IF
' '                           END IF
' '                   END IF
' '                   INC iPkgNum
' '                   FrmInstallSys.pbInstallProg2.Value = MdlSetup.UPDATE_OVERALL_PROGRESS(iPkgCnt, iPkgNum)
' '                 END IF
' '           END IF
' '       NEXT 
' '   NEXT 
' ' END
' ' 
' ' 
' ' 
' ' 
' ' ' ' ' PUBLIC FUNCTION INSTALL_USER_SELECTED_PACKAGES_OLD() AS Integer
' ' ' ' '   
' ' ' ' '   DIM i, iret AS Integer
' ' ' ' '   DIM sPkg AS String
' ' ' ' '   DIM cb AS CheckBox
' ' ' ' '   DIM sPkgPath AS String = ClsGlobal.sSourceMnt &/ "packages"
' ' ' ' '   DIM sPkgLoc AS String
' ' ' ' '   DIM sFile AS String[]
' ' ' ' '   DIM sLine AS String
' ' ' ' '   DIM sConfig AS String
' ' ' ' '   DIM ii AS Integer
' ' ' ' '        ' needs to read PACKAES.TXT to get package name and location
' ' ' ' '   
' ' ' ' '   'sFile = Split(File.Load(ClsGlobal.sSourceMnt &/ "packages" &/ "PACKAGES.TXT"), "\n")
' ' ' ' '   ii = 0
' ' ' ' '       sConfig = "WORKINGDIR=" & ClsGlobal.sTargetMnt &/ "home" &/ "ftp" &/ "pub" &/ "veclinux" & "\n" &
' ' ' ' '       "SOURCE=" & ClsGlobal.sSourceMnt &/ "packages"
' ' ' ' '       
' ' ' ' '       File.Save(Temp("sources"))
' ' ' ' '       IF Exist(ClsGlobal.sTargetMnt &/ "home/ftp/pub/veclinux") = FALSE THEN 
' ' ' ' '         MKDIR ClsGlobal.sTargetMnt &/ "home/ftp/pub/veclinux"
' ' ' ' '       END IF
' ' ' ' '           SHELL "slapt-get -u -c " & Temp("sources") WAIT 
' ' ' ' '       FOR EACH cb IN MdlPkgSel.Pkgs
' ' ' ' '         IF cb.value = TRUE THEN 
' ' ' ' '           'spkg = cb.Text
' ' ' ' '                 INC ii
' ' ' ' '         NEXT 
' ' ' ' '   
' ' ' ' '     ' now to install them
' ' ' ' '     
' ' ' ' '       FOR EACH cb IN MdlPkgSel.Pkgs
' ' ' ' '         IF cb.Value = TRUE THEN 
' ' ' ' '           sPkg = 
' ' ' ' '   
' ' ' ' '   
' ' ' ' '   FOR i = 0 TO ClsPkgSel.arrPkgs.count - 1
' ' ' ' '     sPkg = ClsPkgSel.arrPkgs[i]
' ' ' ' '     PRINT " + Install " & sPkgPath &/ sPkg
' ' ' ' '     iret = ME.INSTALL_THIS_PACKAGE(sPkgPath &/ sPkg)
' ' ' ' '     IF iret <> 0 THEN 
' ' ' ' '       RETURN iret
' ' ' ' '     END IF
' ' ' ' '     PRINT " ! " & sPkgPath &/ sPkg & " is installed"
' ' ' ' '   NEXT 
' ' ' ' ' END


PUBLIC FUNCTION INSTALL_USER_SELECTED_BULKS() AS Integer
  
  DIM SPkg AS String
  DIM sPkgPath AS String = ClsGlobal.sSourceMnt &/ "veclinux"
  DIM i, ii AS Integer
  DIM iRet AS Integer
  
  FOR i = 0 TO ClsPkgSel.arrBulks.Count - 1
    sPkg = ClsPkgSel.arrBulks[i]
    'install the packages now
    PRINT " + Install " & sPkgPath &/ sPkg
    'iRet = ME.INSTALL_THIS_PACKAGE(sPkgPath &/ sPkg)
        iret = ME.INSTALL_THIS_BULK(sPkgPath &/ sPkg)
    IF iRet <> 0 THEN 
      RETURN 1
    END IF
    PRINT " ! " & sPkgPath &/ sPkg & " is installed"
  NEXT 
END


PUBLIC SUB CALCULATE_TOTAL_PACKAGES()

  DIM i AS Integer
  DIM irs AS Integer
  DIM sOutput AS String
  DIM sOutArr AS String[]
  DIM cb AS CheckBox
    

  PRINT ("Calculating package count ... Please wait")
  SHELL "cat " & ClsGlobal.sSourceMnt &/ "veclinux" &/ "SETUP.CONF" & " | grep ^BULK | grep required" TO sOutput
  sOutput = Trim(sOutput)
  IF InStr(sOutput, "\n") > 0 THEN 
    sOutArr = Split(sOutput, "\n")
    i = i + sOutArr.Count
  ELSE 
    i = i + 1
  END IF
  'Message.Info(i & " from required bulks")
  'RETURN 
  'count required packages in            
  sOutArr.Clear
  sOutput = ""
  SHELL "ls -m " & ClsGlobal.sSourceMnt &/ "packages" &/ "required" &/ "*.t?z" TO sOutput
  sOutput = Trim(sOutput)
  sOutArr = Split(sOutput, ",")
  i = i + sOutArr.Count
  'Message(i & " from packages/required")
  'Count CONF packages in
  sOutArr.Clear
  sOutput = ""
  SHELL "cat " & ClsGlobal.sSourceMnt &/ "veclinux" &/ "SETUP.CONF" & " | grep ^CONF" TO sOutput
  sOutput = Trim(sOutput)
  IF InStr(sOutput, "\n") > 0 THEN 
    sOutArr = Split(sOutput, "\n")
    i = i + sOutArr.Count
  ELSE 
    i = i + 1
  END IF
  'Count user-selected stuff in
      'we will need to cycle through the arrays for th is for accuracy...
        irs = 0
        FOR EACH cb IN MdlPkgSel.Bulks
          IF cb.value = TRUE THEN INC irs
            
          
        NEXT 
        i = i + irs
      ' now do the optional packages
      irs = 0 ' reset the count
       
        REPEAT 
          IF FrmUsrPkgSel.GridView1[ii, 0].Picture = FrmUsrPkgSel.pYes THEN 
            INC irs
          END IF
          INC ii
          UNTIL ii = FrmUsrPkgSel.GridView1.Rows.Count
          
      
        ' ' ' ' ' ' ' FOR EACH cb IN MdlPkgSel.Pkgs
        ' ' ' ' ' ' '   IF cb.Value = TRUE THEN INC irs
        ' ' ' ' ' ' '     
        NEXT 
      i = i + irs ' the count to the total
  'i = i + ClsPkgSel.arrBulks.Count + ClsPkgSel.arrPkgs.Count
  iPkgCnt = i
  PRINT ("Total packages to be installed = ") & i
END


PUBLIC FUNCTION INSTALL_REQUIRED_BULKS() AS Integer
  
  DIM sOutput AS String
  DIM sList AS String[]
  DIM sLine AS String[]
  DIM i AS Integer
  DIM sBulk AS String
  DIM sTrimmed AS String
  DIM sBUlkDesc AS String
  DIM iRet AS Integer
  
  SHELL "cat " & ClsGlobal.sSourceMnt &/ "veclinux" &/ "SETUP.CONF" & " | grep ^BULK | grep required" TO sOutput
  sOutput = Trim(sOutput)
  IF InStr(sOutput, gb.NewLine) THEN 
    sList = Split(sOutput, gb.NewLine)
    'iPkgCnt = iPkgCnt + sList.Count ' add these to the overall package count.
    FOR i = 0 TO sList.count - 1
      sTrimmed = Right(sList[i], Len(sList[i]) - InStr(sList[i], "\'"))
      sTrimmed = Left(sTrimmed, RInStr(sTrimmed, "\'") - 1)
      'sTrimmed = Left(sTrimmed, Len(sTrimmed) - RInStr(sTrimmed, "\'"))
      sLine = Split(sTrimmed, ":")
      sBulk = sLine[0]
      sBUlkDesc = sLine[2]
      PRINT " + install " & ClsGlobal.sSourceMnt &/ "veclinux" &/ sBulk
      'iRet = ME.INSTALL_THIS_PACKAGE(ClsGlobal.sSourceMnt &/ "veclinux" &/ sBulk)
      iret = ME.INSTALL_THIS_BULK(ClsGlobal.sSourceMnt &/ "veclinux" &/ sBulk)
      IF iRet <> 0 THEN 
        ' error... stop
        PRINT ("Error while installing ") & sBulk & " -> " & sBUlkDesc
        RETURN 1
      END IF                  
      PRINT " ! " & ClsGlobal.sSourceMnt &/ "veclinux" &/ sBulk & " is installed"
    NEXT 
  ELSE ' found only one line
    iPkgCnt = iPkgCnt + 1 ' add only one to the overall package count
    sTrimmed = Right(sOutput, Len(sOutput) - InStr(sOutput, "\'"))
    sTrimmed = Left(sTrimmed, Len(sTrimmed) - RInStr(sTrimmed, "\'"))
    sLine = Split(sTrimmed, ":")
    sBulk = sLine[0]
    sBUlkDesc = sLine[2]
    iRet = ME.INSTALL_THIS_PACKAGE(ClsGlobal.sSourceMnt &/ "veclinux" &/ sBulk)
    IF iRet <> 0 THEN 
      ' error... stop
      PRINT ("Error while installing ") & sBulk & " -> " & sBUlkDesc
      RETURN 1
    END IF           
  END IF
END


PUBLIC FUNCTION INSTALL_THIS_BULK(sBulkPath AS String) AS Integer
  
  DIM vSize AS Integer
  DIM vTargetSize AS Integer
  
  DIM sDesc AS String
  
  SHELL "cat " & ClsGlobal.sSourceMnt &/ "veclinux" &/ "SETUP.CONF | grep " & File.Name(sBulkPath) & " | cut -f 2 -d :" TO vSize
  SHELL "cat " & ClsGlobal.sSourceMnt &/ "veclinux" &/ "SETUP.CONF | grep " & File.Name(sBulkPath) & " | cut -f 3 -d :" TO sDesc
    ' IF Right(sDesc) = "\'" THEN 
    '     sDesc = Left(sDesc, RInStr(sDesc, "\'") - 1)
    ' END IF
    sDesc = Replace(sDesc, "\'", "")
  vSize = Trim(CStr(vSize))
  sDump = ""
  SHELL "echo \"\" > /tmp/installdump" WAIT 
  sErr = ""
  IF vSize <> "" THEN 
    SHELL "gsize=$(df| grep " & ClsGlobal.sTargetMnt & " ) && echo $gsize | cut -f3 -d \' \'" TO vTargetSize
  END IF
  FrmInstallSys.pbInstallProg.Value = 0
  INC iPkgNum
  PRINT " Installing " & sBulkPath
        MdlSetup.SHOW_PROGRESS_CONTROLS()
  FrmInstallSys.tlCurrPkg.Text = "Installing " & File.Name(sBulkPath)
  hproc = SHELL "lzmadec <" & sBulkPath & " | tar -xp -C " & ClsGlobal.sTargetMnt & " || echo \'FAILED\' 2> /tmp/installdump" 'FOR READ  
  WAIT 1
  IF hproc.State = Process.Running THEN 
    WAIT 1
      'sDump = File.Load("/tmp/installdump")
    REPEAT 
      WAIT 1
      ' do the progress updating here
        FrmInstallSys.tlCurrPkg.Text = Trim(sDesc)
      IF vSize <> "" THEN 
        'MdlInstallSys.UPDATE_STEP_PROGRESS(CFloat(vTargetSize), CFloat(vSize))
        MdlInstallSys.UPDATE_STEP_PROGRESS(vTargetSize, vSize)
      END IF
    UNTIL 
      hproc.State = Process.Stopped
        sDump = File.Load("/tmp/installdump")
      IF InStr(sDump, "FAILED") > 0 THEN 
        RETURN 1
      ELSE
        FrmInstallSys.pbInstallProg2.Value = MdlSetup.UPDATE_OVERALL_PROGRESS(iPkgCnt, iPkgNum) 
      RETURN 0
    END IF
  END IF
END


PUBLIC FUNCTION INSTALL_THIS_PACKAGE(sPackagePath AS String) AS Integer
  DIM vSize AS Variant
  DIM vTargetSize AS Integer
  
  
  sDump = ""
  SHELL "echo \"\" > /tmp/installdump" WAIT 
  sErr = ""
      
  SHELL "cat " & ClsGlobal.sSourceMnt &/ "veclinux" &/ "SETUP.CONF | grep " & File.Name(sPackagePath) & " | cut -f 2 -d :" TO vSize
  IF vSize <> "" THEN 
    SHELL "gsize=$(df| grep " & ClsGlobal.sTargetMnt & " ) && echo $gsize | cut -f3 -d \' \'" TO vTargetSize
  END IF
  FrmInstallSys.pbInstallProg.Value = 0          
  INC iPkgNum
  PRINT "Package " & iPkgNum & " of " & iPkgCnt
  MdlSetup.SHOW_PROGRESS_CONTROLS()
  FrmInstallSys.tlCurrPkg.Text = "Processing " & File.Name(sPackagePath)
  'hproc = SHELL "install-pkg " & sPackagePath & Space(1) & ClsGlobal.sTargetMnt & " || echo \'FAILED\'" FOR READ
  IF Right(sPackagePath, 3) LIKE "t?z" THEN
    hproc = SHELL "installpkg " & sPackagePath & " -R " & ClsGlobal.sTargetMnt & " || echo \'FAILED\' 2> /tmp/installdump" 'FOR READ
  ENDIF 
  WAIT 1
  IF hproc.State = Process.Running THEN 
    REPEAT 
    WAIT 1
    ' do the progress bar updating here
    IF vSize <> "" THEN 
      'MdlInstallSys.UPDATE_STEP_PROGRESS(CFloat(vTargetSize), CFloat(vSize))
      MdlInstallSys.UPDATE_STEP_PROGRESS(vTargetSize, CInt(vSize))
      
    END IF
    UNTIL 
      hproc.state = Process.Stopped
      ' now do the error checking here and return a value
          sDump = File.Load("/tmp/installdump")
          
      IF InStr(sDump, "FAILED") > 0 THEN 
        'ERROR HAS OCCURRED
        RETURN 1
      ELSE
        FrmInstallSys.pbInstallProg.Value = 1
        WAIT  
        FrmInstallSys.pbInstallProg2.Value = MdlSetup.UPDATE_OVERALL_PROGRESS(iPkgCnt, iPkgNum)
        RETURN 0
      END IF
  END IF
END


' PUBLIC SUB Process_read()
'   
'   DIM sLine AS String
'   READ #LAST, sLine, -256
'   sDump = sDump & gb.NewLine & sLine
'   PRINT sLine
' END
' PUBLIC SUB Process_kill()
'   
'   DIM sDump AS String = File.Load("/tmp/installdump")
'     IF InStr(sDump, "FAILED") > 0 THEN 
'       Message.Error("The install process has returned an error.")
'   
' END

PUBLIC SUB process_error(msg AS String)

  sErr = sErr & gb.NewLine & sErr
  PRINT MSG
END 

