' Gambas class file
'    This file is part of vinstall-ng

'    vinstall-ng is free software: you can redistribute it and/or modify
'    it under the terms of the GNU General Public License as published by
'    the Free Software Foundation, either version 2 of the License, or
'    (at your option) any later version.

'    vinstall-ng  is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'    GNU General Public License for more details.

'    You should have received a copy of the GNU General Public License
'    along with vinstall-ng.  If not, see <http://www.gnu.org/licenses/>.



PRIVATE sLast AS String
PUBLIC sNextKey AS String
PUBLIC FrmCurr AS Form ' assigned when a form is opened
PUBLIC frmLast AS Form ' assigned when a form is hidden
PUBLIC frmNext AS Form ' assined next form for the "next" button in fmain"

PUBLIC SUB _new()

END

PUBLIC SUB Form_Open()
DIM iImg AS Image
'ME.Maximized = TRUE

MdlCore.LOCK_GUI
'MdlCore.LOCK_GUI()
ClsGlobal.sBackNav = NEW Object[]
ClsGlobal.sSourceMnt = "/mnt" &/ "cdrom" 'FOR TESTING ONLY
'/ THE FOLLOWING LINES HAVE BEEN COMMENTED FOR TESTING ONLY

FrmSelISO.Reparent(ME.pnlWinHost)
FrmSelISO.Width = pnlWinHost.Width
FrmSelISO.Height = pnlWinHost.Height

iImg = Image.Load("images/installer.png").Stretch(400, 50)
'iImg.Resize(600, 80)
PictureBox1.Resize(iImg.Width, iImg.Height)
PictureBox1.Picture = iImg.Picture
PictureBox1.Background = Color.SelectedBackground
PictureBox1.Stretch = TRUE
MdlCore.PREPARE_INSTALL_LAYOUT

'FrmSelISO.Show
'FrmSelISO.Hide


'STOP EVENT 
ME.Width = 800
ME.Height = 600



WITH ME
  .btback.Enabled = FALSE
  .btback.ForeColor = Color.Gray
  .Frame1.BackColor = Color.Transparent
  .tvPlan.BackColor = Color.transparent
  .btQuit.Text = "Exit Installation"
  .tvPlan["Prep0"].Selected = TRUE
  .tvPlan["Prep0"].Picture = MdlCore.sNowPic
  .tlBanner.Height = .PictureBox1.Height
  
END WITH 
'ME.TreeView1.BackColor = Color.Transparent
ME.AUTOSIZE_LEFT_PANE
' ' ' / THE FOLLOWING LINES HAVE BEEN IMPLEMENTED FOR TESTING PURPOSES
' ' ' WITH FrmLilo
' ' ' .Reparent(Fmain.pnlWinHost)
' ' ' .Width = Fmain.pnlWinHost.Width
' ' ' .Height = Fmain.pnlWinHost.Height
' ' ' .Show
' ' ' END WITH 

END

PUBLIC SUB AUTOSIZE_LEFT_PANE()
  
  DIM iWidth AS Integer
  ' this will find widest child in treeview
    ME.tvPlan.MoveFirst()
      REPEAT 
        IF MdlObjSizer.get_object_width(tvPlan.Item.Text) > iWidth THEN 
          iWidth = MdlObjSizer.get_object_width(tvPlan.item.Text) + 24
        END IF
      UNTIL ME.tvPlan.MoveBelow()
  
    ME.tvPlan.Width = iWidth + (iWidth / 20)
    ME.Frame1.Width = iWidth + (iWidth / 10)
END


PUBLIC SUB ComboBox1_Click()

  

END


PUBLIC SUB Form_Resize()



DIM iMid AS Integer
  
  WITH ME
    .btQuit.Width = MdlObjSizer.get_object_width(.btQuit.Text) + 36
  END WITH 
  'ME.AUTOSIZE_LEFT_PANE
'ME.pnlWinHost.Resize(ME.ClientWidth - ME.Frame1.Width - (ME.Frame1.left * 8), ME.ClientH - ME.tlBanner.Height - (ME.btback.Height * 8))
  WITH ME
    .tlBanner.width = ME.width
    .Frame1.Move(4, .PictureBox1.Top + .PictureBox1.Height + 4, MdlCore.iLeftWidth * 1.5, .ClientHeight - .PictureBox1.Height * 1.5)
    '.Frame1.Move(4, .PictureBox1.top + .PictureBox1.Height + 4, MdlCore.iLeftWidth * 1.60, .ClientHeight - tlBanner.Height - (.btback.Height * 2))
    '.Frame1.Resize(MdlCore.iLeftWidth * 1.60, .ClientHeight - tlBanner.Height - (.btback.Height * 1.5))
    .tvPlan.Move(4, 24, .Frame1.Width - 8, .Frame1.Height - 28) ' THIS WILL LEAVE 16PIX ON TOP AND BOTTOM AND 2 ON LEFT AND RIGHT
    '.tvPlan.Move(4, 24, .Frame1.Width - 8, Frame1.Height - (.Frame1.Height / 20))
    
    '.pnlWinHost.Move(.Frame1.left + .Frame1.Width + 4, .Frame1.top + (.tlBanner.Height / 2), .tlBanner.Width - (.Frame1.Width + 8), .ClientHeight - (.tlbanner.height + (.btback.height * 3.5)))
    .pnlWinHost.Move(.Frame1.left + .Frame1.Width + 4, .Frame1.Top, .tlBanner.Width - (.Frame1.Width + 8), .ClientHeight - (.tlBanner.Height + (.btback.Height * 3)))
    .btback.Move(.pnlWinHost.Left, .Frame1.top + .Frame1.Height - .btback.Height, MdlObjSizer.get_object_width(.btback.text) + 36)
    .btnext.Move(.pnlWinHost.Left + .pnlWinHost.Width - (.btnext.Width + 8), .btback.Top, MdlObjSizer.get_object_width(.btnext.text) + 36)
    ' for the quit button, it'll get a little tricky
      ' we want that one right in the middle
    .btQuit.Move(.pnlWinHost.Left + (.pnlWinHost.Width / 2) - (.btQuit.Width / 2), .btback.top)
    '.PictureBox1.Move(Desktop.Width / 2 - (.PictureBox1.Width / 2), 4)
    .PictureBox1.Move(.ClientWidth / 2 - (.PictureBox1.Width / 2), 4)
    .tlBanner.Height = .PictureBox1.Height
    .tlBanner.top = .PictureBox1.Top
  END WITH 

END



PUBLIC SUB tvPlan_MouseUp()

  IF tvPlan.Current.Picture <> MdlCore.sCatPic THEN 
  sLast = tvPlan.Current.Key
  END IF

END

PUBLIC SUB btQuit_Click()

  FMain.Close

END



PUBLIC SUB btnext_Click()
  DIM sISONAME AS String
  DIM sDev AS String
  
  SELECT CASE FrmCurr.Name ' very nice navigation algoritm
    CASE "FrmSelISO"
        sDev = Right(FrmSelISO.lstInstallableImg.Text, Len(FrmSelISO.lstInstallableImg.Text) - InStr(FrmSelISO.lstInstallableImg.text, "/") + 1)
        IF InStr(FrmSelISO.lstInstallableImg.text, ".iso") OR InStr(FrmSelISO.lstInstallableImg.text, ".ISO") THEN 
           sISONAME = Left(FrmSelISO.lstInstallableImg.text, InStr(FrmSelISO.lstInstallableImg.text, " ") - 1)
           MdlSetup.GO_WITH_SELECTED(sDev, sISONAME)
        ELSE 
          MdlSetup.GO_WITH_SELECTED(sDev, "")
        END IF
      frmNext = FrmPartScheme
      
      
    CASE "FrmPartScheme"
        ' The next form is defined from the radio buttons in Frm PartScheme. But let's see if we can display some status text
        
        'FMain.MovieBox1.Refresh
        WITH FrmPartScheme
          IF .rbEditPartitions.Value = TRUE THEN 
            .tlChoiceExp.text = .tlChoiceExp.text & gb.NewLine & gb.NewLine & "<h3><br><br>Please wait while setup attampts to run the partitioning utility</h3>"
          ELSE IF .rbUseExisting.Value = TRUE THEN 
            .tlChoiceExp.Text = .tlChoiceExp.Text & gb.NewLine & gb.NewLine & "<h3><br><br><hr>Please wait while setup analyses your current partition setup. <br>This may take a while ...</h3>"
            
          END IF
       
          
          
        END WITH 
        'FMain.MovieBox1.Playing = TRUE
        WAIT 
               
              
              
    CASE "FrmPartSel"
        IF NOT ClsPartSel.sRoot OR ClsPartSel.sRoot = "" THEN 
        Message.Error("You must select a \"/\" partition. This is the target where the system will install to")
          STOP EVENT 
        ELSE 
            ' set the partition types
            MdlPartSel.SET_LINUX_PARTITION_TYPES()
          IF ClsPartSel.bDoWin = TRUE THEN 
            frmNext = FrmWinDrives
          ELSE 
            ' move to package selection
            frmNext = FrmPkgSel
          END IF
          
        END IF
    CASE "FrmPkgSel"
        'here we check what kind of install it is, simple  or custom
            'IF FrmPkgSel.rbCustom.Value = TRUE THEN 
            
          IF ClsPkgSel.bCustom = TRUE THEN 
              'get the list of selected bulks only
              
              MdlPkgSel.GET_USER_BULK_SELECTION()
              frmNext = FrmPkgsel2
            ELSE 
              ' Going for simple install. Now we are ready to summarize
              MdlSummarize.SUMMARIZE_INSTALL
              frmNext = FrmSummary
            END IF
    CASE "FrmPkgsel2"
      ' summarize the build
        MdlSummarize.SUMMARIZE_INSTALL
        frmNext = FrmSummary
        'frmNext = install
    CASE "FrmWinDrives"
      'Move on to selecting packages
        frmNext = FrmPkgSel
    CASE "FrmSummary"
      '      frmNext = FrmHostPrep ' prepare host
      frmNext = FrmInstallSys
    
    'POST INSTALL CONFIGURATION
    CASE "FrmInstallSys"

      frmNext = FrmLilo
      
    CASE "FrmLilo"
        ' Now that lilo has been setup, write it to the config
        MdlConfLilo.GENERATE_LILO_DOT_CONF
        MdlConfLilo.GATHER_OTHER_LINUX_KERNELS_AND_INITRDS()
        MdlConfLilo.WRITE_LILO_DOT_CONF()
        MdlConfLilo.EXECUTE_LILO()
        
    
      'frmNext = FrmLiloOsList
      
        
  END SELECT 
                       
            
            
  
  frmNext.Reparent(ME.pnlWinHost)
  FrmCurr.Hide
  frmLast = FrmCurr
    'IF ClsGlobal.sBackNav.Find(FrmCurr) = -1 THEN 
     ' ClsGlobal.sBackNav.Add(FrmCurr)
    'END IF
      IF FrmCurr.Name <> "FrmDiskPart" THEN 
    IF ClsGlobal.sBackNav.Find(frmNext) = -1 THEN 
    ClsGlobal.sBackNav.Add(frmNext)
    END IF
    END IF
  frmNext.Show
  

END

PUBLIC SUB btback_Click()

  DIM iKey AS Integer
  DIM frm AS Form
    iKey = ClsGlobal.sBackNav.Find(FrmCurr)
      IF iKey <> -1 THEN 
        frm = ClsGlobal.sBackNav[iKey - 1]
      FrmCurr.Hide
      frm.Show
      END IF
        

END
