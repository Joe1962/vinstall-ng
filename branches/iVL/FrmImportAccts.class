' Gambas class file

'    This file is part of vinstall-ng

'    vinstall-ng is free software: you can redistribute it and/or modify
'    it under the terms of the GNU General Public License as published by
'    the Free Software Foundation, either version 2 of the License, or
'    (at your option) any later version.

'    vinstall-ng  is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'    GNU General Public License for more details.

'    You should have received a copy of the GNU General Public License
'    along with vinstall-ng.  If not, see <http://www.gnu.org/licenses/>.

PUBLIC sSettingsList AS String

PUBLIC SUB Form_Open()

  WITH ME
    .tlBanner.Text = "<b>" & .tlBanner.Text & "</b>"
  END WITH 
  MdlImportAccts.LIST_EXISTING_ACCOUNTS()
  MdlUsrAdd.DISPLAY_USER_GROUP_OPTIONS(ME.frmUsrGrps)
END

PUBLIC SUB btBrowsePic_Click()

  
    IF ME.pbLogin THEN ME.pbLogin.Delete
    dialog.Title = ("Select picture for user Login")
    Dialog.path = ClsGlobal.sTargetMnt &/ "usr" &/ "share" &/ "apps" &/ "kdm" &/ "pics" &/ "users"
    Dialog.Filter = ["*.png", "Picture Files", "*.jpg", "JPEG Graphics"]
    IF Dialog.OpenFile() THEN RETURN 
    tbPicPath.text = Replace(Dialog.path, ClsGlobal.sSourceMnt, "")
    ME.pbLogin = NEW PictureBox(ME)
    ME.pbLogin.Move(ME.tbPass2.left + ME.tbPass2.Width + 4, ME.tlPasswd2.top, 64, 64)
    ME.pbLogin.Picture = Picture[dialog.path]
    ME.pbLogin.Stretch = TRUE
    
  

END



PUBLIC SUB btResetSettings_Click()


  FrmResetSettings.Title = ("Reset settings for") & Space(1) & Trim(ME.cbAccntList.Text)
  FrmResetSettings.ShowDialog()

END

PUBLIC SUB btcancel_Click()

  FrmUserAdd.Reparent(FMain.pnlwinhost)
  FrmUserAdd.Show()
  ME.Hide()
  'ME.Close()

END

PUBLIC SUB btImportAccnt_Click()

DIM SaCC AS String = Trim(ME.cbAccntList.Text)
IF Len(Trim(ME.cbAccntList.Text)) = 0 THEN 
  Message(("Please select an account name from the dropdown list."))
  RETURN 
END IF

  IF ME.tbPass1.Text = "" OR ME.tbPass2.Text = "" THEN 
    Message.Error(("Password fields cannot be blank. Please enter a password for") & Space(1) & ME.cbAccntList.Text)
    RETURN 
  END IF
  IF ME.tbPass1.Text <> ME.tbPass2.Text THEN 
    Message.Error(("Selected passwords dont match. Please enter the same password twice"))
    RETURN 
  ELSE 
    'IF ME.pbLogin THEN ME.pbLogin.Delete
      'pbLogin = NEW PictureBox(ME)
      'me.pbLogin.Move(
      
      ME.cbAccntList.Sorted = TRUE
      'RETURN 
      IF ME.CREATE_IMPORTED_ACCOUNT(SaCC) > 0 THEN 
        Message.Error(("User Unable to restore user account."))
        RETURN 
      ELSE 
      MdlUsrAdd.DISPLAY_USER_GROUP_OPTIONS(ME.frmUsrGrps)
      MdlUsrAdd.LIST_NEW_USER_ACCOUNT()
      Message.Info(("User account for") & Space(1) & Trim(ME.cbAccntList.Text) & Space(1) & ("successfully imported"))
    END IF
    
    'ME.Close
    'ME.pbLogin.Picture.Image.Clear
END IF


END

PUBLIC FUNCTION CREATE_IMPORTED_ACCOUNT(sname AS String) AS Integer
  DIM sGroups AS String
  DIM cb AS CheckBox
  DIM sSettings AS String[]
  DIM i AS Integer
  DIM sPicdir AS String = ClsGlobal.sTargetMnt &/ "usr/share/apps/kdm/pics/users/"
  DIM tl AS TextLabel
  DIM iTlY AS Integer
  DIM hproc AS Process
  
  Message(sname)

  ' Prepare group list
  FOR EACH cb IN MdlUsrAdd.objGrps
    IF cb.Value = TRUE THEN 
      sGroups = sGroups & cb.Text & ","
    END IF
  NEXT 
  sGroups = Trim(sGroups)
  sGroups = Left(sGroups, Len(sGroups) - 1)
  
  'Message(sGroups)
  'RETURN 
  ' Prepare home dir making the requested changes
    IF Len(sSettingsList) > 0 THEN 
      sSettings = Split(sSettingsList, ",")
        FOR i = 0 TO sSettings.Count - 1
          hproc = EXEC ["rm", "-rf", ClsGlobal.sTargetMnt &/ "home" &/ sname &/ Trim(sSettings[i])] WAIT 
          hproc = EXEC ["cp", "-r", ClsGlobal.sTargetMnt &/ "etc" &/ "skel" &/ Trim(sSettings[i]), ClsGlobal.sTargetMnt &/ "home" &/ sname &/ Trim(sSettings[i])] WAIT 
          hproc = EXEC ["chown", Trim(ME.cbAccntList.Text) & ":users", ClsGlobal.sTargetMnt &/ "home" &/ sname &/ Trim(sSettings[i])] WAIT 
          IF ERROR THEN Message(Error.Where & gb.NewLine & Error.Text)
        NEXT 
      
    
    END IF
  
  hproc = SHELL "chroot /mnt/target  /usr/sbin/groupdel " & sname WAIT
      IF hproc.Value > 0 THEN RETURN hproc.Value
  hproc = SHELL "chroot /mnt/target /usr/sbin/groupadd " & "-g" & Space(1) & FrmUserAdd.iUID & Space(1) &/ sname WAIT 
    IF hproc.Value > 0 THEN RETURN hproc.Value
  hproc = SHELL "chroot /mnt/target /usr/sbin/useradd  -g " & sname & " -p " & ME.tbPass1.Text & " -u " & FrmUserAdd.iUID & " -G " & "\'users," & sGroups & "\' -s /bin/bash " & sname & " -d /home/" & sname WAIT 
    IF hproc.Value > 0 THEN RETURN hproc.Value
  hproc = SHELL "chroot /mnt/target /sbin/passwdx " & sname & Space(1) & ME.tbPass1.Text WAIT 
    IF hproc.Value > 0 THEN RETURN hproc.Value
  IF ERROR THEN Message.Error(Error.Where & gb.NewLine & Error.Text)
  ' Add the face icon
  IF Len(ME.tbPicPath.Text) > 0 THEN 
          IF Exist(clsglobal.sTargetMnt &/ "home" &/ sname &/ ".face.icon") THEN KILL clsglobal.sTargetMnt &/ "home" &/ sname &/ ".face.icon"
          SHELL "cd " & sPicdir & " && ln -s " & Replace(ME.tbPicPath.Text, ClsGlobal.sTargetMnt, "") & Space(1) & sname & ".face.icon" WAIT  'link for KDM
              ' Tweak for the GDM face icon to work
          TRY COPY Trim(tbPicPath.Text) TO clsglobal.sTargetMnt &/ "home" &/ sname &/ ".face"
          SHELL "chmod 644 " & ClsGlobal.sTargetMnt &/ "home/" & sname &/ ".face" WAIT 
          SHELL "chroot " & ClsGlobal.sTargetMnt & " chown " & sname & Space(1) &/ "home" &/ sname &/ ".face" WAIT
          SHELL "chroot " & ClsGlobal.sTargetMnt & " chgrp " & sname & Space(1) &/ "home/" & sname &/ ".face" WAIT
          IF ERROR THEN Message.Error(Error.Where & gb.NewLine & Error.Text)
  END IF
    
    ' Increase the value of the iUID
    INC FrmUserAdd.iUID
    ME.LIST_IMPORTED_USER_ACCOUNT()
  ME.cbAccntList.Remove(ME.cbAccntList.Find(sname))
        
END

 PUBLIC SUB LIST_IMPORTED_USER_ACCOUNT()
  'needs to verify with /etc/passwd to check for user account
  DIM sFile AS String[] = Split(DConv(File.Load(clsglobal.sTargetMnt &/ "etc" &/ "passwd")))
  DIM arrline AS String[]
  DIM i, ii, iUID AS Integer
  DIM sLine, sSec, sUsrLogin, sUsrRlName, sUsrHome AS String
  DIM vuid AS Variant
  DIM tl AS TextLabel
  DIM tly AS Integer
  
  tly = 4
  FOR i = 0 TO sFile.count - 1
    sLine = sFile[i]
      ' now split each line
        arrline = Split(sLine, ":")
          FOR ii = 0 TO arrline.count - 1
            sSec = Trim(arrline[ii])
              vuid = arrline[2]
              iUID = CInt(vuid)
              sUsrLogin = arrline[0]
              sUsrRlName = arrline[4]
              sUsrHome = arrline[5]
          NEXT 
        IF iUID >= 500 THEN 
          tl = NEW TextLabel(FrmUserAdd.LstUsers) AS "UserList"
              WITH tl
                  .Height = 21
                  .Text = sUsrLogin
                  .Width = MdlObjSizer.get_object_width(.Text)
                  .ToolTip = sUsrRlName & "\n" & "<b>" & "USER ID: " & "</b > " & iUid & 
                          "<b>" & "HOME DIRECTORY: " & "</b>" & sUsrHome
                  .Move(0, tly)
              END WITH 
              tly = tly + tl.Height + 2
          END IF
  NEXT 
                  
          
  
  
END



PUBLIC SUB Form_Resize()

  WITH ME
  .tlBanner.Move(4, 4)
  .hrsep.Move(4, .tlBanner.top + .tlBanner.Height + 1, .ClientWidth - (.hrsep.Left * 2))
  .tlLogin.Move(4, .hrsep.top + 8, MdlObjSizer.get_object_width(.tlLogin.Text))
  .cbAccntList.Move(.tlLogin.Left + .tlLogin.Width + 8, .tlLogin.Top, .tlLogin.Width * 2.5)
  .tlPasswd.Move(4, .tlLogin.top + .tlLogin.Height + 8, MdlObjSizer.get_object_width(.tlPasswd.Text))
  .tbPass1.Move(4, .tlPasswd.top + .tlPasswd.Height + 4, 175)
  .tlPasswd2.Move(.tbPass1.Left + .tbPass1.Width + 8, .tlPasswd.Top, MdlObjSizer.get_object_width(.tlPasswd2.Text))
  .tbPass2.Move(.tlPasswd2.Left, .tbPass1.top, 175)
  .tlPicPath.Move(4, .tbPass1.top + .tbPass1.Height + 8, MdlObjSizer.get_object_width(.tlPicPath.Text))
  .btBrowsePic.Move(.ClientWidth - .btBrowsePic.Width - 8, .tlPicPath.top + .tlPicPath.Height + 8, MdlObjSizer.get_object_width(.btBrowsePic.Text) + 36)
  .tbPicPath.Move(4, .btBrowsePic.top, (.ClientWidth - .btBrowsePic.Width) - (.tbPicPath.Left * 2) - 24)
  .pbLogin.Move(.tbPass2.Left + .tbPass2.Width + 8, .tlPasswd2.top + 4, 48, 48)
  .scrGrpHost.Move(4, .tbPicPath.top + .tbPicPath.Height + 4, .ClientWidth - (.scrGrpHost.Left * 2), .ClientHeight - (.scrGrpHost.Top + (.btBrowsePic.Height * 4)))
  .btResetSettings.Move(4, .scrGrpHost.top + .scrGrpHost.Height + 8, MdlObjSizer.get_object_width(.btResetSettings.Text) + 36)
  .btImportAccnt.Move(4, .btResetSettings.top + .btResetSettings.Height + 4, MdlObjSizer.get_object_width(.btImportAccnt.Text) + 36)
  .btcancel.Move(.btImportAccnt.Left + .btImportAccnt.Width + 4, .btImportAccnt.Top, MdlObjSizer.get_object_width(.btcancel.Text) + 36)
  
  '.btResetSettings.Move(4,.scrGrpHost.top + .scrGrpHost.Height
  '.frmUsrGrps.Move(4, .tbPicPath.top + .tbPicPath.Height + 4, .ClientWidth - (.frmUsrGrps.Left * 2))
  '.btBrowsePic.Move(.ClientWidth - .btBrowsePic.Width - 8,.tbPass2.top + .tbPass1
  END WITH 

END

PUBLIC SUB cbAccntList_Click()

'  ME.pbLogin.Picture.Clear

END
