' Gambas module file

'    This file is part of vinstall-ng

'    vinstall-ng is free software: you can redistribute it and/or modify
'    it under the terms of the GNU General Public License as published by
'    the Free Software Foundation, either version 2 of the License, or
'    (at your option) any later version.

'    vinstall-ng  is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'    GNU General Public License for more details.

'    You should have received a copy of the GNU General Public License
'    along with vinstall-ng.  If not, see <http://www.gnu.org/licenses/>.

PUBLIC arrLinuxIncCheckboxes AS Object[]
PUBLIC arrLinuxInitrdBoxes AS Object[]
PUBLIC arrLinuxNametxtboxes AS Object[]
PUBLIC arrLinuxAppendtxtBoxes AS Object[]
PUBLIC arrLinuxTextBoots AS Object[]
PUBLIC arrWinBootChecks AS Object[]
PUBLIC arrWinNameTxtBoxes AS Object[]
PUBLIC arrCbInitrds AS Object[]
PUBLIC arriDLabels AS Object[]
PRIVATE i AS Integer ' used for object key



PUBLIC FUNCTION generate_lilo_dot_conf_header() AS String
    DIM sHeader AS String
    DIM sTarget, sVidMode, sDefOS AS String
    DIM iTimeOut AS Integer
    
    sTarget = Trim(FrmLiloSetup.cbLIloTarget.Text)
        IF InStr(sTarget, "MBR of") THEN 
          sTarget = Right(sTarget, Len(sTarget) - InStr(sTarget, "/") + 1)
        ELSE IF sTarget = "Sector" THEN 
          sTarget = ClsPartSel.sRoot
        ELSE IF sTarget = "Floppy" THEN 
          sTarget = "/dev/df0"
        END IF
        
   'iTimeOut = FrmLiloSetup.cbTimeOutSec.value * 10
   iTimeOut = FrmLiloSetup.SpinBox1.Value * 10
   
   
    sHeader = "# LILO Configuration file \n" &
  "# Generated by the VectorLinux installer \n" &
  "# \n" &
  "# Begin lilo global configuration \n" &
  "# \n" &
  "boot = " & sTarget & "\n" &
  "default = " & Trim(FrmLiloSetup.cbBootDefault.Text) & "\n" &
  "prompt \n" &
  "compact \n" &
  "timeout = " & iTimeOut & "\n" &
  "# \n" &
  "# \n" &
  "# Override dangerous defaults that require the partition table: \n" &
  "change-rules \n" &
  "reset \n" 
  IF Exist(ClsGlobal.sTargetMnt &/ "boot" &/ "bitmap" &/ "boot.bmp") THEN 
    sHeader = sHeader & "\n" &
    "bitmap = /boot/bitmap/boot.bmp \n" 
  END IF
  sHeader = sHeader & "\n" &
  "vga = 791 \n" &
  "# Begin listing OS Choices \n"

    
  RETURN sHeader
  
END




PUBLIC SUB GENERATE_LILO_DOT_CONF()
  
  DIM tb AS TextBox
  DIM cb, chbox AS CheckBox
DIM sOsEntries AS String  
  DIM sSection, sClisection, sWinSection AS String
  DIM cbox AS ComboBox
  DIM sLabel, sKernel, sInitrd, sAppend, sTag AS String
  DIM sBootPath, sHeader, sFile AS String
  
  
  
  
      FOR EACH cb IN arrLinuxIncCheckboxes
          IF Right(cb.Tag, Len(cb.Tag) - InStr(cb.Tag, "/") + 1) = ClsPartSel.sRoot THEN 
            sBootPath = "/boot"
          ELSE 
            sBootPath = "/boot/tamu"
          END IF
        IF cb.Value = TRUE THEN 
          FOR EACH tb IN arrLinuxNametxtboxes
                IF tb.Tag = cb.Tag THEN 
                  sLabel = tb.Text
                  sKernel = "vmlinuz-" & Right(tb.Tag, Len(tb.Tag) - RInStr(tb.Tag, "/"))
                END IF
          NEXT 
          FOR EACH cbox IN arrCbInitrds
              IF cb.Tag = cbox.Tag THEN sInitrd = Trim(cbox.Text) & "-" & sLabel
          NEXT 
          FOR EACH tb IN arrLinuxAppendtxtBoxes
            IF cb.Tag = tb.Tag THEN sAppend = Trim(tb.Text)
            
          NEXT 
          
          sSection = "image = " & sBootPath &/ sKernel & "<br>" &
          "root = " & Right(cb.Tag, Len(cb.Tag) - InStr(cb.Tag, "/") + 1) & "<br>" &
          "label = " & sLabel & "<br>" &
          "append = " & sAppend & "<br>" &
          "initrd = " & sBootPath &/ sInitrd & "<br>" &
          "read only" & "<br>"
              FOR EACH chbox IN ME.arrLinuxTextBoots
                IF chbox.Value = TRUE THEN 
                    IF chbox.tag = cb.Tag THEN 
                      sClisection = sSection
                      sClisection = Replace(sClisection, "append = " & sAppend, "append = 2 splash=verbose vga=791")
                      sClisection = Replace(sClisection, "label = " & sLabel, "label = " & sLabel & "-cli") & "<br>"
                    ELSE 
                      sClisection = ""
                    END IF
                
                END IF
              NEXT 
                  
                  FOR EACH chbox IN ME.arrWinBootChecks
                      IF chbox.Value = TRUE THEN 
                        FOR EACH tb IN ME.arrWinNameTxtBoxes
                          IF tb.Tag = chbox.tag THEN 
                              sTag = Right(tb.Tag, Len(tb.Tag) - InStr(tb.Tag, "/") + 1)
                              
                            sWinSection = "other = " & sTag & "<br>" & 'Right(tb.tag, Len(tb.Tag) - InStr(tb.Tag, "/")) & "<br>" &
                            "label = " & tb.Text & "<br>" &
                            "table = " & Left(sTag, 8) & "<br>"
                          ELSE 
                            sWinSection = ""
                          END IF
                      NEXT 
                  END IF
              NEXT 
                            
                            
                  
          
          'Message(sSection)
          sOsEntries = sOsEntries & "<br>" & sSection & "<br>" & sClisection & "<br>" & sWinSection
          
          '  IF sClisection THEN Message(sClisection)
                'sSection = "image=" & "boot" &/ tb.Text
                'Message(sSection)
            END IF
          NEXT 
        'END IF
      'NEXT   
      sHeader = ME.generate_lilo_dot_conf_header()
      sFile = sHeader & "<br>" & sOsEntries
      
      ' write the file to the target
      
  
END







PUBLIC SUB LIST_LINUX_OS()
  
  DIM sDump, sLinuxPart, sPart, vmlinuz, kernel AS String
  DIM sOsDesc, sInitrd, sKernelLoc AS String
  DIM x, y, i, ii AS Integer
  DIM sPartitions, sOs AS String[]
  
  arrLinuxIncCheckboxes = NEW Object[]
  arrLinuxInitrdBoxes = NEW Object[]
  arrLinuxNametxtboxes = NEW Object[]
  arrLinuxAppendtxtBoxes = NEW Object[]
  arrLinuxTextBoots = NEW Object[]
  arrCbInitrds = NEW Object[]
  arriDLabels = NEW Object[]
  
  
  
  SHELL "fdisk -l |grep -E \'83 *Linux\' | cut -f 1 -d \' \'" TO sDump
  sDump = Trim(sDump)
  sPartitions = Split(sDump, gb.NewLine)
      TRY MKDIR "/tmp/lilo_tmp"
          FOR i = 0 TO sPartitions.Count - 1
            sLinuxPart = Trim(sPartitions[i])
            sPart = Right(sLinuxpart, Len(sLinuxPart) - RInStr(sLinuxPart, "/"))
              EXEC ["mount", "/dev/" & sPart, "/tmp/lilo_tmp"] WAIT 
                      
                               IF IsDir("/tmp/lilo_tmp/boot") THEN                                   
                                  'FOR EACH vmlinuz IN Dir("/tmp/lilo_tmp/boot", "vmlinuz*", gb.File)
                                  sOsDesc = MdlLiloOsList.ID_DISTRO("/tmp/lilo_tmp")
                                  'Message(sOsDesc)
                                      IF sOsDesc LIKE "vector" THEN 
                                        sKernelLoc = "/tmp/lilo_tmp/boot"
                                      ELSE 
                                        sKernelLoc = "/tmp/lilo_tmp"
                                      END IF
                                  FOR EACH vmlinuz IN Dir(sKernelLoc, "vmlinuz")
                                      'IF Stat("/tmp/lilo_tmp/boot" &/ vmlinuz).Type <> 6
                                        'sOsDesc = MdlLiloOsList.ID_DISTRO("/tmp/lilo_tmp")
                                        'sOsDesc = Replace(vmlinuz, "vmlinuz", sOsDesc)
                                        
                                      'Message(Stat("/tmp/lilo_tmp" &/ vmlinuz).Type)
                                       WITH FrmLiloSetup
                                        .tsLIloTabs.Index = .tsLIloTabs.Count - 1
                                        .tsLIloTabs.Text = sOsDesc & "-" & sPart 
                                        .tsLIloTabs.Count = .tsLIloTabs.Count + 1
                                              ' populate the tabstrip here
                                              ME.FILL_IN_LINUX_TAB(sOsDesc, "/dev" &/ sPart)
                                              
                                       END WITH 
                                       'END IF
                                  NEXT 
                          END IF
              
              EXEC ["umount", "/tmp/lilo_tmp"] WAIT 
        NEXT        
  
END

PUBLIC SUB LIST_WIN_INSTALLS()
  
  DIM sWinPartlist, sPartition AS String
  DIM sWinDrives AS String[]
  DIM i, ii AS Integer
  DIM sTmpMountPoint AS String = "/tmp/lilo_tmp"
  DIM hproc AS Process
  ME.arrWinBootChecks = NEW Object[]
  ME.arrWinNameTxtBoxes = NEW Object[]
  
  SHELL "fdisk -l| grep -E \'^/dev/.* * .*(FAT16|FAT32|HPFS|NTFS|Win)\' | cut -f 1 -d \' \'" TO sWinPartlist
      sWinPartlist = Trim(sWinPartlist)
      sWinDrives = Split(sWinPartlist, gb.NewLine)
          FOR i = 0 TO sWinDrives.Count - 1
              sPartition = sWinDrives[i]
                    hproc = EXEC ["mount", sPartition, sTmpMountPoint] WAIT 
                          IF hproc.Value > 0 THEN 
                            EXEC ["sync"] WAIT 
                            EXEC ["umount", sPartition] WAIT 
                            EXEC ["mount", sPartition, sTmpMountPoint] WAIT 
                    END IF
                        IF Exist(sTmpMountPoint &/ "winnt" &/ "system32" &/ "winver.exe") OR IF Exist(sTmpMountPoint &/ "WINDOWS" &/ "system32" &/ "winver.exe") THEN 
                            'Message(sPartition & " has a windows install")
                            WITH FrmLiloSetup.tsLIloTabs
                              .Index = .Count - 1
                              .Text = "Windows" & Space(1) & "-" & Right(sPartition, Len(sPartition) - RInStr(sPartition, "/")) 
                              .Count = .Count + 1
                            END WITH 
                            ' populate the tab
                                ME.FILL_IN_WINDOWS_TAB("Windows", sPartition)
                            
                        END IF
                    
                    
                    
                    EXEC ["sync"] WAIT 
                    EXEC ["umount", sTmpMountPoint] WAIT 
          NEXT 
  
END

PUBLIC SUB FILL_IN_WINDOWS_TAB(sDesc AS String, sHostPart AS String)
  
  DIM tb AS TextBox
  DIM tl AS TextLabel
  DIM cb AS CheckBox
  DIM hr AS Separator
  DIM x, y AS Integer
  
  x = 4
  y = 12
  
            tl = NEW TextLabel(FrmLiloSetup.tsLIloTabs)
                WITH tl
                    .Text = "<h3>" & sDesc & Space(1) & ("installed on") & Space(1) & sHostPart & "</h3>"
                    .Height = 21
                    .Width = MdlObjSizer.get_object_width(.Text)
                    .Move(x, y)
                END WITH 
                y = y + tl.Height + 4
            hr = NEW Separator(FrmLiloSetup.tsLIloTabs)
              WITH hr
                .Height = 2
                .Move(x - 2, y)
                .Width = FrmLiloSetup.tsLIloTabs.Width - x
              END WITH 
  y = y + 16
  
            cb = NEW CheckBox(FrmLiloSetup.tsLIloTabs) AS "bBootWinInstall"
                WITH cb
                    .Move(x, y)
                    .Value = TRUE
                    .Text = ("Include this installation in the boot menu")
                    .Width = MdlObjSizer.get_object_width(.Text) + 36
                    .Height = 21
                    .Tag = sHostPart
                END WITH 
                  ME.arrWinBootChecks.Add(cb)
                y = y + cb.Height + 4
            
            tl = NEW TextLabel(FrmLiloSetup.tsLIloTabs)
                WITH tl
                    .Text = ("Name")
                    .Height = 21
                    .Width = MdlObjSizer.get_object_width(.Text)
                    .Move(x, y)
                    .Alignment = Align.Normal
                END WITH 
            'y = y + tl.Height + 4
            
            tb = NEW TextBox(FrmLiloSetup.tsLIloTabs) AS "OsNameTxtBox" ' " txtWinNameBox ""
                WITH tb
                    .Height = 21
                    .Width = 200
                    .Text = sDesc & "-" & Right(sHostPart, Len(sHostPart) - RInStr(sHostPart, "/"))
                    .MaxLength = 15
                    .Move(x + tl.Width + 8, y)
                    .Tag = sHostPart
                END WITH 
                ME.arrWinNameTxtBoxes.Add(tb)
        
  
END









  PUBLIC SUB FILL_IN_LINUX_TAB(sDesc AS String, sHostPart AS String)
  
  DIM tb AS TextBox
  DIM cb AS CheckBox
  DIM tl AS TextLabel
  DIM x, y AS Integer
  DIM hrsep AS Separator
  DIM cbox AS ComboBox
  DIM sDump AS String
  DIM sInitrdLoc AS String
  'DIM i AS Integer
  'DIM sKernelStr AS String
  IF sDesc LIKE "vector" THEN 
      sInitrdLoc = "/tmp/lilo_tmp/boot" 
  ELSE 
      sInitrdLoc = "/tmp/lilo_tmp"
  END IF
  'Message(sInitrdLoc)
  

  INC i
  x = 4
  y = 12
      'WITH FrmLiloSetup.tsLIloTabs
      tl = NEW TextLabel(FrmLiloSetup.tsLIloTabs) AS "osItroLabels"
        WITH tl
         .Move(x, y)
          .Text = "<h3>" & sDesc & Space(1) & "Linux" & Space(1) & ("installed in") & Space(1) & sHostPart & "</h3>"
          .Height = 21
          .Width = MdlObjSizer.get_object_width(.Text) + 36
          .Alignment = Align.Normal
          .tag = i & sHostPart
        END WITH 
          arriDLabels.Add(tl)
  y = y + tl.Height + 4
  
    hrsep = NEW Separator(FrmLiloSetup.tsLIloTabs) AS "Separators"
      WITH hrsep
        .Height = 2
        .Move(x - 2, y, FrmLiloSetup.tsLIloTabs.Width - 4)
      END WITH 
      y = y + 16
  
  
      
      cb = NEW CheckBox(FrmLiloSetup.tsLIloTabs) AS "cbIncCheckboxes"
        WITH cb
          .Tag = i & sHostPart
          .Text = ("Include in boot menu")
          .Value = TRUE
          .Width = MdlObjSizer.get_object_width(.Text) + 36
          .Height = 21
          .Move(x, y)
        END WITH 
          ME.arrLinuxIncCheckboxes.Add(cb)
          y = y + cb.Height + 4
        
                                tl = NEW TextLabel(FrmLiloSetup.tsLIloTabs) AS "NameLabels"
                                    WITH tl
                                    .Move(x, y)
                                    .Text = ("Name")
                                    .Width = MdlObjSizer.get_object_width(.Text)
                                    .Height = 21
                                    .Alignment = Align.Normal
                                  END WITH 
                                  'y = y + tl.Height + 4
                                  
                                tb = NEW TextBox(FrmLiloSetup.tsLIloTabs) AS "OsNameTxtBox"
                                      WITH tb
                                              .Height = 21
                                              .Width = 200
                                              .MaxLength = 15
                                              .Move(x + tl.Width + 8, y)
                                              .Text = sDesc & "-" & Right(sHostPart, Len(sHostPart) - RInStr(sHostPart, "/"))
                                              .Tag = i & sHostPart
                                      END WITH 
                                      ME.arrLinuxNametxtboxes.Add(tb)
                                      x = x + tl.Width + 8 + tb.Width
                                tl = NEW TextLabel(FrmLiloSetup.tsLIloTabs)
                                    WITH tl
                                        .Text = ("Initrd")
                                        .Height = 21
                                        .Width = MdlObjSizer.get_object_width(.Text)
                                        .Move(x + 8, y)
                                        .Alignment = Align.Bottom
                                    END WITH 
                                
                                cbox = NEW ComboBox(FrmLiloSetup.tsLIloTabs)
                                  WITH cbox
                                    .Move(x + tl.Width + 16, y)
                                    .ReadOnly = TRUE
                                    .Width = 200
                                    .Height = 21
                                    .Tag = i & sHostPart
                                            ' BROWSE FOR INITRD IMAGES
                                                FOR EACH sDump IN Dir(sInitrdLoc, "initrd*").Sort(gb.Ascent)
                                                    IF cbox.Find(Trim(sDump)) = -1 THEN cbox.Add(Trim(sDump))                                            
                                                NEXT 
                                         .Sorted = gb.Ascent
                                         '.Sorted = TRUE     
                                  END WITH 
                                        ME.arrCbInitrds.Add(cbox)
                              
                                      
                                      x = 4
                                      y = y + tb.Height + 4
                                      
                                      
                                tl = NEW TextLabel(FrmLiloSetup.tsLIloTabs) AS "AppendLabel"
                                    WITH tl
                                      .Text = ("Kernel boot options")
                                      .Width = MdlObjSizer.get_object_width(.Text)
                                      .Height = 21
                                      .Alignment = Align.Normal
                                      .Move(x, y)
                                    END WITH 
                                
                                tb = NEW TextBox(FrmLiloSetup.tsLIloTabs) AS "txtAppendBox"
                                    WITH tb
                                      .Move(x + tl.Width + 8, y, FrmLiloSetup.tsLIloTabs.Width - (x + tl.Width + 8 + 4), 21)
                                      .Text = ""
                                      .Tag = i & sHostPart
                                      .ReadOnly = FALSE
                                    END WITH 
                                    ME.arrLinuxAppendtxtBoxes.Add(tb)
                                y = y + tb.Height + 4
                                
          IF sHostPart = ClsPartSel.sRoot THEN 
              ' ADD A NEW CHECK BOX TO BOOT INTO TEXT MODE
              cb = NEW CheckBox(FrmLiloSetup.tsLIloTabs) AS "bDoTextMode"
                  WITH cb
                  .Move(x, y)
                  .Value = FALSE
                  .Text = ("Add option to boot this operating system into text mode")
                  .Height = 21
                  .Width = MdlObjSizer.get_object_width(.Text) + 36
                  .Tag = i & sHostPart
                  END WITH 
                    ME.arrLinuxTextBoots.Add(cb)
        END IF
        
  
END


PUBLIC SUB LIST_DEFAULT_BOOT_OPTIONS()
  
  DIM cb, cbox AS CheckBox
  DIM tb AS TextBox
  
        FOR EACH cb IN ME.arrLinuxIncCheckboxes
          IF cb.Value = TRUE THEN 
              FOR EACH tb IN ME.arrLinuxNametxtboxes
                IF tb.Tag = cb.Tag THEN 
                    WITH FrmLiloSetup.cbBootDefault
                      IF .Find(tb.Text) = -1 THEN .Add(tb.Text)
                    END WITH 
              END IF
          NEXT 
          FOR EACH cbox IN ME.arrLinuxTextBoots
            IF cb.Tag = cbox.Tag THEN 
              IF cbox.Value = TRUE THEN 
                  FOR EACH tb IN ME.arrLinuxNametxtboxes
                    IF cbox.Tag = tb.Tag THEN 
                        IF FrmLiloSetup.cbBootDefault.Find(tb.Text & "-tui") = -1 THEN FrmLiloSetup.cbBootDefault.Add(tb.Text & "-tui")
                    END IF
                  NEXT 
              END IF
            END IF
        NEXT 
    END IF
  NEXT 
  
  ' List windows installs now
  FOR EACH cb IN ME.arrWinBootChecks
      IF cb.Value = TRUE THEN 
        FOR EACH tb IN ME.arrWinNameTxtBoxes
          IF cb.Tag = tb.Tag THEN 
            IF FrmLiloSetup.cbBootDefault.Find(tb.Text) = -1 THEN FrmLiloSetup.cbBootDefault.Add(tb.Text)
          END IF
        NEXT 
      END IF
  NEXT 
  
END




PUBLIC SUB OsNameTxtBox_KeyPress()
  
  DIM sOld AS String
  DIM iKey AS Integer
  sOld = LAST.Text
  iKey = FrmLiloSetup.cbBootDefault.Find(sOld)
  
  IF iKey <> -1 THEN FrmLiloSetup.cbBootDefault.Remove(iKey)
  
  'FrmLiloSetup.tsLIloTabs.Text = LAST.text
  
  'FrmLiloSetup.cbBootDefault.Add(LAST.text)
  'IF FrmLiloSetup.cbBootDefault.Find(sOld) <> -1 THEN FrmLiloSetup.cbBootDefault.Remove
  
  'Message(sOld)
  
  
END

PUBLIC SUB OsNameTxtBox_KeyRelease()
  DIM iKey AS Integer
  
  iKey = FrmLiloSetup.cbBootDefault.Find(Left(LAST.Text, Len(LAST.text) - 1))
  IF ikey <> -1 THEN FrmLiloSetup.cbBootDefault.Remove(iKey)
  FrmLiloSetup.cbBootDefault.Add(LAST.text)
  
  FrmLiloSetup.tsLIloTabs.Text = LAST.text
  'FrmLiloSetup.cbBootDefault.Add(LAST.text)
  
  
  
END
