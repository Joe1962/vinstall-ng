' Gambas module file


'    This file is part of vinstall-ng

'    vinstall-ng is free software: you can redistribute it and/or modify
'    it under the terms of the GNU General Public License as published by
'    the Free Software Foundation, either version 2 of the License, or
'    (at your option) any later version.

'    vinstall-ng  is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'    GNU General Public License for more details.

'    You should have received a copy of the GNU General Public License
'    along with vinstall-ng.  If not, see <http://www.gnu.org/licenses/>.

       
PUBLIC vObj AS Object[]          
PUBLIC oWMntPoints AS Object[]
PUBLIC SUB LIST_WIN_PARTITIONS()
DIM tl AS TextLabel
DIM cb AS ComboBox
DIM y AS Integer
DIM x AS Integer
DIM i AS Integer
DIM sDump1 AS String
DIM sPartList AS String[]
DIM sPart AS String
DIM sSize AS String
DIM lbwidth AS Integer
DIM cbx AS Integer = FrmPartSel.scrollPartitions.Width / 2

x = 4
y = 8


  ' now, do the WIN partitions
  ' MOVE THESE PARTITIONS TO A DIFFERENT WINDOW.
  ' THESE ARE ONLY NEEDED FOR FSTAB
  sDump1 = ""
      SHELL "PATH=$PATH:/sbin && probepart | grep -e \'/dev\' | grep -v \' Ext\' | grep -v \'raid autodetect\' | grep -v \' Linux\' | cut -f 1 -d \' \' | sed -r \'s/Disk//g\'" TO sdump1
       File.Save(Temp("all"), Trim(sDump1))
     
    vObj = NEW Object[]
sDump1 = File.Load(Temp("all"))
sDump1 = Trim(sDump1)
'Message(sDump1)
    IF sDump1 <> "" THEN 
    sDump1 = Trim(sDump1)
    'y = y + tl.Height * 2 + 4
        ' create a new text label just to label the separation between windows and linux partitions
        tl = NEW TextLabel(FrmWinDrives.svWinDrives) AS "Separator"
          WITH tl
            .Text = "<b>Windows Partitions Detected</b>"
            .Height = 27
            .Width = MdlObjSizer.get_object_width(.Text)
            .x = FrmWinDrives.svWinDrives.Width / 2 - (.Width / 2)
            
            .y = y
            cbx = .x + .Width - (.Width / 2)
          END WITH 
    y = y + tl.Height * 2
    
    'END IF
      IF InStr(sDump1, gb.NewLine) THEN ' more than one partition found
        sPartList = Split(sDump1, gb.NewLine) ' multiple partitions found
          'initiate the array
            ClsWinDrives.sWinDrives = NEW String[]  
          FOR i = 0 TO sPartList.Count - 1
            sPart = Right(sPartList[i], Len(sPartList[i]) - RInStr(sPartList[i], "/"))
                        
                SHELL "mkdir /mnt" &/ spart & " && mount " & Trim(sPartList[i]) & Space(1) & "/mnt" &/ sPart WAIT 
                    ' get the size using df -h | grep sPart and some sed
                    ' will embed some bash, but should probabbly be fixed
                SHELL "export " & sPart & "=$(df -h | grep " & sPart & ") && echo $" & sPart & " | cut -f 2 -d \' \'" TO sSize
                SHELL "umount /mnt" &/ spart WAIT 
                'SHELL "rm -rf /mnt" &/ spart WAIT 
                TRY RMDIR "/mnt" &/ sPart
                    
            
              tl = NEW TextLabel(FrmWinDrives.svWinDrives) AS "WinPartitions"
                WITH tl
                  
                  .Text = sPartList[i] & " ( " & sSize & " )"
                  .Width = MdlObjSizer.get_object_width(.Text) ' * 1.5                
                  .Tag = sPartList[i]
                  .Height = 27
                  .x = FrmPartSel.tlPartRow.Left
                  .y = y
                  cbx = .x + tl.Width * 1.5
                  IF .Width > lbwidth THEN 
                    lbwidth = .Width
                  ELSE 
                    .Width = lbwidth
                  END IF
                                    ME.vObj.Add(tl)
                END WITH
                  
                
                ClsWinDrives.sWinDrives.Add(tl.Tag & "|" & "/mnt/" & sPart)
                ' now create the combobox to select the mount point
                  cb = NEW ComboBox(FrmWinDrives.svWinDrives) AS "WinMntPoints"
                  oWMntPoints = NEW Object[]
                    WITH cb
                      .Tag = sPartList[i]
                      .Height = 27
                      '.x = FrmPartSel.scrollPartitions.Width / 2 'lbwidth + 12
                      .x = FrmPartSel.tlPartRow2.Left
                      .y = tl.Top
                      .Add("/mnt" &/ sPart)
                      .Width = MdlObjSizer.get_object_width("/mnt" &/ sPart) * 2
                      .ReadOnly = FALSE
'                      .border = border.Plain
                      ME.oWMntPoints.Add(cb)
                    END WITH 
                  
                y = y + tl.Height + 4
                  
                
                
          NEXT 
          
          
          
      ELSE ' only one win partition found
      
      
        sPart = Right(sDump1, Len(sDump1) - RInStr(sDump1, "/"))
        'Message(sPart)
        SHELL "mkdir -p /mnt" &/ spart & " && mount " & Trim(sDump1) & Space(1) & "/mnt" &/ sPart WAIT 
        SHELL "export " & sPart & "=$(df -h | grep " & sPart & ") && echo $" & sPart & " | cut -f 2 -d \' \'" TO sSize
        sSize = Trim(sSize)
        'Message(sSize)
        
        
        
        y = y + tl.Height + 4
        tl = NEW TextLabel(FrmWinDrives.svWinDrives) AS "WinPartitions"
          WITH tl
            .Text = sDump1 & " ( " & sSize & " )"
            .tag = sDump1
            .Height = 27
            .Width = MdlObjSizer.get_object_width(.Text) * 1.5
            .x = FrmPartSel.tlPartRow.Left
            .y = y
                                   
          END WITH 
          SHELL "umount /mnt" &/ spart WAIT 
        SHELL "rm -rf /mnt" &/ spart WAIT 
  END IF
 ELSE 
  ' no widnows partitions found
    tl = NEW TextLabel(FrmWinDrives.svWinDrives)
      WITH tl
        .Text = "<b>No Windows partitions detected</b>"
        .Width = MdlObjSizer.get_object_width(.Text)
        .Height = 27
        .x = y
        .y = y
        
      END WITH 
      
      
 END IF
 
 
 

 
 
END 
       
PUBLIC SUB WinMntPoints_keyrelease()
  
  ME.UPDATE_WIN_ARRAY(LAST.tag, Trim(LAST.text))
  
END
PUBLIC SUB WinMntPoints_Select()
  
  ME.UPDATE_WIN_ARRAY(LAST.tag, Trim(LAST.text))
  
END

    
  
  
  
PUBLIC SUB UPDATE_WIN_ARRAY(sTag AS String, sMntPoint AS String)

DIM i AS Integer
DIM sLine AS String
  FOR i = 0 TO ClsWinDrives.sWinDrives.Count - 1
    sLine = ClsWinDrives.sWinDrives[i]
      IF Left(sLine, InStr(sLine, "|") - 1) = sTag THEN 
        sLine = sTag & "|" & sMntPoint
      PRINT sLine
      ELSE 
        sLine = sLine
      END IF
  NEXT 
  
  ' WARNING: ALTHOUGH THIS WORKS, IT MAY STILL NOT BE SAVING THE DATA TO THE ARRAY.... MAKE SURE THE NEW VALUES ARE
  ' SAVED. ALSO, MAKE IT WORK WITH A SINGLE PARTITION AS WELL.
  
END

