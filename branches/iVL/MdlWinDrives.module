' Gambas module file


'    This file is part of vinstall-ng

'    vinstall-ng is free software: you can redistribute it and/or modify
'    it under the terms of the GNU General Public License as published by
'    the Free Software Foundation, either version 2 of the License, or
'    (at your option) any later version.

'    vinstall-ng  is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'    GNU General Public License for more details.

'    You should have received a copy of the GNU General Public License
'    along with vinstall-ng.  If not, see <http://www.gnu.org/licenses/>.

       
PUBLIC vObj AS Object[]          
PUBLIC oWMntPoints AS Object[]
PUBLIC SUB LIST_WIN_PARTITIONS()
DIM tl AS TextLabel
DIM cb AS ComboBox
DIM y AS Integer
DIM x AS Integer
DIM i, ii AS Integer
DIM sDump1, sDump2 AS String
DIM sPartList AS String[]
DIM sPart AS String
DIM sSize AS String
DIM lbwidth AS Integer
DIM cbx AS Integer = FrmPartSel.scrollPartitions.Width / 2
DIM sDisks, sResults, sLine, wintfs AS String[]
DIM sPartNo, sBlank, sPartaddr, sPartSize, sPartType, sTempLine AS String
DIM tlwidth AS Integer

x = 4
y = 8

ME.oWMntPoints = NEW Object[]

  ' now, do the WIN partitions
  ' MOVE THESE PARTITIONS TO A DIFFERENT WINDOW.
  ' THESE ARE ONLY NEEDED FOR FSTAB
  
  SHELL "probepart | grep -i fat | cut -f 1 -d \' \'" TO sDump1
  IF sDump1 <> "" THEN 
    sDump1 = Trim(sDump1)
    'y = y + tl.Height * 2 + 4
        ' create a new text label just to label the separation between windows and linux partitions
        tl = NEW TextLabel(FrmWinDrives.svWinDrives) AS "Separator"
          WITH tl
            .Text = "<b>Windows Partitions Detected</b>"
            .Height = 27
            .Width = MdlObjSizer.get_object_width(.Text)
            .x = FrmWinDrives.svWinDrives.Width / 2 - (.Width / 2)
            .y = y
            cbx = .x + .Width - (.Width / 2)
            
            
          END WITH 
          
    y = y + tl.Height + 8
    
      tl = NEW TextLabel(FrmWinDrives.svWinDrives) AS "Headers"
        WITH tl
          .x = x
          .y = y
          .text = "<B>PARTITION</B>"
          .Width = MdlObjSizer.get_object_width(.Text) * 1.5
          .Height = 27
        END WITH 
          cbx = x + (tl.Width) * 2
          tlwidth = tl.Width
      tl = NEW TextLabel(FrmWinDrives.svWinDrives) AS "Headers"
        WITH tl
          .x = cbx
          .y = y
          .text = "<b>MOUNT TO </B>"
          .Width = MdlObjSizer.get_object_width(.Text) * 1.5
          .Height = 27
        END WITH 
        y = y + tl.Height + 8
  'END IF
        ' Begin listing individual partitions
    sDisks = Split(sDump1, "\n")
    'Message(sDump1)
      FOR i = 0 TO sDisks.count - 1
        sPartNo = Right(sDisks[i], Len(sDisks[i]) - Len("/dev/hda"))
          IF Len(sPartNo) > 1 THEN 
            sBlank = ""
          ELSE 
            sBlank = " "
          END IF
            SHELL "export s=$(parted " & Left(sDisks[i], Len("/dev/hda")) & " print | grep ^\'" & sBlank & sPartNo & "\'); echo $s | cut -f 4 -d \' \'" TO sPartsize
              tl = NEW TextLabel(FrmWinDrives.svWinDrives)
                WITH tl
                .y = y
                .x = x
                .text = sDisks[i] & " [ " & sPartsize & " ]"
                .Width = 200
                .Height = 21
                .tag = sDisks[i]
                .Alignment = Align.Normal
                END WITH 
              cb = NEW ComboBox(FrmWinDrives.svWinDrives)
                WITH cb
                  .x = cbx
                  .y = tl.top
                  .Width = tl.Width * 0.75
                  .Height = 21
                  .tag = sDisks[i]
                  .Add("/mnt" &/ Right(.tag, Len(.tag) - RInStr(.tag, "/")))                  
                  .Add("Do not mount")
                  
                  '.ReadOnly = TRUE
                END WITH 
                  ME.oWMntPoints.Add(cb)
                
                
            
    y = y + tl.Height + 4            
    NEXT 
        ' now do ntfs partitions the same way
        sDump1 = ""
        'sDisks.Clear
        SHELL "probepart | grep -i ntfs | cut -f 1 -d \' \'" TO sDump1
        sDump1 = Trim(sDump1)
        wintfs = Split(sDump1, "\n")
          FOR i = 0 TO wintfs.Count - 1
             sPartNo = Right(wintfs[i], Len(wintfs[i]) - Len("/dev/hda"))
          IF Len(sPartNo) > 1 THEN 
            sBlank = ""
          ELSE 
            sBlank = " "
          END IF
            SHELL "export s=$(parted " & Left(wintfs[i], Len("/dev/hda")) & " print | grep ^\'" & sBlank & sPartNo & "\'); echo $s | cut -f 4 -d \' \'" TO sPartsize
              tl = NEW TextLabel(FrmWinDrives.svWinDrives)
                WITH tl
                .y = y
                .x = x
                .text = wintfs[i] & " [ " & sPartsize & " ]"
                .Width = 200
                .Height = 21
                .tag = wintfs[i]
                .Alignment = Align.Normal
                END WITH 
              cb = NEW ComboBox(FrmWinDrives.svWinDrives)
                WITH cb
                  .x = cbx
                  .y = tl.top
                  .Width = tl.Width * 0.75
                  .Height = 21
                  .tag = wintfs[i]
                  .Add("/mnt" &/ Right(.tag, Len(.tag) - RInStr(.tag, "/")))                  
                  .Add("Do not mount")
                  
                  '.ReadOnly = TRUE
                END WITH 
                  ME.oWMntPoints.Add(cb)
                
                
            
    y = y + tl.Height + 4            
    NEXT 
          
        
    
    
  'END IF
 
 ELSE 
  ' no widnows partitions found
    tl = NEW TextLabel(FrmWinDrives.svWinDrives)
      WITH tl
        .Text = "<b>No Windows partitions detected</b>"
        .Width = MdlObjSizer.get_object_width(.Text)
        .Height = 27
        .x = y
        .y = y
        
      END WITH 
      
      
 END IF
 
 
 

 
 
END 
       
PUBLIC SUB WinMntPoints_keyrelease()
  
  ME.UPDATE_WIN_ARRAY(LAST.tag, Trim(LAST.text))
  
END
PUBLIC SUB WinMntPoints_Select()
  
  ME.UPDATE_WIN_ARRAY(LAST.tag, Trim(LAST.text))
  
END
  
PUBLIC SUB UPDATE_WIN_ARRAY(sTag AS String, sMntPoint AS String)

DIM i AS Integer
DIM sLine AS String
  FOR i = 0 TO ClsWinDrives.sWinDrives.Count - 1
    sLine = ClsWinDrives.sWinDrives[i]
    'FORMAT: <partition_address>|<mount_point>
      IF Left(sLine, InStr(sLine, "|") - 1) = sTag THEN 
        sLine = sTag & "|" & sMntPoint
      PRINT sLine
      ELSE 
        sLine = sLine
      END IF
  NEXT 
  
  ' WARNING: ALTHOUGH THIS WORKS, IT MAY STILL NOT BE SAVING THE DATA TO THE ARRAY.... MAKE SURE THE NEW VALUES ARE
  ' SAVED. ALSO, MAKE IT WORK WITH A SINGLE PARTITION AS WELL.
  
END

