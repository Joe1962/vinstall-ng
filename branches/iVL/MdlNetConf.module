' Gambas module file
'    This file is part of vinstall-ng

'    vinstall-ng is free software: you can redistribute it and/or modify
'    it under the terms of the GNU General Public License as published by
'    the Free Software Foundation, either version 2 of the License, or
'    (at your option) any later version.

'    vinstall-ng  is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'    GNU General Public License for more details.

'    You should have received a copy of the GNU General Public License
'    along with vinstall-ng.  If not, see <http://www.gnu.org/licenses/>.
PRIVATE ileft AS Integer
PRIVATE itop AS Integer
PRIVATE icbleft AS Integer
PUBLIC objCombos AS Object[]
PUBLIC objCheckboxes AS Object[]
PUBLIC objtxtIps AS Object[]
PUBLIC objtxtNetMasks AS Object[]
PUBLIC objtxtDNS AS Object[]
PUBLIC objFrames AS Object[]
PUBLIC objtlDetails AS Object[]



PRIVATE pWiredPic AS Picture = picture["images/ethernet.png"]
PRIVATE pWirelessPic AS picture = picture["images/wireless.png"]

PUBLIC SUB LIST_NETWORK_INTERFACES()
  
  ' This SUB will detect network interfaces and offer setup options for each one of them
    DIM seths AS String
    DIM sDump AS String
    DIM sDevList AS String[]
    DIM sLine AS String[]
    DIM sDev AS String
    DIM sType AS String
    DIM sDevAddr AS String
    DIM tl AS TextLabel
    DIM tb AS TextBox
    DIM cb AS ComboBox
    DIM bCb AS CheckBox
    DIM i, ii, y, x, cbwidth AS Integer
    DIM pTabPic AS picture
    
    
    'initiate the arrays
    objCombos = NEW Object[]
    objFrames = NEW Object[]
    objtlDetails = NEW Object[]
    objtxtIps = NEW Object[]
    objtxtNetMasks = NEW Object[]
    objtxtDNS = NEW Object[]
    objCheckboxes = NEW Object[]
 
       
    
    SHELL "ifconfig -a | grep ^[a-z] | grep -v ^lo" TO seths
      File.Save(Temp("eths"), Trim(seths)) 
      
      sDevList = Split(File.Load(DConv(Temp("eths"))), gb.NewLine)
      
        FOR i = 0 TO sDevList.count - 1
          sLine = Split(sDevList[i], " ")
          sDev = sLine[0]
           sDevAddr = sLine[10] ' This may be off depending on which box this runs one... needs careful testing 
                ' try to detect wirelesss here
                  sDump = ""
                  SHELL "iwconfig " & sDev & " > /tmp/iwdump 2>&1" WAIT 
                    'Message(File.Load("/tmp/iwdump"))
                     sDump = Trim(File.Load("/tmp/iwdump"))
                    IF InStr(sDump, "no wireless extensions") > 0 THEN 
                      sType = "Wired"
                      pTabPic = pWiredPic
                    ELSE 
                      sType = "Wireless"
                      pTabPic = pWirelessPic
                    END IF
              
          WITH FrmNetConf.TSNetDevices
            PRINT .Count
          
            
            .index = i 
            '.text = Left(sDevList[i], 4)
            .text = sDev 
              IF sDevList[i] <> "" THEN 
                INC .Count
              END IF
            .picture = pTabPic
                  ' populate it with the objects
                  tl = NEW TextLabel(FrmNetConf.TSNetDevices) AS "DevAddresses"
                    WITH tl
                      .Move(4, 16)
                      .text = "Hardware Address"
                      .Height = 21
                      .Alignment = Align.Normal
                      .Width = MdlObjSizer.get_object_width(.text)
                      'y = .top + .Height + 4
                    END WITH
                  tb = NEW TextBox(FrmNetConf.TSNetDevices) AS "txtDevAddresses" ' MAC Address box
                    WITH tb
                    .Move(tl.left + tl.Width + 8, tl.top)
                    .text = DConv(sDevAddr)
                    .ReadOnly = TRUE
                    .Width = MdlObjSizer.get_object_width(.text) + 24
                    .Height = tl.Height
                    x = .Left
                    cbwidth = .Width
                        
                    END WITH
                                      
                  tl = NEW TextLabel(FrmNetConf.TSNetDevices) AS "DevTYpeLbl"
                    WITH tl
                      .Move(x + tb.Width + 8, tb.top)
                      .text = "Interface Type"
                      .Height = 21
                      .Width = MdlObjSizer.get_object_width(.text)
                      .Alignment = Align.Normal
                    END WITH 
                  tb = NEW TextBox(FrmNetConf.TSNetDevices) AS "txtDevType" ' Interface Type (wireless, wired)
                    WITH tb
                      .Move(tl.left + tl.width + 8, tl.top)
                      .text = sType
                      .Width = MdlObjSizer.get_object_width(.text) + 24
                      .Height = 21
                      .ReadOnly = TRUE
                      .tag = sDev
                    END WITH
                    
                          'add a box here to enable/disable the interface
                  bCb = NEW CheckBox(FrmNetConf.TSNetDevices) AS "bEnableInterface" ' enable/disable interface box
                    WITH bCb
                      .Move(4, tb.top + tb.Height + 4)
                      .text = "Automatically activate this interface at start-up"
                      .Value = TRUE
                      .Height = 21
                      .Width = MdlObjSizer.get_object_width(.text) + 36
                      .tag = sDev
                      y = .top + .Height + 8
                      objCheckboxes.Add(bCb)
                    END WITH  
                    ' Split the design here for wireless and wired devices
          'IF sType = "Wireless" THEN                     
                  tl = NEW TextLabel(FrmNetConf.TSNetDevices) AS "ConfModeLbl"
                    WITH tl
                      .Move(4, y)
                      .text = "Setup Mode"
                      .height = 21
                      .Width = MdlObjSizer.get_object_width(.text)
                      .Alignment = Align.Normal
                      'y = .top + .Height + 4
                     iLeft = .Left
                    END WITH 
                  cb = NEW ComboBox(FrmNetConf.TSNetDevices) AS "MethodSel" ' Setup Method combobox
                    WITH cb
                      .Move(x, y)
                      .width = cbwidth
                      .Height = 21
                      .ReadOnly = TRUE
                      .list = ["DHCP", "STATIC"]
                      .tag = sDev
                      'y = .top + .Height + 4
                      'itop = y
                      icbleft = .Left
                    END WITH 
                    y = cb.top + cb.Height + 4
                    itop = y
                    objCombos.Add(cb)
        ' '  ELSE 
        '       tl = NEW TextLabel(FrmNetConf.TSNetDevices) AS "tlWirelessSecType"
        '         WITH tl
        '           .Move(4, y)
        '           .text = "Security Mode"
        '           .Width = MdlObjSizer.get_object_width(.text)
        '           .Height = 21
        '           .Alignment = Align.Normal
        '         END WITH 
        '   END IF
          
          END WITH 
                  
         
         NEXT 
  FrmNetConf.TSNetDevices[FrmNetConf.TSNetDevices.count - 1].Delete ' Ugly hack to delete the trailing blank tab
  
          IF ERROR THEN Message(Error.text & gb.newline & Error.where) 
  
  KILL "/tmp/iwdump"
END
PUBLIC SUB MethodSel_Click()
  
  DIM frmDetails AS Frame
  DIM txtbox AS TextBox
  DIM cb AS CheckBox
  DIM tl AS TextLabel
  DIM itxtleft, itxtwidth, imandnsleft, imandnstxtleft AS Integer
  
  IF LAST.text = "STATIC" THEN 
  frmDetails = NEW Frame(FrmNetConf.TSNetDevices) AS "STaticDetails"
    WITH frmDetails
      .Move(ileft, itop + 8)
      .text = "Settings for Static Method"
      .Width = .Parent.Width - (.left * 2.5)
      .Height = 130
      .tag = LAST.tag
    END WITH 
    objFrames.Add(frmDetails)
        'populate the frame for this
              tl = NEW TextLabel(frmDetails) AS "tlStaticLabels"
                WITH tl
                  .Move(8, 24)
                  .text = "IP Address"
                  .Height = 21
                  .Width = MdlObjSizer.get_object_width(.text)
                  .Alignment = Align.Normal
                END WITH 
              txtbox = NEW TextBox(frmDetails) AS "txtStatisIpBoxes" ' static IP Address Box
                WITH txtbox
                  .tag = LAST.tag
                  .Move((tl.left + tl.Width) * 2, tl.Top)
                  .text = "192.168.1.100"
                  .Height = 21
                  .Width = MdlObjSizer.get_object_width(.text) * 2
                  .MaxLength = 16
                    IF objtxtIps.Find(txtbox) = -1 THEN objtxtIps.Add(txtbox) ' add to the array
                END WITH 
                itxtleft = (tl.Left + tl.Width) * 2 'txtbox.Left 
                itxtwidth = txtbox.Width
                imandnsleft = itxtleft + itxtwidth + 8
                
                
                
              tl = NEW TextLabel(frmDetails) AS "tlStaticLabels"
                WITH tl
                  .text = "Subnet Mask"
                  .width = MdlObjSizer.get_object_width(.text)
                  .Height = 21
                  .Alignment = Align.Normal
                  .Move(8, txtbox.top + txtbox.Height + 4)
                END WITH 
              txtbox = NEW TextBox(frmDetails) AS "txtDnsMaskBoxes" ' DNS Mask Box
                WITH txtbox
                  .Move(itxtleft, tl.top)
                  .text = "255.255.255.0"
                  .tag = LAST.tag
                  .Height = 21
                  .Width = itxtwidth
                  .MaxLength = 16
                    IF objtxtNetMasks.Find(txtbox) = -1 THEN objtxtNetMasks.Add(txtbox) ' add to the array
                END WITH 
                
                
              tl = NEW TextLabel(frmDetails) AS "tlStaticLabels"
                WITH tl
                  .Move(8, txtbox.top + txtbox.Height + 4)
                  .Height = 21
                  .text = "Gateway Address"
                  .Width = MdlObjSizer.get_object_width(.text)
                  .Alignment = Align.Normal
                END WITH 
              txtbox = NEW TextBox(frmDetails) AS "txtGatewayAddrBoxes" ' Gateway address box
                WITH txtbox
                  .tag = LAST.tag
                  .Move(itxtleft, tl.top)
                  .Height = 21
                  .Width = itxtwidth
                  .MaxLength = 16
                  .text = "192.168.1.254"
                    IF objtxtDNS.Find(txtbox) = -1 THEN objtxtDNS.Add(txtbox) ' add to the array
                END WITH 
                 
                  
      FOR EACH tl IN objtlDetails
        IF tl.tag = LAST.tag THEN 
          objtlDetails.Delete(objtlDetails.Find(tl))
        END IF
      NEXT 
        
  ELSE 
    
    FOR EACH frmDetails IN objFrames
      IF frmDetails.tag = LAST.tag THEN 
      frmDetails.Delete
      objFrames.Delete(objFrames.Find(frmDetails))
    END IF
        'objFrames.Delete(objFrames.Find(frmDetails))
        'IF ERROR THEN Message(Error.Text & "\n" & Error.Where)
    NEXT 
        ' create a text label that says the thing will get automatically configured
        tl = NEW TextLabel(FrmNetConf.TSNetDevices) AS "DetailLbl"
          WITH tl
            '.Move(LAST.left - (LAST.width / 2), LAST.top + LAST.height + 12)
            .Move(8, LAST.top + LAST.height + 12)
            .text = "<b>Dynamic Host Control Protocol</b><br>Automatic settings via DHCP. <br><br>This will work if you use a cable or DSL modem on a home network. <br>If in doubt, choose this option"
            .Adjust
            '.border = Border.Etched
            .Width = MdlObjSizer.get_object_width(.text)
            .Height = 21 * 4          
            .Tag = LAST.tag
            
          END WITH 
          objtlDetails.Add(tl)
      
      
  END IF
END

PUBLIC SUB bEnableInterface_click()
  
  ' ' DIM fFrm AS Frame
  ' ' DIM Comb AS ComboBox
  ' '   FOR EACH fFrm IN objFrames
  ' '     IF fFrm.tag = LAST.tag THEN fFrm.Enabled = LAST.Value
  ' '   NEXT 
  ' '   FOR EACH Comb IN objCombos
  ' '     IF Comb.tag = LAST.tag THEN Comb.Enabled = LAST.Value
  ' '   NEXT 
  '''''' ******* Instead of that ^, this will only determing if the inet script will be set executable or not
END





PUBLIC SUB WRITE_INET()
  
  DIM sScript AS String
  DIM sIP, sGateway, Netmask, sDev AS String
  DIM sDHCP AS String
  DIM i AS Integer
  DIM txt AS TextBox
  DIM combo AS ComboBox
  DIM cb AS CheckBox
  DIM ii AS Integer = 0
  
    
    ' Base the function on the objects rather than the tabstrip
      FOR EACH cb IN objCheckboxes
        IF cb.value = TRUE THEN 
          sDev = cb.Tag
          FOR EACH combo IN objCombos
            IF combo.tag = cb.tag THEN 
              SELECT CASE combo.Text
                CASE "DHCP"
                  sDHCP = "yes"
                  sIp = ""
                  sGateway = ""
                  Netmask = ""
                CASE "STATIC"
                  sDHCP = "no"
                    ' get the values from each box
                      FOR EACH txt IN objtxtIps
                        IF txt.tag = combo.tag THEN sIp = txt.Text
                      NEXT 
                      FOR EACH txt IN objtxtNetMasks
                        IF txt.tag = combo.tag THEN Netmask = txt.Text
                      NEXT 
                      FOR EACH txt IN objtxtDNS
                        IF txt.tag = combo.tag THEN sGateway = txt.Text
                      NEXT 
              END SELECT 
            END IF
          NEXT 
              ' Generate the rc.inet[0-9] script
    sScript = "#!/bin/bash \n" &
    "# This file is supposed to be created by vnetadd \n" &
    "# and modified by vnetset. \n" &
    "# you can modify it by hand, but be careful \n \n \n" &
    "# This script is part of VectorLinux. Licensed under the terms of the GNU GPL \n" &
    "# \n\n\n" &
    "##############################################################\n" &
    "## The Settings \n" &
    "DEVICE=" & sDev & "\n" &
    "DHCP=\"" & sDHCP & "\"\n" &
    "IPADDR=\"" & sIP & "\"\n" &
    "NETMASK=\"" & Netmask & "\"\n" &
    "GATEWAY=\"" & sGateway & "\"\n" &
    "PROBE=\"no\"" & "\n\n" &
    "################################################################\n" &
    "## The Script \n \n" &
    "## You may make customized script here \n" &
    "## of source the starndard network script\n\n" &
    ". /etc/rc.d/functions-network $@ "
    
    Message(sScript)
    
      END IF
    NEXT 
    
  'ME.SET_HOSTNAME("Test")
END

PUBLIC SUB SET_HOSTNAME(sHostName AS String)
  
  DIM sRes AS String
    SHELL "skill -n X" TO sRes
      sRes = Trim(sRes)
    IF Len(sRes) > 0 THEN 
      SHELL "echo " & sHostName & " > " & ClsGlobal.sTargetMnt &/ "etc" &/ "HOSTNAME" WAIT 
    ELSE ' X is not running
      SHELL "hostname $HOSTNAME; echo " & sHostName & " > " & ClsGlobal.sTargetMnt &/ "etc" &/ "HOSTNAME" WAIT ' This sets the hostname to the current CLI session and saves it for future boots
    END IF
    
  
END




