' Gambas class file
'    This file is part of vinstall-ng

'    vinstall-ng is free software: you can redistribute it and/or modify
'    it under the terms of the GNU General Public License as published by
'    the Free Software Foundation, either version 2 of the License, or
'    (at your option) any later version.

'    vinstall-ng  is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'    GNU General Public License for more details.

'    You should have received a copy of the GNU General Public License
'    along with vinstall-ng.  If not, see <http://www.gnu.org/licenses/>.


STATIC PUBLIC iNavIdx AS Integer

PRIVATE sLast AS String
PUBLIC sNextKey AS String
PUBLIC FrmCurr AS Form ' assigned when a form is opened
PUBLIC frmLast AS Form ' assigned when a form is hidden
PUBLIC frmNext AS Form ' assined next form for the "next" button in fmain"
PUBLIC frmInit AS Form = MdlCore.frmInit ' initial form (set by the LANG environment)
PUBLIC SUB _new()

END

PUBLIC SUB Form_Open()
DIM iImg AS Image
DIM iWidth AS Integer



IF NOT FrmCurr OR FrmCurr = "" THEN FrmCurr = FrmSelISO



ME.Maximized = TRUE
frmInit = MdlCore.frmInit
'MdlCore.LOCK_GUI
'frmInit = FrmLangSel
'MdlCore.LOCK_GUI()
ClsGlobal.sBackNav = NEW Object[]
ClsGlobal.sSourceMnt = "/mnt/cdrom"
'ClsGlobal.sSourceMnt = "/mnt" &/ "source" 'FOR TESTING ONLY
'/ THE FOLLOWING LINES HAVE BEEN COMMENTED FOR TESTING ONLY
'IF frmInit = "" OR IsNull(frmInit) THEN frmInit = FrmSelISO

IF Application.Args[1] = "-C" THEN 
frmInit = FrmPartSel
FMain.btnext.Enabled = TRUE
FMain.btnext.ForeColor = Color.Black
END IF


IF NOT frmInit THEN frmInit = FrmLangSel
frmInit.Reparent(ME.pnlwinhost)
frmInit.width = pnlwinhost.Width
frmInit.height = pnlwinhost.Height



iImg = Image.Load("images/installer.png").Stretch(400, 50)
'iImg.Resize(600, 80)
PictureBox1.Resize(iImg.Width, iImg.Height)
PictureBox1.Picture = iImg.Picture
PictureBox1.Background = Color.SelectedBackground
PictureBox1.Stretch = TRUE
MdlCore.PREPARE_INSTALL_LAYOUT



WITH ME
  .btback.Enabled = FALSE
  .btback.ForeColor = Color.Gray
'  .Frame1.BackColor = Color.Transparent
  .tvPlan.BackColor = Color.transparent
  .tlBanner.Height = .PictureBox1.Height
  '.tvPlan.Width = MdlCore.iLeftWidth
   .Width = 800
   .Height = 600
  
END WITH 

iWidth = 0
FMain.tvPlan.MoveFirst()
 REPEAT 
 FMain.tvPlan.Item.Expanded = TRUE
  IF MdlObjSizer.get_object_width(FMain.tvPlan.Item.Text) > iWidth THEN 
    iWidth = MdlObjSizer.get_object_width(FMain.tvPlan.Item.Text)
  END IF
 UNTIL FMain.tvPlan.MoveBelow()
 'Message(iWidth)
FMain.btnext.Enabled = FALSE ' disable the button until a language is selected
IF ERROR THEN Message(Error.Text & "<br>" & Error.Where)
ME.AUTOSIZE_LEFT_PANE()
ME.Maximized = TRUE

END

PUBLIC SUB AUTOSIZE_LEFT_PANE()


  
  DIM iWidth AS Integer
  ' this will find widest child in treeview
    ME.tvPlan.MoveFirst()
      REPEAT 
        IF MdlObjSizer.get_object_width(tvPlan.Item.Text) > iWidth THEN 
          iWidth = MdlObjSizer.get_object_width(tvPlan.item.Text) + 12
        END IF
      UNTIL ME.tvPlan.MoveBelow()
  'Message(iWidth)
    'ME.tvPlan.Width = iWidth + (iWidth / 5)
    ME.tvPlan.Width = iWidth + 6
    'ME.Frame1.Width = iWidth + 12
    ME.SidePanel1.Width = iWidth + 64
    'me.SidePane
END


PUBLIC SUB ComboBox1_Click()

  

END


PUBLIC SUB Form_Resize()



DIM iMid AS Integer
  
  WITH ME
    .btQuit.Width = MdlObjSizer.get_object_width(.btQuit.Text) + 36
  END WITH 
  'ME.AUTOSIZE_LEFT_PANE
'ME.pnlWinHost.Resize(ME.ClientWidth - ME.Frame1.Width - (ME.Frame1.left * 8), ME.ClientH - ME.tlBanner.Height - (ME.btback.Height * 8))
  WITH ME
    .tlBanner.width = ME.width

    .tlStatus.Move(.ClientWidth / 2 - (.tlStatus.Width / 2), .pnlwinhost.top + .pnlwinhost.Height + 8, MdlObjSizer.get_object_width(.tlStatus.text))
    .btback.Move(4, .tlStatus.top + .tlStatus.Height + 4, MdlObjSizer.get_object_width(.btback.Text) + 36)
    .btnext.Move(.pnlWinHost.Left + .pnlWinHost.Width - (.btnext.Width + 8), .btback.Top, MdlObjSizer.get_object_width(.btnext.text) + 36)
    ' for the quit button, it'll get a little tricky
      ' we want that one right in the middle
    .btQuit.Move(.pnlWinHost.Left + (.pnlWinHost.Width / 2) - (.btQuit.Width / 2), .btback.top)
    '.PictureBox1.Move(Desktop.Width / 2 - (.PictureBox1.Width / 2), 4)
    .PictureBox1.Move(.ClientWidth / 2 - (.PictureBox1.Width / 2), 4)
    .tlBanner.Height = .PictureBox1.Height
    .tlBanner.top = .PictureBox1.Top
  END WITH 

END



PUBLIC SUB tvPlan_MouseUp()

  IF tvPlan.Current.Picture <> MdlCore.sCatPic THEN 
  sLast = tvPlan.Current.Key
  END IF

END

PUBLIC SUB btQuit_Click()

  FMain.Close

END



PUBLIC SUB btnext_Click()
  DIM sISONAME AS String
  DIM sDev AS String
  DIM sLang AS String
  DIM i AS Integer
  DIM cb AS CheckBox
  DIM cbox AS ComboBox
  
  MdlCore.WARN_STATUS("")
  'tvPlan.Refresh()
  'FMain.tlStatus.Text = ("Working ... Please wait")
  FMain.btnext.Enabled = FALSE
  
  
  IF LAST.TEXT = ("Restart") THEN 
  'EXEC "shutdown", "-r", " now"
  'EXEC ["init", "6"]
  SHELL "init  6"
  ELSE 
  
  IF FrmLangSel.Visible = TRUE THEN 
  ME.Button1_Click()
  WAIT 
 RETURN 
  
  END IF
    
  ''' IF Application.Args[1] = "-C" THEN  
' ' '     ' navigation for configuration
' ' '               SELECT CASE FrmCurr.Name
' ' '                 CASE "FrmPartSel"
' ' '                 MdlPartSel.SET_LINUX_PARTITION_TYPES()
' ' '                     frmNext = FrmLiloSetup
' ' '                 IF ERROR THEN Message.Error(Error.Where & "<br>" & Error.Text)
' ' '                 CASE "FrmInstallSys"
' ' '                     frmNext = FrmLiloSetup
' ' '                 CASE "FrmLiloSetup"
' ' '                 
' ' '       IF FrmLiloSetup.cbYNLilo.Value = FALSE THEN 
' ' '           IF FrmLiloSetup.cbBootDefault.Text = "" THEN  
' ' '               Message.Warning(("Please select a default operating system to boot before proceeding"))
' ' '               Balloon.Info(("Select an entry from this list"), FrmLiloSetup.cbBootDefault)
' ' '               FMain.btnext.Enabled = TRUE
' ' '               STOP EVENT 
' ' '               RETURN 
' ' '           END IF
' ' '             'Run the setup
' ' '             MdlLilo.TRIGGER_LILO_SETUP()
' ' '       ELSE 
' ' '       FrmLiloSetup.tlBanner.Text = "<b>" & ("Skipping boot loaded setup") & "</b>"
' ' '       END IF
' ' '           'SHELL "mount -o bind /mnt/target/lib /lib && depmod -aq && /etc/rc.d/rc.udev restart"
' ' '       frmNext = FrmZoneSet
' ' '        
' ' '     CASE "FrmZoneSet"
' ' '        'MdlZoneSet.TIME_ZONES()
' ' '        MdlZoneSet.SET_ZONE(Trim(FrmZoneSet.lbTmZone.text))
' ' '        MdlZoneSet.WRITE_CONF()
' ' '        frmNext = FrmRootPass
' ' '        
' ' '     CASE "FrmRootPass"
' ' '       IF FrmRootPass.tbPasswd1.Text <> FrmRootPass.tbPasswd2.Text THEN 
' ' '           Balloon.Error(("Passwords do not match. Please enter the same password twice"), FrmRootPass.tbPasswd2)
' ' '           FrmRootPass.tbPasswd2.SelectAll
' ' '                 RETURN 
' ' '       END IF
' ' '       FrmRootPass.Button1_Click()
' ' '        frmNext = FrmUserAdd
' ' '        
' ' '        
' ' '     CASE "FrmUserAdd"
' ' '       
' ' '         IF MdlUsrAdd.iUsrAccts = 0 THEN 
' ' ' 
' ' '           IF MdlUsrAdd.CREATE_USER_ON_A_SNAP() = FALSE THEN 
' ' '             SELECT CASE Message.Question(("You have not created any user accounts for this system yet. There is not enough information") & "<br>" &
' ' '             ("to create an account here. It is recommended that you create at least one.") & "<br>" &
' ' '              "<br>" & ("Would you like to continue anyway?"), ("Yes"), ("No"))
' ' '                        
' ' '               CASE 2
' ' '                 RETURN 
' ' '             END SELECT 
' ' '             ELSE IF MdlUsrAdd.CREATE_USER_ON_A_SNAP() = TRUE THEN 
' ' '               FrmUserAdd.Button1_Click()
' ' '             END IF
' ' '       END IF
' ' '                 
' ' '       SHELL "cp /mnt/target/etc/modules.conf >/etc/modules.conf" WAIT 
' ' '       SHELL "ifconfig eth0 up" WAIT 
' ' '       SHELL "chmod 700 /mnt/target/home/*"
' ' '       frmNext = FrmNetConf
' ' '       
' ' '       
' ' '     CASE "FrmNetConf"
' ' '         IF Trim(FrmNetConf.txtHostName.Text) = "" THEN 
' ' '           Balloon.Error(("Please specify a hostname for this computer"), FrmNetConf.txtHostName) 
' ' '           RETURN 
' ' '         END IF
' ' '         IF Trim(FrmNetConf.tbDomain.Text) = "" THEN 
' ' '           Balloon.Error(("Please specify the domain this computer belongs to"), FrmNetConf.tbDomain) 
' ' '           RETURN 
' ' '         END IF
' ' '         
' ' '         IF MdlNetConf.ifaceCnt = 0 THEN 
' ' '           MdlNetConf.SET_HOSTNAME(FrmNetConf.txtHostName.Text, FrmNetConf.tbDomain.Text)
' ' '       ELSE ' IF MdlNetConf > 0 THEN     
' ' '             MdlNetConf.SET_HOSTNAME(FrmNetConf.txtHostName.text, FrmNetConf.tbDomain.Text)
' ' '             MdlNetConf.SET_DNS_ADDRESSES()
' ' '             MdlNetConf.WRITE_INET()
' ' '       END IF
' ' '       
' ' '       
' ' '       ' CONFIGURE X QUIETLY HERE
' ' '           Message.Warning(("VectorLinux will now try to detect and configure your graphics hardware.") & "<br>" &
' ' '           ("Your screen may flicker or go blank for a few seconds during this process."))
' ' '       
' ' '         MdlXconf.QUIET_XORG_CONFIGURATION()
' ' '       
' ' '       frmNext = FrmDone
' ' '       
' ' '       CASE "FrmDone"
' ' '           'offer to reboot here
' ' '                    
' ' '           SHELL ["sed", "-i", "'/^$/d'", "/root/gui.log"] WAIT 
' ' '           SHELL ["sed", "-i", "'/^(installer/d'", "/root/gui.log"] WAIT
' ' '           COPY "/root/gui.log" TO "/mnt/target/var/log/setup/gui.log"
' ' '           ME.END_INSTALLER()
' ' '           'frmNext = FrmAlsaConf
' ' ' '      frmNext = FrmLilo ' this is already done
' ' ' 
' ' '   CASE "FrmAlsaConf"
' ' '   
' ' '   frmNext = FrmXconf
' ' '                     
' ' '               END SELECT 
' ' '               
' ' ' 
' ' '    frmNext.Reparent(FrmCurr.Parent)
' ' '               frmNext.Show
              
    
  '''ELSE 
  
  IF ERROR THEN Message(Error.Where & "<br>" & Error.Text)
  
  SELECT CASE FrmCurr.Name ' very nice navigation algoritm

    
    CASE "FrmSelISO"
        sDev = Right(FrmSelISO.lstInstallableImg.Text, Len(FrmSelISO.lstInstallableImg.Text) - InStr(FrmSelISO.lstInstallableImg.text, "/") + 1)
        IF InStr(FrmSelISO.lstInstallableImg.text, ".iso") OR InStr(FrmSelISO.lstInstallableImg.text, ".ISO") THEN 
           sISONAME = Left(FrmSelISO.lstInstallableImg.text, InStr(FrmSelISO.lstInstallableImg.text, " ") - 1)
           MdlSetup.GO_WITH_SELECTED(sDev, sISONAME)
        ELSE
          MdlSetup.GO_WITH_SELECTED(sDev, "")
        END IF
      frmNext = FrmPartScheme
      
        ' Try to determine if partitions are available before offering to select.
        IF MdlSetup.QUICK_PARTITION_PROBE() = 0 THEN 
          FrmPartScheme.rbUseExisting.Enabled = FALSE
          FrmPartScheme.rbUseExisting.ForeColor = Color.Gray
        ELSE 
          FrmPartScheme.rbUseExisting.Enabled = TRUE
          FrmPartScheme.rbUseExisting.foreColor = Color.Black
        END IF
        
      
      
      
    CASE "FrmPartScheme"
        ' The next form is defined from the radio buttons in Frm PartScheme. But let's see if we can display some status text
        
        'FMain.MovieBox1.Refresh
        MdlCore.WARN_STATUS("")
        WITH FrmPartScheme
          IF .rbEditPartitions.Value = TRUE THEN 
            .tlChoiceExp.text = .tlChoiceExp.text & gb.NewLine & gb.NewLine & "<b><br><br>" & ("Please wait while setup attampts to run the partitioning utility") & "</b>"
          ELSE IF .rbUseExisting.Value = TRUE THEN 
            .tlChoiceExp.Text = .tlChoiceExp.Text & gb.NewLine & gb.NewLine & "<b><br><br>" & ("Please wait while setup analyses your current partition setup.") & " <br>" & ("This may take a while ...") & "</b>"
            
          END IF
       
          
          
        END WITH 
        'FMain.MovieBox1.Playing = TRUE
        WAIT 
               
             MdlCore.warn_status_off() 
              
    CASE "FrmPartSel"
      ClsPartSel.sRoot = ""
      FOR EACH cbox IN MdlPartSel.oMountPoints
        IF cbox.Text = "/" THEN 
          ClsPartSel.sRoot = cbox.Tag
        END IF
      NEXT 
        IF NOT ClsPartSel.sRoot OR ClsPartSel.sRoot = "" THEN 
        Message.Error(("You must select a \"/\" partition. This is the target where the system will install to"))
          FMain.btnext.Enabled = TRUE
          
          STOP EVENT 
          RETURN 
        ELSE 
            ' set the partition types
            MdlCore.WARN_STATUS("")
            MdlPartSel.SET_LINUX_PARTITION_TYPES()
          IF ClsPartSel.bDoWin = TRUE THEN 
            frmNext = FrmWinDrives
          ELSE 
            ' move to package selection
            frmNext = FrmPkgSel
          END IF
          
        END IF
        MdlCore.warn_status_off()
    CASE "FrmPkgSel"
        'here we check what kind of install it is, simple  or custom
            'IF FrmPkgSel.rbCustom.Value = TRUE THEN 
              'frmpkg
           ' MdlCore.WARN_STATUS(("Reading available software selection ... Please wait"))
          IF ClsPkgSel.bCustom = TRUE THEN 
              'get the list of selected bulks only
                          
              frmNext = FrmUsrPkgSel
              
            ELSE 
              ' Going for simple install. Now we are ready to summarize
' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '               MdlSummarize.SUMMARIZE_INSTALL
              frmNext = FrmSummary
            END IF
            

    CASE "FrmPkgsel2" ', "FrmUsrPkgSel"
      ' summarize the build
      'MdlCore.WARN_STATUS(("Reading available software selection ... Please wait"))
' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' ' '         MdlSummarize.SUMMARIZE_INSTALL
        frmNext = FrmSummary
        'frmNext = install
  CASE "FrmUsrPkgSel"
    frmNext = FrmSummary
    CASE "FrmWinDrives"
      'Move on to selecting packages
        frmNext = FrmPkgSel
    CASE "FrmSummary"
      '      frmNext = FrmHostPrep ' prepare host
            
      frmNext = FrmInstallSys
      ' ' ' ' ' ' ' FrmCredits.Reparent(FrmInstallSys.embCredits)
      ' ' ' ' ' ' ' FrmCredits.Show()
      ' ' ' ' ' ' ' FrmInstallSys.embCredits.Visible = TRUE
      ' ' ' ' ' ' ' MdlSetup.BEGIN_INSTALLATION()

    CASE "FrmInstallSys"
      MdlInstallSys.WRITE_NEW_DISTRO_ID()
      'moved binding to end of install in MdlInstallCustom.INSTALL_KERNELS
      'MdlConfLilo.PERFORM_BINDING() ' Performs binding mounts for system config
      'frmNext = FrmLilo
      frmNext = FrmLiloSetup
    
    CASE "FrmLiloSetup"
      FOR EACH cb IN MdlLilo.arrLinuxIncCheckboxes
        IF cb.Value = TRUE THEN INC i
      NEXT 
      FOR EACH cb IN MdlLilo.arrWinBootChecks
        IF cb.Value = TRUE THEN INC i
      NEXT
      
      IF i = 0 THEN 
        Message.error(("You have not selected any operating systems for your boot menu.") & "<br>" &
        ("If you wish to bypass the bootloader setup, uncheck the") & Space(1) & "\"" & FrmLiloSetup.cbYNLilo.Text & "\"" & Space(1) & ("checkbox."))
        ME.btnext.Enabled = TRUE
        STOP EVENT
        RETURN 
      END IF
        
      
      MdlCore.WARN_STATUS("")
      IF FrmLiloSetup.cbYNLilo.Value = FALSE THEN 
          IF FrmLiloSetup.cbBootDefault.Text = "" THEN 
              Message.Warning(("Please select a default operating system to boot before proceeding"))
              Balloon.Info(("Select an entry from this list"), FrmLiloSetup.cbBootDefault)
              STOP EVENT 
              RETURN 
          END IF
            'Run the setup
            IF MdlLilo.TRIGGER_LILO_SETUP() > 0 THEN 
              RETURN 
            END IF
      ELSE 
      FrmLiloSetup.tlBanner.Text = "<b>" & ("Skipping boot loader setup") & "</b>"
      MdlCore.WARN_STATUS("Skipping LILO Setup")
      END IF
          'SHELL "mount -o bind /mnt/target/lib /lib && depmod -aq && /etc/rc.d/rc.udev restart"
      frmNext = FrmZoneSet
      
    CASE "FrmLilo"

      'make sure lilo has not been bypassed
        IF FrmLilo.YNLiloBox.Value = FALSE THEN 
            ' do some simple checks to make sure nothing is left blank before proceeding
                IF FrmLilo.cbDefBoot.text = "" THEN 
                    Message.Warning(("Please select a default operating system to boot before proceeding"))
                    Balloon.Info(("Select an entry from this list"), FrmLilo.cbDefBoot)
                    STOP EVENT 
                    RETURN 
                END IF
        ' Now that lilo has been setup, write it to the config
        MdlConfLilo.GENERATE_LILO_DOT_CONF()
        MdlConfLilo.GATHER_OTHER_LINUX_KERNELS_AND_INITRDS()
        MdlConfLilo.WRITE_LILO_DOT_CONF()
        IF MdlConfLilo.EXECUTE_LILO() <> 0 THEN 
        STOP EVENT         
        RETURN 
        ELSE 
          ' lilo installation / setup has been skipped
          FrmLilo.tlBanner.Text = "<b>" & ("Skipping lilo setup") & "</b>"
        END IF
      END IF
       'SHELL "mount -o bind /mnt/target/lib /lib && depmod -aq && /etc/rc.d/rc.udev restart"
      'frmNext = FrmLiloOsList
       frmNext = FrmZoneSet
       
    CASE "FrmZoneSet"
       'MdlZoneSet.TIME_ZONES()
       MdlZoneSet.SET_ZONE(Trim(FrmZoneSet.lbTmZone.text))
       MdlZoneSet.WRITE_CONF()
       frmNext = FrmRootPass
       
    CASE "FrmRootPass"
        
        IF FrmRootPass.tbPasswd1.Text = "" THEN 
          Message.Error(("Please enter the root password. For your security purposes, do not leave this blank"))
          RETURN 
        END IF
        
      IF FrmRootPass.tbPasswd1.Text <> FrmRootPass.tbPasswd2.Text THEN 
          Balloon.Error(("Passwords do not match. Please enter the same password twice"), FrmRootPass.tbPasswd2)
          FrmRootPass.tbPasswd2.SelectAll
                RETURN 
      END IF
      FrmRootPass.Button1_Click()
      
            ' Scan home partition for user home dirs
            IF NOT ClsPartSel.sHome OR ClsPartSel.sHome = ClsPartSel.sRoot OR ClsPartSel.sHome = "" THEN 
              frmNext = FrmUserAdd
            ELSE 
            
            'IF Len(MdlSetup.SCAN_HOME_DIRS(ClsGlobal.sTargetMnt &/ "home")) > 0 THEN 
            IF MdlSetup.SCAN_HOME_DIRS(ClsGlobal.sTargetMnt &/ "home") = 1 THEN ' home dirs were found
                SELECT CASE Message.Question(("Setup has detected existing directories in the partition you selected for /home.") & "<br>" &
                ("Would you like to import these user accounts into your new Operating System"), ("Yes"), ("No"))
                  CASE 1
                    frmNext = FrmImportAccts
                  CASE 2
                  FrmUserAdd.btImportAcct.Enabled = FALSE
                  FrmUserAdd.btImportAcct.ForeColor = Color.Gray
                    frmNext = FrmUserAdd
                END SELECT 
            ELSE 
              frmNext = FrmUserAdd
            END IF
       END IF
       
    CASE "FrmUserAdd"
      
        IF MdlUsrAdd.iUsrAccts = 0 THEN 
          'IF FrmUserAdd.tbUsername.text = "" THEN 
          IF MdlUsrAdd.CREATE_USER_ON_A_SNAP() = FALSE THEN 
            SELECT CASE Message.Question(("You have not created any user accounts for this system yet. There is not enough information") & "<br>" &
            ("to create an account here. It is recommended that you create at least one.") & "<br>" &
             "<br>" & ("Would you like to continue anyway?"), ("Yes"), ("No"))
                       
              CASE 2
                RETURN 
            END SELECT 
            ELSE IF MdlUsrAdd.CREATE_USER_ON_A_SNAP() = TRUE THEN 
              FrmUserAdd.Button1_Click()
            END IF
      END IF
                
      SHELL "cp /mnt/target/etc/modules.conf /etc/modules.conf" WAIT 
      SHELL "ifconfig eth0 up" WAIT 
      SHELL "chmod 700 /mnt/target/home/*"
      frmNext = FrmNetConf
      
      
    CASE "FrmNetConf"
        IF Trim(FrmNetConf.txtHostName.Text) = "" THEN 
          Balloon.Error(("Please specify a hostname for this computer"), FrmNetConf.txtHostName) 
          fmain.btnext.Enabled = TRUE
          RETURN 
        END IF
        IF Trim(FrmNetConf.tbDomain.Text) = "" THEN 
          Balloon.Error(("Please specify the domain this computer belongs to"), FrmNetConf.tbDomain) 
          fmain.btnext.Enabled = TRUE
          
          RETURN 
        END IF
        
        IF MdlNetConf.ifaceCnt = 0 THEN 
          MdlNetConf.SET_HOSTNAME(FrmNetConf.txtHostName.Text, FrmNetConf.tbDomain.Text)
      ELSE ' IF MdlNetConf > 0 THEN     
            MdlNetConf.SET_HOSTNAME(FrmNetConf.txtHostName.text, FrmNetConf.tbDomain.Text)
            MdlNetConf.SET_DNS_ADDRESSES()
            MdlNetConf.WRITE_INET()
      END IF
      

      
      frmNext = FrmDone
      
      CASE "FrmDone"
          'offer to reboot here
                   
          SHELL ["sed", "-i", "'/^$/d'", "/root/gui.log"] WAIT 
          SHELL ["sed", "-i", "'/^(installer/d'", "/root/gui.log"] WAIT
          COPY "/root/gui.log" TO "/mnt/target/var/log/setup/gui.log"
          ME.END_INSTALLER()
          'frmNext = FrmAlsaConf
'      frmNext = FrmLilo ' this is already done

  CASE "FrmAlsaConf"
  
  frmNext = FrmXconf

  
  END SELECT 
                       

  frmNext.Reparent(ME.pnlWinHost)
  frmNext.ResizeScaled(pnlwinhost.Width, pnlwinhost.Height)


  FrmCurr.Hide
  frmLast = FrmCurr
    'IF ClsGlobal.sBackNav.Find(FrmCurr) = -1 THEN 
     ' ClsGlobal.sBackNav.Add(FrmCurr)
    'END IF
      IF FrmCurr.Name <> "FrmDiskPart" THEN 
    IF ClsGlobal.sBackNav.Find(frmNext) = -1 THEN 
    ClsGlobal.sBackNav.Add(frmNext)
    '  IF ClsGlobal.sBackNav.Find(FrmCurr) = -1 THEN ClsGlobal.sBackNav.Add(FrmCurr)
    END IF
    END IF
    IF frmNext.name <> "FrmInstallSys" THEN 
      frmNext.Show
    ELSE 
      frmNext.Show
      WAIT 1
      FrmCredits.Reparent(FrmInstallSys.embCredits)
      FrmCredits.Show()
      FMain.tvPlan["Inst0"].Picture = MdlCore.sDonePic
      FMain.tvPlan["Inst1"].Picture = MdlCore.sNowPic
      FMain.tvPlan["Inst1"].Selected = TRUE
      MdlSetup.BEGIN_INSTALLATION()
    END IF

  END IF
'''END IF
tvPlan.Refresh()
IF ClsGlobal.sBackNav.Find(FrmCurr) = -1 THEN ClsGlobal.sBackNav.Add(FrmCurr)
'FMain.tlStatus.Text = ""
MdlCore.warn_status_off
ME.tvPlan.Refresh()
END


PUBLIC SUB END_INSTALLER()

    ' Check for /tmp/status in the target installation
      IF Exist(ClsGlobal.sTargetMnt &/ "tmp" &/ "status") = FALSE THEN 
        REPEAT 
          WAIT 
        UNTIL Exist(ClsGlobal.sTargetMnt &/ "tmp" &/ "status") = TRUE
      END IF


  
  
END




PUBLIC SUB btback_Click()

   DIM iKey AS Integer
   DIM frm AS Form

    fmain.btback.Enabled = FALSE
    iKey = ClsGlobal.sBackNav.Find(FrmCurr)
      IF iKey <> -1 THEN 
      IF iKey - 1 < 0 THEN RETURN 
        frm = ClsGlobal.sBackNav[iKey - 1]
        ClsGlobal.sBackNav.Delete(iKey)
          WITH FMain
            .tvPlan.MoveBack
          END WITH 
      'FrmCurr.Hide
      FrmCurr.Close()
      frm.Show
      ClsGlobal.sBackNav.Add(frm)
      END IF
      fmain.btnext.Enabled = TRUE
      
      
fmain.btback.Enabled = TRUE
END

PUBLIC SUB Button1_Click()

DIM sLang AS String = FrmLangSel.lblangsel.Current.Key

IF sLang = "es" THEN sLang = "es_ES"
IF sLang = "ru" THEN sLang = "ru_RU.utf8"
IF sLang = "nn_NO" THEN sLang = "nn_NO.utf8"
System.Language = sLang

  FMain.Close
  'FrmSelISO.Close
  
  'Message(System.Language)
  MdlCore.frmInit = FrmSelISO
  MdlCore.main
  FMain.btnext.Enabled = TRUE


END

PUBLIC SUB tvPlan_MouseDown()

  tvPlan.MoveLast()
  RETURN 

END

PUBLIC SUB tvPlan_Click()

STOP EVENT 

END

PUBLIC SUB PnlRight_MouseDown()

  

END
