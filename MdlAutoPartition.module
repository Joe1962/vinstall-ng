' Gambas module file

'    This file is part of vinstall-ng

'    vinstall-ng is free software: you can redistribute it and/or modify
'    it under the terms of the GNU General Public License as published by
'    the Free Software Foundation, either version 2 of the License, or
'    (at your option) any later version.

'    vinstall-ng  is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'    GNU General Public License for more details.

'    You should have received a copy of the GNU General Public License
'    along with vinstall-ng.  If not, see <http://www.gnu.org/licenses/>.
PRIVATE sMountedList AS String
PUBLIC objProgs AS Object[]
PUBLIC objSliders AS Object[]
PUBLIC objTls AS Object[]
PUBLIC sResizableList AS String[]
PUBLIC objContainters AS Object[]
PUBLIC objRbs AS Object[]
PRIVATE picDrive AS Picture
PRIVATE myProgs AS Object[]

PUBLIC sPartitionToShrink AS String
PUBLIC lMBAmmountToUseForVL AS Long


PUBLIC FUNCTION PERFORM_AUTO_PARTITION_FROM_FREE_SPACE(sPartition AS String) AS Integer
  
  ' trigger the automatic partitioning process.
  DIM hproc AS Process
  DIM sPartitionString, sFs, sResizeCommand, sDump, sPartPrefx AS String
  DIM sLine, partedDump, sMountDumpArr AS String[]
  DIM lCurrentSize AS Long
  DIM i, iPart AS Integer
  DIM lEndMark AS Long
  DIM bSwapNeeded AS Boolean
  DIM sSwapPart, sRootPart AS String
  
  lMBAmmountToUseForVL = ClsGlobal.lTotalMBforVL
  
  PRINT " --- -> Preparing to allocate " & lMBAmmountToUseForVL & " MB of space for VectorLinux from " & sPartition & " <- ---"
  WAIT 1
    iPart = Right(sPartition, Len(sPartition) - Len("/dev/hda"))
      IF iPart < 10 THEN 
        sPartPrefx = " " 
      ELSE 
        sPartPrefx = ""
      END IF
      
    ' search for the partition information
      FOR i = 0 TO sResizableList.Max
        IF Left(Trim(sResizableList[i]), Len("/dev/hda1")) = Trim(sPartition) THEN 
          sPartitionString = Trim(sResizableList[i])
        END IF
      NEXT ' we got the partition string now
      
      ' Ths string is formatted like this
      ' Filesystem    Type   1M-blocks      Used Available Use% Mounted on
      
      ' split it in spaces
      sLine = Split(sPartitionString, " ")
        sFs = Trim(sLine[1])
        lCurrentSize = sLine[2]
      
      IF lMBAmmountToUseForVL <= 0 THEN 
        Message.Error("I dont know how much space to use for VL")
          RETURN 
      END IF
      
      SELECT CASE sFs
        CASE "ntfs", "NTFS"
          sResizeCommand = "ntfsresize -s " & (lCurrentSize - lMBAmmountToUseForVL) & "m" & Space(1) & sPartition
        CASE "ext2", "ext3", "*fat*", "hfsx", "hfs+", "hfs", "linux-swap"
          SHELL "parted " & Left(sPartition, Len("/dev/hda")) & " unit mb print | tr -s \' \',\"\" | grep \"^" & sPartPrefx & iPart & "\"" TO sDump
            sDump = Trim(sDump)
            'Number Start End     Size    Type   File system Flags
            '1    0.03MB 12256MB 12256MB primary reiserfs 
            partedDump = Split(sDump, " ")
            lEndMark = Trim(partedDump[2])
            sResizeCommand = "parted " & sPartition & " unit mb resize " & iPart & Space(1) & Trim(partedDump[1]) & "m" & Space(1) & lEndMark - lMBAmmountToUseForVL & "m"
        CASE "reiserfs"
           'r resize_reiserfs -s -1G /dev/hda8 ( see man resize_reiserfs )
           sResizeCommand = "resize_reiserfs -s -" & lMBAmmountToUseForVL & "M" & Space(1) & sPartition
           
        CASE ELSE 
          Message.Error("I dont know how to resize a pertition type " & sFs)
      END SELECT 
      
  
  'Message(sResizeCommand)
      ' MAKE SURE THE PARTITION IS NOT MOUNTED BEFORE PROCEEDING
      SHELL "mount | grep ^" & sPartition TO sDump
      sDump = Trim(sDump)
      sMountDumpArr = Split(sDump, "\n")
        FOR i = 0 TO sMountDumpArr.Max
          SHELL "umount -f " & sPartition
        NEXT 
  
  ' Just to make sure
    SHELL "mount | grep ^" & sPartition TO sDump
      sDump = Trim(sDump
        IF Len(sDump) > 0 THEN 
          Message.Error(sPartition & Space(1)("is currently being used. Unable to umount it.") & "<br>" &
          ("Try another partitioning method"))
          RETURN 1
        END IF
    
          
  ' run the actual command
    hproc = SHELL sResizeCommand WAIT 
      IF hproc.Value > 0 THEN 
        RETURN hproc.Value
      END IF
      
  ' create new partitions now that we're here ============================================================================================
    ' do we need to create a swap partition?
      SHELL "probepart | grep -i \"linux swap\"" TO sDump
        sDump = Trim(sDump)
          IF sDump THEN 
            bSwapNeeded = FALSE
            sDumparr = Split(sDump, "\n")
            sLine = Split(sDumparr[0], " ")
            sSwapPart = Trim(sLine[0])
          ELSE 
            bSwapNeeded = TRUE
          END IF
          
    
  
      
    
        
        
  
  
  
END




PUBLIC SUB DISPLAY_PARTITIONS_WITH_FREE_SPACE(hostContainer AS Container)
  
  DIM sDump, sPreMountList, sDfDump, sDrives, sPartition, sPartShort AS String
  DIM sResults, sDumparr, sLineArr AS String[]
  DIM sPost, sFinalList AS String
  DIM lFreeMB, lTotalMB, lUsedMB AS Long
  DIM i, n AS Integer
  DIM rb AS RadioButton
  DIM pb AS ProgressBar
  DIM sl AS Slider
  DIM hb AS hpanel
  DIM tl AS TextLabel
  DIM hr AS Separator
  DIM picb AS PictureBox
  DIM hobox AS Panel
  
  objProgs = NEW Object[]
  objSliders = NEW Object[]
  sResizableList = NEW String[]
  objTls = NEW Object[]
  objRbs = NEW Object[]
  objContainters = NEW Object[]
  myProgs = NEW Object[]

  
  picDrive = Picture.Load("images/hdd.png")
  PRINT " ---\\_ Shrink existing partitions to make room for VL"  

  WAIT 
    
  SHELL "df -Th | grep \"^/dev/\" | cut -f 1 -d \' \'" TO sPreMountList '| tr -s \' \',\"\"" TO sPreMountList
  'Message(sPreMountList)
    sDumparr = Split(sPreMountList, "\n")
      FOR i = 0 TO sDumparr.Max
        IF InStr(sFinalList, Trim(sDumparr[i])) = FALSE THEN 
          SHELL "df -Tm | grep \"" & Trim(sDumparr[i]) & "\" | tr -s \' \', \"\"" TO sDump
          sFinalList = sFinalList & sDump
        END IF
      NEXT        
  
  
  SHELL "probepart | grep \"^/dev/\" | tr -s \' \',\"\" | cut -f 1 -d \' \'" TO sDump
  'Message(sDump)
    sDump = Trim(sDump)
    sDumparr = Split(sDump, "\n")
      FOR i = 0 TO sDumparr.Max
        sPartition = Trim(sDumparr[i])
        sPartShort = Right(sPartition, Len(sPartition) - RInStr(sPartition, "/"))
        'Message(sPartShort)
        'sMountedList = sMountedList & sPartition & " "
        'IF InStr(sMountedList, sPartition) = FALSE THEN 
        'IF NOT InStr(Trim(sPreMountList), Trim(sPartition)) THEN 
        'IF InStr(Trim(sPreMountList), Trim(sPartition)) = FALSE THEN 
        IF InStr(sFinalList, Trim(sPartition)) = FALSE THEN 
          'Message(sPartition & " is not in the pre-mounted list")
          SHELL "mkdir -p /mnt" &/ sPartShort & " 2> /dev/null" WAIT 
          SHELL "mount -o ro " & sPartition & Space(1) & "/mnt" &/ sPartShort & " 2> /dev/null" WAIT 
          'SHELL "df -Th | grep \"^" & sPartition & "\" | head -n 1 | tr -s \' \',\"\"" TO sDump
          SHELL "df -Tm /mnt" &/ sPartShort & " | grep \"^/dev/\"| tr -s \' \',\"\"" TO sDump
          'Message(sDump)
          'sPost = sPost & sDump
          IF InStr(sFinalList, sDump) = FALSE THEN 
          IF InStr(sDump, ClsGlobal.sSourceAddr) = FALSE THEN 
          sFinalList = sFinalList & sDump
          END IF
          END IF
          SHELL "umount -f /mnt" &/ sPartShort & " 2> /dev/null" WAIT 
          
        END IF
          
      NEXT 
      
  
     'Message(sFinalList)
     sFinalList = Trim(sFinalList)
     sResults = Split(sFinalList, "\n")
      FOR i = 0 TO sResults.Max
        ' Message(Trim(sResults[i]))
        sLineArr = Split(Trim(sResults[i]), " ")
        lTotalMB = Trim(sLineArr[2])
        lUsedMB = Trim(sLineArr[3])        
        lFreeMB = Trim(sLineArr[4])
        'Message(sLineArr[0] & Space(1) & "fREE SPACE " & sLineArr[4] & " Mb") 
        
        IF lFreeMB >= 10240 THEN ' only if free space is equal to or greater than 10GB
          IF Trim(sLineArr[1]) <> "*xfs*" OR Trim(sLineArr[1]) <> "*jfs*" THEN  'only if fs is not xfs or jfs
        sResizableList.Add(Trim(sResults[i]))
        rb = NEW RadioButton(hostContainer) AS "PartitionOptions"
          WITH rb
            .Text = Trim(sLineArr[0]) & Space(1) & "-" & Space(1) & Trim(sLineArr[4]) & Space(1) & ("MB of free space") 
            .tag = Trim(sLineArr[0])
            .Height = 21
            .Expand = TRUE
          END WITH 
          objRbs.Add(rb)


        hb = NEW hpanel(hostContainer)
          WITH hb
            .Expand = TRUE
            .Height = 72
            .Tag = Trim(sLineArr[0])
            .Visible = FALSE
          END WITH 
          objContainters.Add(hb)
               

          
          hr = NEW Separator(hb)
            WITH hr
              .Expand = TRUE
              .Height = 8
              .tag = Trim(sLineArr[0])
            END WITH 
          hobox = NEW Panel(hb)
            WITH hobox
              .Height = 21
              '.Width = .Parent.Width / 2
              .Tag = Trim(sLineArr[0])
              .Expand = TRUE
              .Arrangement = Arrange.Row
              '.Padding = 4
              .BackColor = Color.LightBackground
            END WITH 
          'panels.Add(hobox)
          tl = NEW TextLabel(hobox)
            WITH tl
              .BackColor = Color.SelectedBackground
              .Expand = FALSE
              .Text = ("Existing Data")
              .Width = .Parent.Width / 2
              '.Width = .Parent.Width - (((lUsedMB + (4 * 1024)) + (lFreeMB / 2) / lFreeMB) / 100) * 100
              .Height = .Parent.Height
              .Alignment = Align.Center
              '.Visible = TRUE
              .tag = .Parent.Tag
            END WITH 
            myProgs.Add(tl)
          tl = NEW TextLabel(hobox)
            WITH tl
              .Text = ClsGlobal.sDistroName
              .Height = .Parent.Height
              '.Width = .Parent.Width * 0.5
              .Expand = TRUE
              .BackColor = Color.LightBackground
              .Alignment = Align.Center
              .Tag = .Parent.Tag & "R"
            END WITH 
 
          tl = NEW TextLabel(hb)
            WITH tl
              .Text = ("Total space for VectorLinux") & ":" & Space(1)
              .Height = 21
              '.Width = .Parent.Width * 0.5
              .Alignment = Align.Left
              .BackColor = Color.Transparent
              .Expand = TRUE
              .tag = Trim(sLineArr[0])
            END WITH 
              objTls.Add(tl)
          
            
               
          sl = NEW Slider(hb) AS "Slider"
            WITH sl
              .Tag = Trim(sLineArr[0])
              .Height = 21
              .Expand = TRUE
              .Value = ((lUsedMB + (4 * 1024)) + (lFreeMB / 2) / lFreeMB) / 100
              ' IF pb.Value < 0.5 THEN 
              ' .Value = 50
              ' ELSE 
              ' .Value = (pb.Value * 100) + ((pb.Value * 100) / 2) '/ 2
              ' END IF
              '.Value = 50
            END WITH 
            objSliders.Add(sl)
          hr = NEW Separator(hb)
          WITH hr
          .Expand = TRUE
          .Height = 4
          .Tag = Trim(sLineArr[0])
          END WITH 

              
        ' hb = NEW HBox(hostContainer)
        '   WITH hb
        '     .Height = 12
        '     .Expand = TRUE
        '   END WITH 

        END IF
      END IF
      NEXT 
   
   IF objContainters.count > 0 THEN objContainters[0].visible = TRUE
    FOR EACH tl IN myProgs
      FOR EACH sl IN objSliders
        IF tl.Tag = sl.tag THEN 
        'Message(sl.value)
          tl.Width = tl.Parent.Width / 2
        END IF
      NEXT 
    NEXT 
   
   
   
END



  
PUBLIC SUB Slider_change()
  
  DIM pb AS ProgressBar
  DIM hb AS Panel
  DIM fMin AS Float
  DIM fVal AS Float
  DIM i AS Integer
  DIM sMatch AS String
  DIM sLine AS String[]
  DIM lFree, lMin, ltotal, lval AS Long
  DIM tl, tlr AS TextLabel
  DIM sAllocated AS Long
  
    ' FOR EACH pb IN objProgs
    ' 
    '   IF pb.tag = LAST.tag THEN fMin = pb.Value * 100
      FOR i = 0 TO sResizableList.Max
        IF Left(Trim(sResizableList[i]), Len("/dev/hda1")) = LAST.tag THEN 
          
        'Message("fount match")
          sMatch = Trim(sResizableList[i])
          sLine = Split(sMatch, " ")
          lFree = sLine[4]
          lTotal = Trim(sLine[2])
          lMin = lFree + (4 * 1024)
          lval = (lMin / lTotal) * 10

        END IF
      NEXT 
    'NEXT 
    fmin = (LAST.value / 100)
    'Message(fmin)
    sAllocated = ltotal - (lTotal * fMin)
    LAST.tooltip = ("Select the location to which we will resize") & Space(1) & LAST.tag
    FOR EACH tl IN objTls
      IF tl.Tag = LAST.tag THEN 
      
        tl.Text = ("Total space for VectorLinux") & ":" & Space(1) & (100 - LAST.Value) & "%" & Space(1) & "-" & " ( " & sAllocated & " MB )"
      'lMBAmmountToUseForVL = sAllocated  
      ClsGlobal.lTotalMBforVL = sAllocated
      END IF
    NEXT 

  FOR EACH tl IN myProgs
    IF tl.tag = LAST.tag THEN 
      tl.Width = tl.Parent.Width * (LAST.value / 100)      
      
    END IF
      
  NEXT 

IF sAllocated <= (4 * 1024) THEN 
  Message("We need at least 4GB for vectorlinux")
  STOP EVENT 
  RETURN 
END IF

  IF LAST.Value < lval THEN 
    LAST.Value = lval
      Message("This is the minimum we can resize this partition to.")
    STOP EVENT 
    RETURN 
  END IF
  
END

PUBLIC SUB PartitionOptions_Click()
  
  DIM hb AS HPanel
  FOR EACH hb IN objContainters
    IF hb.tag = LAST.tag THEN 
      hb.visible = TRUE
    ELSE 
      hb.visible = FALSE
    END IF
  NEXT 
END


