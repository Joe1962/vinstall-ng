' Gambas module file

' ### SYSTEMWIDE SUBROUTINES ###

PUBLIC SUB DrivePartInfo()
' Get available drives and partitions with fdisk:
DIM sTemp AS String

Global.DiskInfo.Clear
Global.PartInfo.Clear

IF Global.SimulationMode = FALSE THEN
   EXEC ["fdisk", "-l"] TO sTemp
ELSE
   ' 4 debug:
   ' English:
   sTemp = Chr$(10)
   sTemp = sTemp & "Disk /dev/hda: 40,0 GB, 40060403712 bytes" & Chr$(10)
   sTemp = sTemp & "255 heads, 63 sectors/track, 4870 cylinders" & Chr$(10)
   sTemp = sTemp & "Units = cylinders of 16065 * 512 = 8225280 bytes" & Chr$(10)
   sTemp = sTemp & Chr$(10)
   sTemp = sTemp & "   Device Boot      Start         End      Blocks   Id  System" & Chr$(10)
   sTemp = sTemp & "/dev/hda1   *           1        1044     8385898+   7  HPFS/NTFS" & Chr$(10)
   sTemp = sTemp & "/dev/hda2            1045        1110      530145   82  Linux swap" & Chr$(10)
   sTemp = sTemp & "/dev/hda4            1111        4870    30202200    f  W95 Ext'd (LBA)" & Chr$(10)
   sTemp = sTemp & "/dev/hda5            1111        2415    10482381   83  Linux" & Chr$(10)
   sTemp = sTemp & "/dev/hda6            2416        4219    14490598+   c  W95 FAT32 (LBA)" & Chr$(10)
   sTemp = sTemp & "/dev/hda7            4220        4870     5229126   83  Linux" & Chr$(10)
   sTemp = sTemp & Chr$(10)
   sTemp = sTemp & "Disk /dev/sda: 258.0 MB, 258473984 bytes" & Chr$(10)
   sTemp = sTemp & "8 heads, 62 sectors/track, 1017 cylinders" & Chr$(10)
   sTemp = sTemp & "Units = cylinders of 496 * 512 = 253952 bytes" & Chr$(10)
   sTemp = sTemp & Chr$(10)
   sTemp = sTemp & "   Device Boot      Start         End      Blocks   Id  System" & Chr$(10)
   sTemp = sTemp & "/dev/sda1               1        1017      252185    b  W95 FAT32" & Chr$(10)
   ' Spanish:
   'sTemp = Chr$(10)
   'sTemp = sTemp & "Disco /dev/hda: 40.0 GB, 40060403712 bytes" & Chr$(10)
   'sTemp = sTemp & "255 cabezas, 63 sectores/pista, 4870 cilindros" & Chr$(10)
   'sTemp = sTemp & "Unidades = cilindros de 16065 * 512 = 8225280 bytes" & Chr$(10)
   'sTemp = sTemp & Chr$(10)
   'sTemp = sTemp & "Disposit. Inicio    Comienzo      Fin      Bloques  Id  Sistema" & Chr$(10)
   'sTemp = sTemp & "/dev/hda1   *           1        1044     8385898+   7  HPFS/NTFS" & Chr$(10)
   'sTemp = sTemp & "/dev/hda2            1045        1110      530145   82  Linux swap" & Chr$(10)
   'sTemp = sTemp & "/dev/hda4            1111        4870    30202200    f  W95 Ext'd (LBA)" & Chr$(10)
   'sTemp = sTemp & "/dev/hda5            1111        2415    10482381   83  Linux" & Chr$(10)
   'sTemp = sTemp & "/dev/hda6            2416        4219    14490598+   c  W95 FAT32 (LBA)" & Chr$(10)
   'sTemp = sTemp & "/dev/hda7            4220        4870     5229126   83  Linux" & Chr$(10)
   'sTemp = sTemp & Chr$(10)
   'sTemp = sTemp & "Disco /dev/sda: 258 MB, 258473984 bytes" & Chr$(10)
   'sTemp = sTemp & "8 cabezas, 62 sectores/pista, 1017 cilindros" & Chr$(10)
   'sTemp = sTemp & "Unidades = cilindros de 496 * 512 = 253952 bytes" & Chr$(10)
   'sTemp = sTemp & Chr$(10)
   'sTemp = sTemp & "Disposit. Inicio    Comienzo      Fin      Bloques  Id  Sistema" & Chr$(10)
   'sTemp = sTemp & "/dev/sda1               1        1017      252185    b  W95 FAT32" & Chr$(10)
ENDIF

' Parse what fdisk has to say:
ProcessDiskInfo(sTemp)


END

PUBLIC SUB ProcessDiskInfo(sTemp AS String)
' Parse what fdisk has to say, including other commands for useful hard-drive/partition information
DIM vDI AS NEW cDiskInfo
DIM vPI AS NEW cPartInfo
DIM arrTemp1 AS NEW String[]
DIM arrTemp2 AS NEW String[]
DIM arrTemp3 AS NEW String[]
DIM sTemp2 AS String
DIM iDisk AS Long
DIM iPart AS Long
DIM iDiskUsedBytes AS Long
DIM pos AS Long
DIM n AS Long, m AS Long
DIM pcounter AS Long

' 4 debug:
IF Global.DebugMode = TRUE THEN
   message.Info("Working in Simulation Mode..." & gb.NewLine & sTemp)
ENDIF

' Parse fdisk
arrTemp1 = Split(sTemp, Chr$(10))
FOR n = 0 TO arrTemp1.Max
   pos = InStr(arrTemp1[n], "/dev/")
   
   IF pos = 1 ' Parse a partition.
      vPI = NEW cPartInfo
      arrTemp2 = Split(arrTemp1[n], Space$(1), "", TRUE)
      vPI.Device = arrTemp2[0]
      IF Trim(arrTemp2[1]) = "*" THEN
         vPI.Bootable = TRUE
         vPI.StartBlock = arrTemp2[2]
         vPI.EndBlock = arrTemp2[3]
         IF Right$(arrTemp2[4]) = "+" THEN
            vPI.Bytes = CLng(Val(Left$(arrTemp2[4], Len(arrTemp2[4]) - 1))) * 1024
         ELSE
            vPI.Bytes = CLng(Val(arrTemp2[4])) * 1024
         ENDIF
         vPI.ID = arrTemp2[5]
      ELSE
         vPI.Bootable = FALSE
         vPI.StartBlock = arrTemp2[1]
         vPI.EndBlock = arrTemp2[2]
         IF Right$(arrTemp2[3]) = "+" THEN
            vPI.Bytes = CLng(Val(Left$(arrTemp2[3], Len(arrTemp2[3]) - 1))) * 1024
         ELSE
            vPI.Bytes = CLng(Val(arrTemp2[3])) * 1024
         ENDIF
         vPI.ID = arrTemp2[4]
      ENDIF
      
      'Get filesystem information from "disktype"
      IF Functions.getPartType(vPI.ID) = "Extended" THEN 
         vPI.FileSystem = "Extended"
      ELSE IF Functions.getPartType(vPI.ID) = "HPFS/NTFS" THEN 
         vPI.FileSystem = "NTFS"
      ELSE      
         SHELL "disktype " & vPI.Device TO sTemp2
         sTemp2 = Trim$(sTemp2)
         arrTemp3 = Split(sTemp2, Chr$(10))
         vPI.FileSystem = Trim$(Left$(arrTemp3[2], InStr(arrTemp3[2], Space$(1))))
      ENDIF
      
      'Get free space information for each partition based on the filesystem
      IF vPI.FileSystem = "Blank" THEN 
         vPI.FreeBytes = vPI.Bytes
      ELSE 
         vPI.FreeBytes = Functions.getFreePartSpace(vPI.Device, vPI.FileSystem)
      ENDIF
      
      Global.PartInfo.Push(vPI)
   ELSE IF pos > 1 ' Parse a disk drive.
      vDI = NEW cDiskInfo
      arrTemp2 = Split(arrTemp1[n], ":,", "", TRUE)
      vDI.Device = Trim$(Mid$(arrTemp2[0], InStr(arrTemp2[0], "/dev")))
      IF Val(arrTemp2[2]) > 0 THEN
         vDI.Bytes = Val(arrTemp2[2])
      ELSE
         vDI.Bytes = Val(arrTemp2[3])
      ENDIF

      Global.DiskInfo.Push(vDI)
   ELSE ' Nothing.
   END IF
NEXT

'Get unallocated space on the hard-drives (it would be cool to have this in the main FOR loop...
'but its only possible after knowing each partiton's size)
FOR iDisk = 0 TO Global.DiskInfo.Max
   iDiskUsedBytes = 0 'Reset the used-bytes counter
   FOR iPart = 0 TO Global.PartInfo.Max
      IF InStr(Global.PartInfo[iPart].Device, Global.DiskInfo[iDisk].Device) THEN
         IF Global.PartInfo[iPart].FileSystem <> "Extended" THEN 'Ignore extended partitions, only account for primary and logical ones
            iDiskUsedBytes = iDiskUsedBytes + Global.PartInfo[iPart].Bytes
         ENDIF
      ENDIF 
   NEXT 
   Global.DiskInfo[iDisk].UnallocatedBytes = Global.DiskInfo[iDisk].Bytes - iDiskUsedBytes
   'PRINT global.DiskInfo[iDisk].UnallocatedBytes 'for debug
NEXT 



' 4 debug:
IF Global.DebugMode = TRUE THEN
   FOR n = 0 TO Global.DiskInfo.Max
      frmGo.TextLabel1.Text &= Global.DiskInfo[n].Device & ": " & Global.DiskInfo[n].Bytes & " bytes" & " <br>"
   NEXT
   frmGo.TextLabel1.Text &= "<br>"
   FOR n = 0 TO Global.PartInfo.Max
      frmGo.TextLabel1.Text &= Global.PartInfo[n].Device & " <br>"
      frmGo.TextLabel1.Text &= "Bootable= " & Str(Global.PartInfo[n].Bootable) & " <br>"
      frmGo.TextLabel1.Text &= "Start block= " & Global.PartInfo[n].StartBlock & " <br>"
      frmGo.TextLabel1.Text &= "End block= " & Global.PartInfo[n].EndBlock & " <br>"
      frmGo.TextLabel1.Text &= "Num. Blocks= " & Global.PartInfo[n].Blocks & " <br>"
      frmGo.TextLabel1.Text &= "Part. ID= " & Global.PartInfo[n].ID & ", " & Functions.getPartType(Global.PartInfo[n].ID) & " <br>"
      frmGo.TextLabel1.Text &= "<br>"
   NEXT
ENDIF

END


PUBLIC SUB GetSysMemory()
'Find system memory by reading the first line of /proc/meminfo
DIM hMemInfo AS File
DIM sLine AS String

OPEN "/proc/meminfo" FOR READ AS #hMemInfo
   LINE INPUT #hMemInfo, sLine
CLOSE hMemInfo

sLine = Trim$(Mid$(Left$(sLine, RInStr(sLine, " ")), InStr(sLine, " "))) 'Isolate the memory size string (which is in KB)
Global.SysMemory = Val(sLine) * 1024 'Convert the value to bytes

END

PUBLIC SUB GetPkgInfo()

DIM vPKG AS NEW cPackageInfo
DIM hConfFile AS File
DIM sLine AS String
DIM i AS Integer

'Parse the bulk and config packages first (these are the most important)
OPEN Global.SOURCE & "veclinux/SETUP.CONF" FOR READ AS #hConfFile
   WHILE NOT Eof(hConfFile)
      LINE INPUT #hConfFile, sLine
      vPKG = NEW cPackageInfo
      
      'The parser needs to understand bash-like comments, so ignore anything to the right of a hash (#):
      IF InStr(sLine, "#") THEN 
         sLine = Trim(Right(sLine, InStr(sLine, "#") - 1))
      ENDIF
      
      'Here is an example of what is going to be parsed by this section:
      ' BULK0='required/veclinux.tlz:971650:Base system (Base System)'
      ' BULK3='optional/dev.tlz:431371:dev tools (gcc, make, etc)'
      ' CONF1='required/vlconfig2.tlz:17613:Base system (config Files)'
      
      IF InStr(sLine, "BULK") OR InStr(sLine, "CONF") THEN 
         vPKG.PkgName = Mid(Left(sLine, InStr(sLine, ":") - 1), InStr(sLine, "/") + 1)
         vPKG.PkgCategory = Mid(Left(sLine, InStr(sLine, "/") - 1), InStr(sLine, "'") + 1)
         vPKG.PkgComment = Mid(Left(sLine, RInStr(sLine, "'") - 1), RInStr(sLine, ":") + 1)
         vPKG.PkgPath = Global.SOURCE & "veclinux/" & vPKG.PkgCategory & "/" & vPKG.PkgName
         vPKG.PkgSize = Val(Mid(Left(sLine, RInStr(sLine, ":") - 1), InStr(sLine, ":") + 1)) * 1024   
         Global.PackageInfo.Push(vPKG)
      ENDIF       
   WEND 
CLOSE #hConfFile

'Parse the "extra" packages
OPEN Global.SOURCE & "packages/PACKAGES.TXT" FOR READ AS #hConfFile
   vPKG = NEW cPackageInfo
   WHILE NOT Eof(hConfFile)
      LINE INPUT #hConfFile, sLine
      
      vPKG.PkgCategory = "extra"
      vPKG.PkgComment = ""
            
      IF InStr(sLine, "PACKAGE NAME") THEN 
         vPKG.PkgName = Trim(Mid(sLine, InStr(sLine, ":") + 1))
      ELSE IF InStr(sLine, "LOCATION") THEN 
         vPKG.PkgPath = Global.SOURCE & "packages/" & Trim(Mid(sLine, InStr(sLine, "/") + 1)) & "/" & vPKG.PkgName
      ELSE IF InStr(sLine, "SIZE (uncompressed)") THEN 
         vPKG.PkgSize = Val(Trim$(Mid(Left(sLine, RInStr(sLine, "K") - 1), InStr(sLine, ":") + 1))) '* 1024
      ELSE IF Trim(sLine) = "" THEN 'An empty line marks the end of the package info, so push the data before moving on
         Global.PackageInfo.Push(vPKG)
         vPKG = NEW cPackageInfo
      ENDIF      
   WEND 
CLOSE #hConfFile


'For debugging
' FOR i = 0 TO Global.PackageInfo.Max
' PRINT Global.PackageInfo[i].PkgName
' PRINT Global.PackageInfo[i].PkgCategory
' PRINT Global.PackageInfo[i].PkgComment
' PRINT Global.PackageInfo[i].PkgPath
' PRINT Global.PackageInfo[i].PkgSize
' PRINT "-----"
' NEXT
      
         

  
END



PUBLIC SUB DestroyAllPartitions(dev AS String)
'THIS WILL DELETE ALL THE PARTITIONS ON A SELECTED DRIVE!
DIM iPart AS Integer

FOR iPart = 1 TO Global.PartInfo.Length
   SHELL "parted " & dev & " rm " & iPart
NEXT 
  
END



PUBLIC SUB BUTTdisable()
' Disable all frmMain buttons:

' Save state first:
BUTTsave

' Then disable:
frmMain.btnMain_1.Enabled = FALSE
frmMain.btnMain_2.Enabled = FALSE
frmMain.btnMain_3.Enabled = FALSE
frmMain.btnMain_4.Enabled = FALSE
frmMain.btnMain_5.Enabled = FALSE
frmMain.btnMain_6.Enabled = FALSE
frmMain.btnTools.Enabled = FALSE
frmMain.btnExit.Enabled = FALSE

END

PUBLIC SUB BUTTsave()
' Save state of all frmMain buttons:

frmMain.btnMain_1.Tag = frmMain.btnMain_1.Enabled
frmMain.btnMain_2.Tag = frmMain.btnMain_2.Enabled
frmMain.btnMain_3.Tag = frmMain.btnMain_3.Enabled
frmMain.btnMain_4.Tag = frmMain.btnMain_4.Enabled
frmMain.btnMain_5.Tag = frmMain.btnMain_5.Enabled
frmMain.btnMain_6.Tag = frmMain.btnMain_6.Enabled
frmMain.btnTools.Tag = frmMain.btnTools.Enabled
frmMain.btnExit.Tag = frmMain.btnExit.Enabled

END

PUBLIC SUB BUTTrest()
' Restore saved state of all frmMain buttons:

frmMain.btnMain_1.Enabled = frmMain.btnMain_1.Tag
frmMain.btnMain_2.Enabled = frmMain.btnMain_2.Tag
frmMain.btnMain_3.Enabled = frmMain.btnMain_3.Tag
frmMain.btnMain_4.Enabled = frmMain.btnMain_4.Tag
frmMain.btnMain_5.Enabled = frmMain.btnMain_5.Tag
frmMain.btnMain_6.Enabled = frmMain.btnMain_6.Tag
frmMain.btnTools.Enabled = frmMain.btnTools.Tag
frmMain.btnExit.Enabled = frmMain.btnExit.Tag

END

