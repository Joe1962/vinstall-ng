' Gambas module file


'    This file is part of vinstall-ng

'    vinstall-ng is free software: you can redistribute it and/or modify
'    it under the terms of the GNU General Public License as published by
'    the Free Software Foundation, either version 2 of the License, or
'    (at your option) any later version.

'    vinstall-ng  is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'    GNU General Public License for more details.

'    You should have received a copy of the GNU General Public License
'    along with vinstall-ng.  If not, see <http://www.gnu.org/licenses/>.
  PRIVATE hproc AS Process
  PRIVATE sDump AS String
  PRIVATE sErr AS String
  
  PUBLIC SUB PREPARE_ALL_PARTITIONS()
  
  DIM sList AS String[]
  DIM i, iretval AS Integer
  DIM sPart, sFormat AS String
  DIM cb AS ComboBox
  
  ' maybe a better approach to this
    FOR EACH cb IN MdlPartSel.oFsTypes
      sPart = cb.Tag
      sFormat = cb.Text
        IF cb.text <> "Do not format" THEN 
      PRINT " Formatting " & sPart & " to " & sFormat
        ME.FORMAT_PARTITION(sPart, sFormat)
      END IF
    NEXT 
    PRINT "Partition formatting complete"
  
        MdlCore.LOCK_GUI()
      MdlInstallSys.MOUNT_DEFINED_PARTITIONS() ' let the game begin
    
' ' '   END IF
  'MdlInstallSys.MOUNT_DEFINED_PARTITIONS
  
END

  
  
PUBLIC FUNCTION FORMAT_PARTITION(sAddr AS String, sFS AS String) AS Integer ' will return 1 for trouble, 0 for clear
  
  DIM sCommand AS String
  DIM sResult AS String
  DIM iMinFrameH AS Integer
  
      FMain.tvPlan["Inst1"].Selected = TRUE
      FMain.tvPlan["Inst1"].Picture = MdlCore.sNowPic
      FMain.tvPlan["Inst2"].Picture = MdlCore.sToDopic
  
  
    'Umount the volume first
      SHELL "mount | grep " & sAddr TO sResult
      sResult = Trim(sResult)
        IF sResult <> "" THEN 
        
          SHELL "umount " & sAddr WAIT 
        END IF
    SELECT CASE LCase(sFS)
      CASE "ext2"
        sCommand = "mke2fs -q " & sAddr
      CASE "ext3"
        sCommand = "mke2fs -q -j " & saddr
      CASE "reiserfs"
        sCommand = "mkreiserfs --format 3.6 -q " & sAddr
      CASE "xfs"
        sCommand = "mkfs.xfs -f " & sAddr
      CASE "jfs"
        sCommand = "mkfs.jfs -q " & sAddr  
      CASE "swap"
        sCommand = "mkswap -L swap-space " & sAddr
    END SELECT 
    
        ' fix the form
        
        iMinFrameH = FrmInstallSys.tlCurrPkg.Height + FrmInstallSys.tlCurrPkg2.Height + frminstallsys.tlCurrStepLbl.Height + FrmInstallSys.pbInstallProg2.Height + FrmInstallSys.tlCurrStepLbl.Height + 36
    WITH FrmInstallSys
      .FrmProg.Move(4, .tlBanner.top + .tlBanner.Height + 8, .ClientWidth - (.FrmProg.Left * 2), iMinFrameH)
      .tlBanner.Move(4, 16, .ClientWidth - (.tlBanner.Left * 2))
      '.tlBanner.Border = Border.Plain
      .FrmProg.Move(4, .tlBanner.top + (.tlBanner.Height + 8), .ClientWidth - (.FrmProg.Left * 2))
      .tlCurrPkg.move(8, 32, .FrmProg.Width - (.tlCurrPkg.Left * 2))
      .tlCurrStepLbl.Move(.tlCurrPkg.Left, .tlCurrPkg.top + (.tlCurrPkg.Height + 4), MdlObjSizer.get_object_width(.tlCurrStepLbl.Text) + 8, 27)
      .pbInstallProg.Move(.tlCurrStepLbl.left + (.tlCurrStepLbl.Width), .tlCurrStepLbl.top, .FrmProg.Width - (.tlCurrStepLbl.Width + (.tlcurrsteplbl.left * 2)))
      .tlCurrPkg2.Move(.tlCurrPkg.Left, .tlCurrPkg.top + (.tlCurrPkg.Height * 2.5), .FrmProg.Width - (.tlCurrPkg.Left * 2))
      .pbInstallProg2.Move(.tlCurrPkg2.Left, .tlCurrPkg2.top + (.tlCurrPkg2.Height + 2), .tlCurrPkg2.Width, 27)
      
      '.pbInstallProg.Move(.tlCurrStepLbl.Left + (.tlCurrStepLbl.Width + 2), .FrmProg.Width - (.tlCurrStepLbl.Width + (.tlCurrStepLbl.left * 2))) '
      '.pbInstallProg.Move(.tlCurrPkg.Left, .tlCurrPkg.top + (.tlCurrPkg.Height + 2), .tlCurrPkg.Width)
      
    END WITH 
    
    
    PRINT "Formatting " & sAddr & " to " & sFS
  hproc = SHELL sCommand & " || echo \'FAILED\'" WAIT 'for read
    WAIT 2
      IF hproc.State = Process.Running THEN 
        REPEAT 
  '        FrmHostPrep.tlStatus.Text = "Formatting " & sAddr & " as " & sFS
          
          FrmInstallSys.tlCurrPkg.Text = " Formatting " & sAddr & " as " & sFS
          
          WAIT 1
        UNTIL 
          hproc.State = Process.Stopped
      sDump = Trim(sDump)
      sErr = Trim(sErr)
    IF InStr(sDump, "FAILED") > 0 AND sErr <> "" THEN 
      'error here
      Message.Error("There has been an error wile trying to format " & sAddr & " to " & sFS & gb.NewLine &
      sErr)
        'FrmHostPrep.tlStatus.Text = "Unable to format " & saddr 
        FrmInstallSys.tlCurrPkg.Text = "Unable to format " & sAddr
        FrmInstallSys.tlBanner.BackColor = Color.Red
      RETURN 1
    ELSE 
        'Message(" System is ready for VectorLinux")
        ' ready to install packages
          WITH FMain
          .tvPlan["Inst1"].Picture = MdlCore.sDonePic
          END WITH 
    
      RETURN 0
    END IF
  END IF
  ' turn swap on if available
      IF ClsPartSel.sSwap THEN 
        SHELL "swapon -a " WAIT 
      END IF
END

PUBLIC SUB process_read()
  
  DIM sLine AS String
    READ #LAST, sLine, -256
  sDump = sDump & gb.NewLine & sLine
  
  
END

PUBLIC SUB Process_error(errormsg AS String)
  sErr = sErr & gb.NewLine & sErr
   
END

