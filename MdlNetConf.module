' Gambas module file
'    This file is part of vinstall-ng

'    vinstall-ng is free software: you can redistribute it and/or modify
'    it under the terms of the GNU General Public License as published by
'    the Free Software Foundation, either version 2 of the License, or
'    (at your option) any later version.

'    vinstall-ng  is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'    GNU General Public License for more details.

'    You should have received a copy of the GNU General Public License
'    along with vinstall-ng.  If not, see <http://www.gnu.org/licenses/>.
PRIVATE ileft AS Integer
PRIVATE itop AS Integer
PRIVATE icbleft AS Integer
PRIVATE iWifix AS Integer
PRIVATE iwifiy AS Integer
PUBLIC objCombos AS Object[]
PUBLIC objCheckboxes AS Object[]
PUBLIC objtxtIps AS Object[]
PUBLIC objtxtNetMasks AS Object[]
PUBLIC objtxtDNS AS Object[]
PUBLIC objFrames AS Object[]
PUBLIC objtlDetails AS Object[]
PUBLIC objcbWifi AS Object[]
PUBLIC objtxtWifiKey AS Object[]
PUBLIC objcbWifiessid AS Object[]
PUBLIC objIntTypes AS Object[]

PUBLIC ifaceCnt AS Integer

PRIVATE pWiredPic AS Picture = picture["images/ethernet.png"]
PRIVATE pWirelessPic AS picture = picture["images/wireless.png"]
PRIVATE iFrameTop AS Integer

PUBLIC SUB LIST_NETWORK_INTERFACES()
  
  DIM sDevAddr, sEths, sDump, sDev, sType, sStatus, sApDump AS String
  DIM sDevList, sLine AS String[]
  DIM i, ii, y, x AS Integer
  DIM tl AS TextLabel
  DIM tb AS TextBox
  DIM cb AS ComboBox
  DIM bcb AS CheckBox
  DIM ptabpic AS Picture
  
  ' INITIATE THE ARRAYS

     objCombos = NEW Object[]
     objFrames = NEW Object[]
     objtlDetails = NEW Object[]
     objtxtIps = NEW Object[]
     objtxtNetMasks = NEW Object[]
     objtxtDNS = NEW Object[]
     objCheckboxes = NEW Object[]
'     objcbWifi = NEW Object[]
'     objtxtWifiKey = NEW Object[]
'     objcbWifiessid = NEW Object[]
     objIntTypes = NEW Object[]
  
       'SHELL "res=$(ifconfig -a | grep ^eth0 | grep -v ^lo); echo \"$res\" | tr -s \' \'\"\" " TO seths
       SHELL "res=$(ifconfig -a | grep ^eth | grep -v ^lo | grep -v ^wl); echo \"$res\" | tr -s \' \'\"\" " TO seths
    seths = Trim(seths)
    
           IF seths = "" THEN  ' WARN IF NO NETWORK HARDWARE CAN BE DETECTED AND EXIT WITHOUT ERROR
          WITH FrmNetConf
            .cbUseManDNS.Enabled = FALSE
            .tlPrimaryDNS.Enabled = FALSE
            .tlSecDNS.Enabled = FALSE
          END WITH 
            tl = NEW TextLabel(FrmNetConf.TSNetDevices)
              WITH tl
              .Width = 400
              .Height = 200
              .Alignment = Align.Normal
              .Text = "<b>" & ("No ethernet neworking devices found") & "</b>"
              .Move(30, 24)
            END WITH 
            FrmNetConf.TSNetDevices.Text = "Ethernet"
                ME.ifaceCnt = 0
            RETURN 
      END IF      
'       
          sDevList = Split(seths, gb.NewLine)
      'Message(seths)
      ME.ifaceCnt = sDevList.Count
             FOR i = 0 TO sDevList.count - 1
        'Message(sDevList[i])
          sLine = Split(sDevList[i], " ")
          sDev = sLine[0]
            'Message(sLine[1])
           sDevAddr = sLine[4] ' This may be off depending on which box this runs one... needs careful testing 
            'Message(sDevAddr)
          sType = ("Wired") ' Not detecting wireless, so lets just leave it at this
          
                    ' detect status
                      SHELL "ifplugstatus | grep ^" & sDev & " | cut -f 2 -d \':\'" TO sStatus
                      'Message(sStatus)
                        sStatus = Trim(sStatus)
                          IF InStr(sStatus, "detected") THEN 
                            sStatus = ("Plugged-in")
                          ELSE 
                            sStatus = ("Unplugged")
                          END IF
                          'Message(sDev & gb.NewLine & sDevAddr & gb.NewLine & sStatus)
' BEGIN POPULATING TABSTRIP. =========================================================================

WITH FrmNetConf.TSNetDevices
  .Index = i
  .Text = sDev
      
        ' **************** tabs strip objects
          tl = NEW TextLabel(FrmNetConf.TSNetDevices) ' MACK ADDRESS LABEL
            WITH tl
              .Text = ("Hardware Address")
              .Width = MdlObjSizer.get_object_width(.Text)
              .Height = 21
              .Alignment = Align.Normal
              .Move(4, 16)
            END WITH 
              'y = y + tl.Top + tl.Height + 4
        tb = NEW TextBox(FrmNetConf.TSNetDevices) AS "txtDevAddresses" ' MAC ADDRESS BOX 
            WITH tb
            .Text = sDevAddr
            .ReadOnly = TRUE
            .Height = 21
            .Width = MdlObjSizer.get_object_width(.Text) + 16
            .Move(tl.Left + tl.Width + 4, tl.Top)
            .Tag = sDev
            END WITH 
   
 '           y = y + tb.Top + tb.Height + 4
        bcb = NEW CheckBox(FrmNetConf.TSNetDevices) AS "bEnableInterface"  '************ enabled / disabled checkbox **************************
          WITH bcb
            .Value = TRUE
              .Text = ("Automatically activate this interface at start-up")
              .Height = 21
              .Width = MdlObjSizer.get_object_width(.Text) + 36
              .Move(4, tb.top + tb.Height + 4)
              .Tag = sDev
          END WITH 
          ME.objCheckboxes.Add(bcb)
            y = bcb.top + bcb.Height + 8
            
        tl = NEW TextLabel(FrmNetConf.TSNetDevices) 
          WITH tl
            .Text = ("Setup Mode")
            .Alignment = Align.Normal
            .Height = 21
            .Width = MdlObjSizer.get_object_width(.Text)
            .Move(24, y) ' indent this a little
          END WITH 
    
        cb = NEW ComboBox(FrmNetConf.TSNetDevices) AS "MethodSel" ' ******************************* 
            WITH cb
              .ReadOnly = TRUE
              .list = ["DHCP", "STATIC"]
              .Height = 21
              .Width = MdlObjSizer.get_object_width("STATIC") * 2
              .move(tl.Left + tl.Width + 4, y)
              .Tag = sDev
            END WITH 
            ME.objCombos.Add(cb)
        
        tl = NEW TextLabel(FrmNetConf.TSNetDevices) '***********************************************************
            WITH tl
              .Text = ("Current Status:") & Space(1) & "<b>" & sStatus & "</b>"
              .Alignment = Align.Normal
              .Height = 21
              .Width = MdlObjSizer.get_object_width(.Text)
              .Move(cb.Left + cb.Width + 4, y)
            END WITH 
            iFrameTop = tl.top + tl.Height + 8
            

  
END WITH  ' END JACKING WITH TABSTRIP ========================================================================

          
          INC FrmNetConf.TSNetDevices.Count
          'FrmNetConf.TSNetDevices.Count = FrmNetConf.TSNetDevices.Count - 1
          
          NEXT 
   
END







PUBLIC SUB MethodSel_Click()
  
  DIM frmDetails AS Frame
  DIM txtbox AS TextBox
  DIM cb AS CheckBox
  DIM tl AS TextLabel
  DIM itxtleft, itxtwidth, imandnsleft, imandnstxtleft, itlwidth AS Integer
  
  IF iFrameTop < 101 THEN iFrameTop = 110
  
  IF NOT LAST.text THEN RETURN 
    'iFrameTop = LAST.top + LAST.Height + 4
  IF LAST.text = "STATIC" THEN 
  
  ' ============== delete the label ======
  FOR EACH tl IN objtlDetails
    IF tl.Tag = LAST.tag THEN
    objtlDetails.Remove(objtlDetails.Find(tl))
    tl.Delete
    END IF
  NEXT 
'  == == = CREATE NEW frame ==
  
  
                frmDetails = NEW Frame(FrmNetConf.TSNetDevices) AS "STaticDetails"
                  WITH frmDetails
                    '.Move(ileft, itop + 8)
                    .Move(24, iFrameTop)
                    .text = Space(1) & ("Static IP Address Settings") & Space(1)
                    .Width = (.Parent.Width - (.left) * 1.5)
                    .Height = 130
                    .tag = LAST.tag
                    .Raise()
                    .Visible = TRUE
                  END WITH 
                  objFrames.Add(frmDetails)
                      'populate the frame for this
                            tl = NEW TextLabel(frmDetails) AS "tlStaticLabels"
                              WITH tl
                                .Move(8, 24)
                                .text = ("IP Address")
                                .Height = 21
                                .Width = MdlObjSizer.get_object_width(.text)
                                .Alignment = Align.Normal
                              END WITH 
                            txtbox = NEW TextBox(frmDetails) AS "txtStatisIpBoxes" ' static IP Address Box
                              WITH txtbox
                                .tag = LAST.tag
                                .Move((tl.left + tl.Width) * 2, tl.Top)
                                .text = "192.168.1.100"
                                .Height = 21
                                .Width = MdlObjSizer.get_object_width(.text) * 2
                                .MaxLength = 16
                                  IF objtxtIps.Find(txtbox) = -1 THEN objtxtIps.Add(txtbox) ' add to the array
                              END WITH 
                              itxtleft = (tl.Left + tl.Width) * 2 'txtbox.Left 
                              itxtwidth = txtbox.Width
                              imandnsleft = itxtleft + itxtwidth + 8
                              
                              
                              
                            tl = NEW TextLabel(frmDetails) AS "tlStaticLabels"
                              WITH tl
                                .text = ("Subnet Mask")
                                .width = MdlObjSizer.get_object_width(.text)
                                .Height = 21
                                .Alignment = Align.Normal
                                .Move(8, txtbox.top + txtbox.Height + 4)
                              END WITH 
                            txtbox = NEW TextBox(frmDetails) AS "txtDnsMaskBoxes" ' DNS Mask Box
                              WITH txtbox
                                .Move(itxtleft, tl.top)
                                .text = "255.255.255.0"
                                .tag = LAST.tag
                                .Height = 21
                                .Width = itxtwidth
                                .MaxLength = 16
                                  IF objtxtNetMasks.Find(txtbox) = -1 THEN objtxtNetMasks.Add(txtbox) ' add to the array
                              END WITH 
                              
                              
                            tl = NEW TextLabel(frmDetails) AS "tlStaticLabels"
                              WITH tl
                                .Move(8, txtbox.top + txtbox.Height + 4)
                                .Height = 21
                                .text = ("Gateway Address")
                                .Width = MdlObjSizer.get_object_width(.text)
                                .Alignment = Align.Normal
                              END WITH 
                            txtbox = NEW TextBox(frmDetails) AS "txtGatewayAddrBoxes" ' Gateway address box
                              WITH txtbox
                                .tag = LAST.tag
                                .Move(itxtleft, tl.top)
                                .Height = 21
                                .Width = itxtwidth
                                .MaxLength = 16
                                .text = "192.168.1.254"
                                  IF objtxtDNS.Find(txtbox) = -1 THEN objtxtDNS.Add(txtbox) ' add to the array
                              END WITH 
                               
                                
                    ' FOR EACH tl IN objtlDetails
                    '   IF tl.tag = LAST.tag THEN 
                    '     objtlDetails.Delete(objtlDetails.Find(tl))
                    '   END IF
                    ' NEXT 
                      
  ELSE 
    'Message(LAST.text)
    FOR EACH frmDetails IN objFrames
      IF frmDetails.tag = LAST.tag THEN 
      frmDetails.Delete
      objFrames.Delete(objFrames.Find(frmDetails))
    END IF
    NEXT 
        ' create a text label that says the thing will get automatically configured
        
        IF iFrameTop < 101 THEN iFrameTop = 110
      
        tl = NEW TextLabel(FrmNetConf.TSNetDevices) AS "DetailLbl"
          WITH tl
             .Move(24, iFrameTop)
             .Width = (.Parent.Width - (.left) * 1.5)
            .text = "<b>" & ("Dynamic Host Control Protocol") & "</b><br>" & ("Automatic settings via DHCP.") & "<br><br>" & ("This will work if you use a cable or DSL modem on a home network.") & "<br>" & ("If in doubt, choose this option.")
            .Adjust
            .border = Border.Raised
            '.Width = itlwidth  
            '.Width = 230 'MdlObjSizer.get_object_width(.text)
            .Height = 130
            .Tag = LAST.tag
            .Visible = TRUE
            .Raise
                        
          END WITH 
            objtlDetails.Add(tl)

      
  END IF
END





PUBLIC SUB WRITE_INET()
  
  DIM sScript AS String
  DIM sIP, sGateway, Netmask, sDev AS String
  DIM sDHCP AS String
  DIM i AS Integer
  DIM txt AS TextBox
  DIM combo AS ComboBox
  DIM cb AS CheckBox
  DIM ii AS Integer = 0
  
    
    ' Base the function on the objects rather than the tabstrip
      FOR EACH cb IN objCheckboxes
        'IF cb.value = TRUE THEN 
          sDev = cb.Tag
          FOR EACH combo IN objCombos
            IF combo.tag = cb.tag THEN 
              SELECT CASE combo.Text
                CASE "DHCP"
                  sDHCP = "yes"
                  sIp = ""
                  sGateway = ""
                  Netmask = ""
                CASE "STATIC"
                  sDHCP = "no"
                    ' get the values from each box
                      FOR EACH txt IN objtxtIps
                        IF txt.tag = combo.tag THEN sIp = txt.Text
                      NEXT 
                      FOR EACH txt IN objtxtNetMasks
                        IF txt.tag = combo.tag THEN Netmask = txt.Text
                      NEXT 
                      FOR EACH txt IN objtxtDNS
                        IF txt.tag = combo.tag THEN sGateway = txt.Text
                      NEXT 
              END SELECT 
            END IF
          NEXT 
              ' Generate the rc.inet[0-9] script
    sScript = "#!/bin/bash \n" &
    "# This file is supposed to be created by vnetadd \n" &
    "# and modified by vnetset. \n" &
    "# you can modify it by hand, but be careful \n \n \n" &
    "# This script is part of VectorLinux. Licensed under the terms of the GNU GPL \n" &
    "# \n\n\n" &
    "##############################################################\n" &
    "## The Settings \n" &
    "DEVICE=" & sDev & "\n" &
    "DHCP=\"" & sDHCP & "\"\n" &
    "IPADDR=\"" & sIP & "\"\n" &
    "NETMASK=\"" & Netmask & "\"\n" &
    "GATEWAY=\"" & sGateway & "\"\n" &
    "PROBE=\"no\"" & "\n\n" &
    "################################################################\n" &
    "## The Script \n \n" &
    "## You may make customized script here \n" &
    "## of source the starndard network script\n\n" &
    ". /etc/rc.d/functions-network $@ \n\n"
    
    'Message(sScript)
      File.Save(ClsGlobal.sTargetMnt &/ "etc" &/ "rc.d" &/ "rc.inet" & ii, sScript)
        IF cb.Value = TRUE THEN 
          '''SHELL "chmod +x /tmp/rc.inet" & ii WAIT  ''' This is the wrong path
            SHELL "chmod +x " & ClsGlobal.sTargetMnt &/ "etc" &/ "rc.d" &/ "rc.inet" & ii WAIT
        END IF
      INC ii
    NEXT 
    'INC ii
  'ME.SET_HOSTNAME("Test")
END

PUBLIC SUB SET_HOSTNAME(sHostName AS String, sDomain AS String)

            
      SHELL "echo " & sHostName & "." & sDomain & " >" & ClsGlobal.sTargetMnt &/ "etc" &/ "HOSTNAME" WAIT 
      

    ME.UPDATE_HOSTS_FILE(sHostName, sDomain)
    
    
  
END

PUBLIC SUB UPDATE_HOSTS_FILE(sHostName AS String, sDomain AS String)
  
    DIM sFileIn, sFileOut AS String
    
    sFileIn = "# \n" &
    "# hosts \n" &
    "#\n #\n" &
    "# This file describes a numeber of host-to-address mappings for the TCP/IP subsystem. \n" &
    "# It is mostly used  at boot time, when no name servers are running. On small systems, this \n" &
    "# file can be used instead of a \"named\" name server. Just add the names, addresses and any \n" &
    "# aliases to this file ...\n #\n#\n#\n" &
    "# By the way, Arnt Gulbrandsen <agrulbra@nvg.unit.no> says that 127.0.0.1 should NEVER \n" &
    "# be named with the name of the machine. It causes problem sor some programs, irc and \n" &
    "# reputedly talk. :^) \n#\n#\n" &
    "# For loopbacking. \n" &
    "127.0.0.1" & Space(5) & "localhost" & "\n" &
    "#\n#\n" &
    "# This next entry is technically wrong, but good enough to get TCP/IP applications to quit complaining \n" &
    "# that they can\'t clarify the hostname on a loopback-only system \n#\n#\n# \n" &
    "127.0.0.1" & Space(5) & sHostName & "." & sDomain & Space(5) & sHostName & "\n#\n#" &
    "# End of hosts." 
    
    IF Exist(ClsGlobal.sTargetMnt &/ "etc" &/ "hosts") THEN MOVE ClsGlobal.sTargetMnt &/ "etc" &/ "hosts" TO ClsGlobal.sTargetMnt &/ "etc" &/ "hosts.bak"
    IF Exist(ClsGlobal.sTargetMnt &/ "etc" &/ "hosts") THEN KILL ClsGlobal.sTargetMnt &/ "etc" &/ "hosts" 
      
      'Message.Info(sFileIn)
      'RETURN 
      TRY File.Save(ClsGlobal.sTargetMnt &/ "etc" &/ "hosts", SConv(sFileIn))
          CATCH 
          Message.Error(Error.where & gb.NewLine & Error.text)
                
END


PUBLIC SUB SET_DNS_ADDRESSES()
    
    DIM sFile AS String
    
    IF FrmNetConf.cbUseManDNS.value = TRUE THEN 
    sFile = "# Generated by the VectorlLinux installer\n"      
      IF FrmNetConf.txtPrimaryDNS.text <> "" THEN sFile = sFile & "\n" & "nameserver " & FrmNetConf.txtPrimaryDNS.Text
      IF FrmNetConf.txtSecDNS.text <> "" THEN sFile = sFile & "\n" & "nameserver " & FrmNetConf.txtSecDNS.Text
      File.Save(ClsGlobal.sTargetMnt &/ "etc" &/ "resolv.conf", sFile)
    END IF
        'Message(sFile)
        ' If DHCP is used, then /etc/resolv.conf is generated by dhcpcd
  
END


PUBLIC SUB cbWifiEnc_click()
  DIM tb AS TextBox
  
    IF LAST.text = ("None") THEN 
    FOR EACH tb IN objtxtWifiKey
      IF tb.tag = LAST.tag THEN tb.Enabled = FALSE
    NEXT 
    ELSE 
      FOR EACH tb IN objtxtWifiKey
        IF tb.tag = LAST.tag THEN tb.Enabled = TRUE
      NEXT 
    END IF
END

  



