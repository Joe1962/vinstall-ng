' Gambas module file


'    This file is part of vinstall-ng

'    vinstall-ng is free software: you can redistribute it and/or modify
'    it under the terms of the GNU General Public License as published by
'    the Free Software Foundation, either version 2 of the License, or
'    (at your option) any later version.

'    vinstall-ng  is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'    GNU General Public License for more details.

'    You should have received a copy of the GNU General Public License
'    along with vinstall-ng.  If not, see <http://www.gnu.org/licenses/>.

PUBLIC oMountPoints AS Object[]
PUBLIC oFsTypes AS Object[]
PUBLIC oSwaps AS Object[]

PUBLIC SUB DISPLAY_PARTITION_OPTIONS()
  
  DIM tl AS TextLabel
  DIM cb AS ComboBox
  DIM sPartList AS String[]
  DIM sPart AS String
  DIM sSize AS String
  DIM i AS Integer
  DIM x, y AS Integer
  DIM sDump1 AS String ' partition list dump
  DIM lbwidth AS Integer = 0
  DIM sSwapList AS String
  DIM vSwapSize AS Variant
  DIM iswapsize AS Float
  DIM i3drdrowX AS Integer
  DIM iX AS Integer
  DIM iWidth AS Integer  
  DIM iCol1, icol2, iCol3 AS Integer
  DIM sSwaps AS String[]
  DIM ii AS Integer
  DIM sDrive, sPartNo, sBlank AS String
  
  

  ' fire up the arrays
  oFsTypes = NEW Object[]
  oMountPoints = NEW Object[]
  oSwaps = NEW Object[]
  
  ' We will mount the partitions first, and then figure out their size
  SHELL " probepart | grep -e \" Linux$\" | cut -f 1 -d \' \' | grep /dev" TO sDump1
  sDump1 = Trim(sDump1)
  
      
    y = 4
    x = 8
  
'    IF InStr(sDump1, gb.NewLine) > 0 THEN 
    IF sDump1 <> "" THEN 
      sPartList = Split(sDump1, gb.NewLine)

          ' create header labels
          tl = NEW TextLabel(FrmPartSel.scrollPartitions) AS "HEADERS"
            WITH tl
              .Text = "<b>PARTITION</b>"
              .Height = 27
              .x = x
              .y = y
              .Width = MdlObjSizer.get_object_width(.text) * 2.2
            END WITH 
            icol1 = x
            icol2 = x + tl.Width + 4
          tl = NEW TextLabel(FrmPartSel.scrollPartitions) AS "HEADERS"
            WITH tl
              .text = "<b>MOUNT POINT</b>"
              .Height = 27
              .x = icol2
              .y = y
              .Width = MdlObjSizer.get_object_width(.text) * 2.2
            END WITH 
              icol3 = tl.x + tl.Width + 4
          tl = NEW TextLabel(FrmPartSel.scrollPartitions) AS "HEADERS"
            WITH tl
              .text = "<b>FILESYSTEM</b>"
              .Height = 27
              .x = icol3
              .y = y
              .Width = MdlObjSizer.get_object_width(.text) * 2.2
            END WITH 
            y = y + 20



        FOR i = 0 TO sPartList.Count - 1
          sDrive = Left(sPartList[i], Len("/dev/hda"))
          sPartNo = Right(sPartList[i], Len(sPartList[i]) - Len(sDrive))
            IF Len(sPartNo) > 1 THEN 
              sBlank = ""
            ELSE 
              sBlank = " "
            END IF
        
        
          sPart = Right(sPartList[i], Len(sPartList[i]) - RInStr(sPartList[i], "/"))
            'Message.Info(sPart)
            
              ' ' ' 'make sure the mount point exists
              ' ' '   IF IsDir("/mnt" &/ sPart) = FALSE THEN 
              ' ' '     SHELL "mkdir /mnt" &/ sPart WAIT 
              ' ' '   END IF
              ' ' '   ' Now mount the partition
              ' ' '   SHELL "mount " & Trim(sPartList[i]) & Space(1) & "/mnt" &/ sPart WAIT 
              ' ' '       ' get the size using df -h | grep sPart and some sed
              ' ' '       ' will embed some bash, but should probabbly be fixed
              ' ' '   SHELL "export " & sPart & "=$(df -h | grep " & sPart & ") && echo $" & sPart & " | cut -f 2 -d \' \'" TO sSize
              ' ' '     'Message(sPart & Space(1) & "[ " & Trim(sSize) & " ]")
              SHELL "export size=$(parted " & sDrive & " print | grep ^\'" & sBlank & sPartNo & "\'); echo $size | cut -f 4 -d \' \'" TO sSize
            'create the label and the drop down box here
              tl = NEW TextLabel(FrmPartSel.scrollPartitions) AS "Labels"
                WITH tl
                  .Tag = Trim(sPartList[i])
                  .Text = Trim(sPartList[i]) & Space(1) & "( " & sSize & " )"
                  .Width = MdlObjSizer.get_object_width(.Text) * 1.25
                    IF .Width > lbwidth THEN 
                      lbwidth = .Width
                    END IF
                    IF .Width < lbwidth THEN 
                    .Width = lbwidth
                    END IF
                  .Height = 27
                  .x = icol1 'FrmPartSel.tlPartRow.Left
                  .Alignment = Align.Normal
                  .y = y
                END WITH 
                
              'create the combobox
              cb = NEW ComboBox(FrmPartSel.scrollPartitions) AS "MountPoints"
                WITH cb
                .tag = Trim(sPartList[i])
                '.x = lbwidth + 24
                .X = icol2 'FrmPartSel.tlPartRow2.Left
                .y = y
                .Height = tl.Height
                .Width = tl.Width
                .ReadOnly = TRUE                
                .Add("Not Used")
                .Add("/")
                .Add("/home")
                .Add("/opt")
                .Add("/usr")
                .Add("/var")
                .Add("/tmp")
                .Add("/mnt" &/ Right(.tag, Len(.tag) - RInStr(.tag, "/"))) ' Add option to mount linux partitions to /mnt/xdx
                .Add("Swap")
                    IF InStr(FrmSelISO.lstInstallableImg.Text, .tag) THEN 
                      .Enabled = FALSE
                    ELSE 
                      .Enabled = TRUE
                    END IF
                END WITH 
                oMountPoints.Add(cb)
                i3drdrowX = cb.x + cb.Width + 8
              'create the file system options
                cb = NEW ComboBox(FrmPartSel.scrollPartitions) AS "fsTypes"
                  WITH cb
                  .Tag = Trim(sPartList[i])
                  '.x = i3drdrowX
                  .x = iCol3 'FrmPartSel.tlPartRow3.Left
                  .y = y
                  .ReadOnly = TRUE
                  .Width = tl.Width
                  .Add("Do not format")
                  .Add("reiserfs")
                  .Add("ext2")
                  .Add("ext3")
                  .Add("jfs")
                  .Add("xfs")
                  '.Add("swap")
                    IF InStr(Trim(FrmSelISO.lstInstallableImg.Text), .Tag) THEN
                      .Enabled = FALSE
                    ELSE 
                      .Enabled = TRUE
                    END IF
                          ' FOR EACH cb IN oFsTypes
                          '   IF cb.Tag = .Tag THEN 
                          '     cb.Enabled = FALSE
                          '   END IF
                          ' NEXT 
                      
                  
                  END WITH 
                  oFsTypes.Add(cb)
                  
                                       
                ' now umount the partition and delete the mount point
                  'SHELL "umount /mnt" &/ sPart & " && rm -r /mnt" &/ sPart WAIT 
                ' increase the value of y for the next label
                y = y + tl.Height + 4
                  
                
        NEXT 
            
      ELSE 
        'only one partition found. This could be trouble
        
        
            
      END IF

      'SHELL " probepart | grep -i \" *swap$\" | cut -f 1 -d \' \' | grep -e /dev" TO sSwapList
       SHELL "probepart | grep -i \"swap\" | cut -f 1 -d \' \' | grep -e \"/dev\"" TO sSwapList
          
        sSwapList = Trim(sSwapList)
          IF sSwapList <> "" THEN 
          
' ' '         Message.Info(sSwapList)
        'IF InStr(sSwapList, gb.NewLine) THEN 
          'several swap partitions found
          'how do we deal w/ this?
            sSwaps = Split(sSwapList, "\n")
              FOR ii = 0 TO sSwaps.count - 1
                  sPart = Trim(sSwaps[ii])
                'SHELL "export sw=$(parted " & Left(sSwaps[i], Len(sSwaps[i]) - 1) & " print | grep ^\' " & Right(sSwaps[i]) & "); echo $sw | cut -f 4 -d \' \'" TO vSwapSize
                SHELL "export sw=$(parted " & Left(sPart, Len(sPart) - 1) & " print | grep ^\' " & Right(sPart) & "\'); echo $sw | cut -f 4 -d \' \'" TO vSwapSize
                  tl = NEW TextLabel(FrmPartSel.scrollPartitions) AS "swlabel"
                    WITH tl
                      .x = icol1
                      .y = y
                      .text = sPart & " ( " & CStr(vSwapSize) & " )"
                      .Width = lbwidth
                      .Height = 27
                      .Alignment = Align.Normal
                      .tag = sSwaps[ii]
                    END WITH   
                    cb = NEW ComboBox(FrmPartSel.scrollPartitions) AS "swapsel"
                      WITH cb
                      .y = y
                      .x = icol2
                      .width = tl.Width
                      .ReadOnly = TRUE
                      .Add("Swap")
                      .Add("Not Used")
                      .tag = sPart
                    END WITH 
                    y = y + cb.height + 4
                    ME.oSwaps.Add(cb)
                    
                    'y = y + cb.Height + 4
            NEXT 
        END IF

  FOR EACH cb IN MdlPartSel.oMountPoints
    IF cb.width > iWidth THEN 
      iWidth = cb.Width
    END IF
  NEXT 
    FOR EACH cb IN MdlPartSel.oMountPoints
      cb.Width = iWidth
    NEXT 
    FOR EACH cb IN MdlPartSel.oFsTypes
      cb.Width = iWidth
    NEXT 
      
  


  
END

PUBLIC SUB swapsel_click()
  
  DIM cb AS ComboBox
  ' we need to set at least one swap partition
  FOR EACH cb IN ME.oSwaps
    ClsPartSel.sSwap = cb.Tag
  NEXT 
  
  
END

 
PUBLIC SUB MountPoints_CLick()
  
  DIM sdropdwn AS ComboBox
  'DIM sTag AS String = LAST.tag
  'DIM sText AS String = Trim(LAST.text)
  
  FOR EACH sdropdwn IN ME.oMountPoints
    IF LAST.text <> "Not Used" AND LAST.text = sdropdwn.Text AND LAST.tag <> sdropdwn.tag THEN 
      
      Message.Error("Please select only one " & LAST.text & " partition")
      LAST.text = "Not Used"
      STOP EVENT 
    END IF
  NEXT 
   
   
   FOR EACH sdropdwn IN oFsTypes
              IF sdropdwn.tag = LAST.tag THEN 
                sdropdwn.Enabled = TRUE
                IF sdropdwn.Find("Swap") <> -1 THEN 
                  sdropdwn.Remove(sdropdwn.Find("Swap"))
                END IF
                sdropdwn.Text = "Do not format"
              END IF
   
   
            NEXT 
    
    SELECT CASE LAST.text
        CASE "/"
          ClsPartSel.sRoot = LCase(LAST.tag)
        
        CASE "/home"
          ClsPartSel.sHome = LCase(LAST.tag)
                          
        CASE "/usr"
          ClsPartSel.sUsr = LCase(LAST.tag)
            
        CASE "/opt"
          ClsPartSel.sOpt = LCase(LAST.tag)
          
        CASE "/tmp"
          ClsPartSel.sTmp = LCase(LAST.tag)
          
        CASE "/var"
          ClsPartSel.sVar = LCase(LAST.tag)
          
        CASE "Swap"
          ClsPartSel.sSwap = LCase(LAST.tag)
            'Message("Swap Flag")            
            FOR EACH sdropdwn IN oFsTypes
                IF sdropdwn.Tag = LAST.tag THEN 
                  sdropdwn.Add("Swap")
                  sdropdwn.Text = "Swap"
                  sdropdwn.Enabled = FALSE
                      
                ELSE 
                      IF sdropdwn.Text <> "Do not format" AND sdropdwn.Enabled = TRUE THEN 
                        sdropdwn.Enabled = TRUE
                    END IF  
                     IF sdropdwn.Find("Swap") <> -1 THEN 
                      sdropdwn.Remove(sdropdwn.Find("Swap"))
                    END IF
                  
                END IF
            NEXT 

             
       END SELECT 
      

  ME.SET_SELECTED_PARTITION(LAST.tag, LAST.text)
  
  
  
END

PUBLIC SUB fsTypes_click()
  
  DIM cb AS ComboBox
    FOR EACH cb IN oMountPoints
      IF cb.Tag = LAST.tag THEN 
        SELECT CASE cb.Text
          CASE "/"
            ClsPartSel.fRoot = LAST.text
          CASE "/home"
            ClsPartSel.fhome = LAST.text
          CASE "/var"
            ClsPartSel.fVar = LAST.text
          CASE "/tmp"
            ClsPartSel.fTmp = LAST.text
          CASE "/opt"
            ClsPartSel.fOpt = LAST.text
          CASE "/usr"
            ClsPartSel.fUsr = LAST.text
        END SELECT 
      END IF
        
    NEXT 
      
  'Message(LAST.tag)
END

PUBLIC SUB SET_SELECTED_PARTITION(SPartition AS String, sMountPoint AS String)
  DIM i AS Integer
  i = 0
  SELECT CASE sMountPoint
    CASE "/"
      FrmPartSel.sRootAddr = SPartition
      ClsPartSel.sRoot = SPartition
    CASE "/home"
      FrmPartSel.sHomeAddr = SPartition
      ClsPartSel.sHome = SPartition
    CASE "/opt"
      FrmPartSel.sOptAddr = SPartition
      ClsPartSel.sOpt = SPartition
    CASE "/usr"
      FrmPartSel.sUsrAddr = SPartition
      ClsPartSel.sUsr = SPartition
    CASE "/var"
      FrmPartSel.sVarAddr = SPartition
      ClsPartSel.sVar = SPartition
    CASE "/tmp"
      FrmPartSel.sTmpAddr = SPartition
      ClsPartSel.sTmp = SPartition
    'CASE LIKE "/mnt/"
     ' ClsPartSel.sLinuxPart[i] = SPartition
      'INC i
  END SELECT 
  
END

PUBLIC SUB SET_LINUX_PARTITION_TYPES()
  
  DIM cb AS ComboBox
  DIM cc AS ComboBox
    FOR EACH cb IN oMountPoints
        FOR EACH cc IN oFsTypes
          IF cb.tag = cc.tag THEN 
            ME.SET_PARTITION_FORMAT(cb.text, cc.Text)
          END IF
        NEXT 
    NEXT 
    

        
  
END




PUBLIC SUB SET_PARTITION_FORMAT(sMountPoint AS String, sFormat AS String)
  
    SELECT CASE sMountPoint
      CASE "/" 
        FrmPartSel.sRootFrmt = sFormat
        ClsPartSel.fRoot = sFormat
      CASE "/home"
        FrmPartSel.sHomeFrmt = sFormat
        ClsPartSel.fHome = sFormat
      CASE "/opt"
        FrmPartSel.sOptFrmt = sFormat
        ClsPartSel.fOpt = sFormat
      CASE "/usr"
        FrmPartSel.sUsrFrmt = sFormat
        ClsPartSel.fUsr = sFormat
      CASE "/var"
        FrmPartSel.sVarFrmt = sFormat
        ClsPartSel.fVar = sFormat
      CASE "/tmp"
        FrmPartSel.sTrmFrmt = sFormat
        ClsPartSel.fTmp = sFormat
    END SELECT 
    'Message("Set " & sMountPoint & " as " & sFormat)  
    'Message(ClsPartSel.sRoot & ClsPartSel.fRoot)
  
END



