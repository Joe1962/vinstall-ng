' Gambas module file

'    This file is part of vinstall-ng

'    vinstall-ng is free software: you can redistribute it and/or modify
'    it under the terms of the GNU General Public License as published by
'    the Free Software Foundation, either version 2 of the License, or
'    (at your option) any later version.

'    vinstall-ng  is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'    GNU General Public License for more details.

'    You should have received a copy of the GNU General Public License
'    along with vinstall-ng.  If not, see <http://www.gnu.org/licenses/>.

PUBLIC hBgConfigProc AS Process
PRIVATE sDotConf AS String

PUBLIC FUNCTION WRITE_LILO_DOT_CONF() AS Integer
  
  DIM sOut AS String
  DIM iTimeout AS Integer
  DIM sTrgt AS String
  DIM sFB AS String
  DIM sDump AS String
  
  sTrgt = Trim(FrmLilo.LiloTarget.text)
    IF InStr(sTrgt, "MBR of") THEN 
      sTrgt = Right(sTrgt, Len(sTrgt) - InStr(sTrgt, "/") + 1)
    ELSE IF FrmLilo.LiloTarget.text = "Sector" THEN 
      sTrgt = ClsPartSel.sRoot
    ELSE IF FrmLilo.LiloTarget.text = "Floppy" THEN 
      sTrgt = "/dev/fd0"
          
    END IF
      
    iTimeout = FrmLilo.sbTimer.Value * 10
  
  sOut = "# LILO Configuration File \n" &
  "# Generated by the VectorLinux installer \n" &
  "# \n" &
  "# Begin lilo global configuration \n" &
  "boot = " & sTrgt & "\n" &
  "default = " & FrmLilo.cbDefBoot.Text & "\n" &
  "compact \n" &
  "prompt \n" &
  "timeout = " & iTimeout & "\n" &
  "# \n" &
  "# Override dangerous defaults that rewrite the partition table: \n" &
  "change-rules \n" &
  "reset \n"
  IF Exist(ClsGlobal.sTargetMnt &/ "boot" &/ "bitmap" &/ "boot.bmp") THEN 
  'IF Exist("/boot/bitmap/boot.bmp") THEN 
    sOut = sOut & "\n" &
    "bitmap = /boot/bitmap/boot.bmp \n"
  END IF
  sOut = sOut & "\n" &
  "vga = 791 \n" &
  "# \n" & "# Begin listing OS Choices \n \n" &
  sDotConf
  
  
    
    message(sOut)
    RETURN 
    ' Now we want to write the actual file to the root partition
      IF Exist(ClsGlobal.sTargetMnt &/ "etc" &/ "lilo.conf") THEN 
        IF Exist(ClsGlobal.sTargetMnt &/ "etc" &/ "lilo.conf.dist") THEN KILL ClsGlobal.sTargetMnt &/ "etc" &/ "lilo.conf.dist"
        TRY MOVE ClsGlobal.sTargetMnt &/ "etc" &/ "lilo.conf" TO ClsGlobal.sTargetMnt &/ "etc" &/ "lilo.conf.dist"
      END IF
      
      ' THE FOLLOWING LINE IS FOR TESTING ONLY
      'ClsGlobal.sTargetMnt = "/tmp"
      
    File.Save(ClsGlobal.sTargetMnt &/ "etc" &/ "lilo.conf", sOut)
      IF ERROR THEN Message.Error(Error.Text & gb.NewLine & Error.Where)
      ' to make sure the new changes are written to the MBR, we need a copy in the local running install
    'File.Save("/etc/lilo.conf", sOut)
      ' now run lilo
  'File.Save("/tmp/target_lilo.conf", sOut)
  
END

PUBLIC FUNCTION EXECUTE_LILO() AS Integer
  
  DIM sOut AS String
  DIM sDump AS String
  
 
  SHELL "chroot " & ClsGlobal.sTargetMnt & " /sbin/lilo -v || echo \'FAILED\' " TO sDump
    IF InStr(sDump, "FAILED") > 0 THEN 
      Message.Error(("Lilo returned an error. Please see below") & gb.NewLine & gb.NewLine & sDump)
      FMain.btnext.Enabled = TRUE
      RETURN 1
    ELSE 
      Message(("Boot loader has been setup successfully"))
      RETURN 0
    END IF

END


PUBLIC SUB DISPLAY_LILO_TARGET_OPTIONS()
  
  DIM sList AS String
  DIM sListarr AS String[]
  DIM i AS Integer
  DIM sTarget AS String
  DIM sDump AS String
  DIM cb AS ComboBox
  DIM cb1 AS ComboBox
  
    SHELL "probedisk | grep -v cdrom |cut -f 1 -d \'|\'" TO sList
      sList = Trim(sList)
      sListarr = Split(sList, "\n").Sort(gb.Ascent)
        FOR i = 0 TO sListarr.count - 1
          sTarget = (("MBR of") & Space(1) & Trim(sListarr[i]))
          'FrmLilo.LiloTarget.Add(sTarget)
          FrmLiloSetup.cbLIloTarget.Add(sTarget)
        NEXT 
        
      'WITH FrmLilo.LiloTarget
      WITH FrmLiloSetup.cbLIloTarget
          IF LCase(ClsPartSel.fRoot) <> "xfs" THEN .Add(("Bootsector of ") & ClsPartSel.sRoot)
                    '.Add(("Bootsector of ")) & ClsPartSel.sRoot
           'END IF
          
      SHELL "lsdev | grep -i floppy" TO sDump
      IF sDump <> "" THEN .Add(("Floppy"))
      'END IF
      END WITH 
  
  
END


PUBLIC SUB GATHER_OTHER_LINUX_KERNELS_AND_INITRDS()
  
  DIM tb AS TextBox
  DIM cb AS CheckBox
  DIM sShortAddr AS String
  DIM sInitrd0, sInitrd1 AS String
  DIM sDump AS String
  sInitrd0 = "initrd"
  sInitrd1 = "initrd.gz"
  'ClsPartSel.sRoot = "/dev/hda1" ' just for testing
    FOR EACH cb IN MdlLiloOsList.bIncluded
      IF cb.Value = TRUE THEN 
      sShortAddr = Right(cb.tag, Len(cb.tag) - RInStr(cb.tag, "/"))
        IF cb.tag <> ClsPartSel.sRoot THEN 
          SHELL "mkdir -p " & ClsGlobal.sTargetMnt &/ "boot" &/ "tamu" WAIT 
          FOR EACH tb IN MdlLiloOsList.txtInitrds
          IF cb.tag <> ClsPartSel.sRoot THEN 
            IF tb.tag = cb.tag THEN 
            'mount it and find the initrd
              SHELL "mkdir /mnt" &/ sShortAddr WAIT 
              SHELL "mount " & cb.tag & Space(1) & "/mnt" &/ sShortAddr WAIT 
                SHELL "ls /mnt" &/ sShortAddr &/ "boot" TO sDump
                'message(sDump)
                                
                IF Exist("/mnt/" & sShortAddr &/ "boot" &/ sInitrd0) THEN 
                   PRINT "cp /mnt" &/ sShortAddr &/ "boot" &/ sInitrd0 & " to " & ClsGlobal.sTargetMnt &/ "boot" &/ "tamu" &/ tb.text
                  SHELL "cp /mnt" &/ sShortAddr &/ "boot" &/ sInitrd0 & Space(1) & ClsGlobal.sTargetMnt &/ "boot" &/ "tamu" &/ tb.text
                ELSE IF Exist("/mnt" &/ sShortAddr &/ "boot" &/ sInitrd1) THEN 
                  PRINT "cp /mnt" &/ sShortAddr &/ "boot" &/ sInitrd1 & " to " & ClsGlobal.sTargetMnt &/ "boot" &/ "tamu" &/ tb.text
                  SHELL "cp /mnt" &/ sShortAddr &/ sInitrd1 & Space(1) & ClsGlobal.sTargetMnt &/ "boot" &/ "tamu" &/ tb.text
                ELSE 
                  PRINT "No initrd found"
                END IF
                ' now copy the kernel to the same location
                IF Exist("/mnt" &/ sShortAddr &/ "boot" &/ "vmlinuz") THEN 
                    PRINT "Copy /mnt" &/ sShortAddr &/ "boot" &/ "vmlinuz" & " to " & ClsGlobal.sTargetMnt &/ "boot" &/ "tamu" &/ "vmlinuz-" & sShortaddr
                  SHELL "cp -L /mnt" &/ sShortAddr &/ "boot" &/ "vmlinuz" & Space(1) & ClsGlobal.sTargetMnt &/ "boot" &/ "tamu" &/ "vmlinuz-" & sShortAddr WAIT
                END IF
                  
              SHELL "umount /mnt" &/ sShortAddr WAIT 
              END IF
             ENDIF  
            NEXT 
          END IF
          
      END IF   
      NEXT  
END


PUBLIC SUB GENERATE_LILO_DOT_CONF()

DIM sFile AS String
DIM tb AS TextBox
DIM sShortAddr AS String
DIM sMatchTag AS String
DIM bInc AS CheckBox
DIM cb AS CheckBox
DIM sEntryLbl, sEntryApnd, sEntryRoot, sEntryInitrd, sSection AS String
DIM i AS Integer
DIM sCliSection AS String
DIM sWinSection AS String
DIM sBootAddr AS String
DIM cbox AS ComboBox




FOR EACH bInc IN MdlLiloOsList.bIncluded
sShortAddr = Right(bInc.tag, Len(bInc.tag) - RInStr(bInc.tag, "/"))
  IF bInc.tag = ClsPartSel.sRoot THEN 
          sBootAddr = "/boot"
        ELSE 
          sBootAddr = "/boot/tamu"
        END IF

  IF bInc.value = TRUE THEN 
    FOR EACH tb IN MdlLiloOsList.txtNames
      IF tb.Tag = bInc.tag THEN 
       sEntryLbl = tb.Text
      END IF
    NEXT 
    FOR EACH tb IN MdlLiloOsList.txtAppends
      IF tb.Tag = bInc.tag THEN 
        sEntryApnd = tb.Text
      END IF
    NEXT 
    sEntryRoot = bInc.Tag
    FOR EACH tb IN MdlLiloOsList.txtInitrds
      IF tb.tag = bInc.tag THEN 
       
        sEntryInitrd = sBootAddr &/ tb.Text
      END IF
    NEXT 
        ' now put it in a section
  IF bInc.tag = ClsPartSel.sRoot THEN      
        sSection = "image = " & sBootAddr &/ "vmlinuz" & gb.NewLine &
                    "root = " & bInc.tag & gb.NewLine &
                    "label = " & sEntryLbl & gb.NewLine &
                    "append = \"" & sEntryApnd & "\"" & gb.NewLine &
                    "initrd = /boot/initrd" & gb.NewLine &
                    "read-only" & " \n \n"
  ELSE 
          sSection = "image = " & sBootAddr &/ "vmlinuz-" & sShortAddr & gb.NewLine &
                    "root = " & bInc.tag & gb.NewLine &
                    "label = " & sEntryLbl & gb.NewLine &
                    "append = \"" & sEntryApnd & "\"" & gb.NewLine &
                    "initrd = " & sEntryInitrd & gb.NewLine &
                    "read-only" & " \n \n"
  ENDIF 
        
          'FOR EACH cbox IN MdlPartSel.oMountPoints
          '  IF cbox.text = "/" AND cbox.tag = ClsPartSel.sRoot THEN 
           '         IF MdlLiloOsList.bVlCliOption = TRUE THEN
        IF bInc.tag = ClsLilo.sRootInstall AND MdlLiloOsList.bVlCliOption = TRUE THEN 
                        sCliSection = Replace(sSection, "append = \"" & sEntryApnd & "\"", "append = \"2 " & sEntryApnd & "\"") 'splash=silent\"")
                        sCliSection = Replace(sCliSection, "label = " & sEntryLbl, "label = " & sEntryLbl & "-tui")
                        sCliSection = sCliSection & gb.NewLine
        ELSE 
                      sCliSection = ""
        END IF
        'END IF 
  'NEXT                    
    ELSE 
      sSection = ""
    
  END IF
 sFile = sFile & sCliSection & sSection
NEXT 

FOR EACH binc IN MdlLiloOsList.arrWinInstalls
  IF binc.Value = TRUE THEN 
    FOR EACH tb IN MdlLiloOsList.arrWinLabels
      IF tb.tag = binc.tag THEN 
        sEntryLbl = tb.Tag
      END IF
    NEXT 
      sWinSection = "other = " & tb.Tag & gb.NewLine &
        "label = " & tb.Text & gb.NewLine &
        "table = " & Left(tb.Tag, 8) & "\n" & gb.NewLine
  ELSE 
    sWinSection = ""
  END IF
sFile = sFile & sWinSection
NEXT 

sDotConf = Trim(sFile)  

  
  
END

PUBLIC SUB PERFORM_BINDING()
  
  DIM sOut AS String
  DIM cb AS CheckBox
  DIM cbox AS ComboBox
  DIM sArch AS String

EXEC ["uname", "-r"] TO sArch
IF Exist("/lib" &/ "modules" &/ Trim(sarch)) = FALSE THEN 
' running hosted install detected
        EXEC ["mkdir", "-p", "/lib" &/ "modules" &/ Trim(sarch)] WAIT 
    SHELL "mount -o bind /mnt/target/lib/modules" &/ Trim(sarch) & " /lib/modules" &/ Trim(sarch) & " && depmod -aq"
END IF
              

'SHELL "mount -o bind /mnt/target/lib /lib && depmod -aq && /etc/rc.d/rc.udev restart" WAIT 
EXEC ["mount", "-o", "bind", "/sys", ClsGlobal.sTargetMnt &/ "sys"] WAIT 
EXEC ["mount", "-o", "bind", "/proc", ClsGlobal.sTargetMnt &/ "proc"] WAIT 
EXEC ["mount", "-o", "bind", "/tmp", ClsGlobal.sTargetMnt &/ "tmp"] WAIT 
EXEC ["mount", "-o", "bind", "/dev", ClsGlobal.sTargetMnt &/ "dev"] WAIT 



'We will run the commands neccisary to setup the newly installed system here
EXEC ["mkdir", "-p", ClsGlobal.sTargetMnt &/ "var" &/ "log" &/ "setup"] WAIT 
'SHELL "mkdir -p " & ClsGlobal.sTargetMnt &/ "var/log/setup" WAIT 
'SHELL "chmod 700 " & ClsGlobal.sTargetMnt &/ "var/log/setup" WAIT 
EXEC ["chmod", "700", ClsGlobal.sTargetMnt &/ "var" &/ "log" &/ "setup"] WAIT 
sOut = "#!/bin/bash \n" &
"DISPLAY=" & gb.NewLine &
"chmod +x /etc/rc.d/rc.udev" & gb.NewLine &
"/etc/rc.d/rc.udev restart" & gb.NewLine &
"/etc/rc.d/rc.modules" & gb.NewLine &
"sleep 2" & gb.NewLine &
"/sbin/vlsetup" & gb.NewLine &
"/sbin/vhwconf" & gb.NewLine &
"cd /usr/lib && ln -sf preloadable_libintl.so libgnuintl.so.8 && rm libintl.so 2>/dev/null; ln -s preloadable_libintl.so libintl.so" & gb.NewLine &
"/sbin/valsaconf-quiet" & gb.NewLine &
"cd / && for i in /var/log/scripts/x11-fonts*;do sh $i &>/dev/null;done" & gb.NewLine &
"rm -r /root/.mc 2>/dev/null" & gb.NewLine &
"for i in /usr/share/icons/*;do cd $i 2>/dev/null && if [ -e convert.sh ];then sh convert.sh & 2>/dev/null;fi;done" & gb.NewLine &
"cd / && sh /var/log/scripts/gsb-desktop* & 2>/dev/null" & gb.NewLine &
"update-mime-database /usr/share/mime/" & gb.NewLine &
"sleep 20"
'"echo done >/tmp/status" & gb.NewLine


File.Save(ClsGlobal.sTargetMnt &/ "var/log/setup/config-vinstall-ng", sOut)

EXEC ["chmod", "+x", ClsGlobal.sTargetMnt &/ "var" &/ "log" &/ "setup" &/ "config-vinstall-ng"] WAIT 

SHELL "chroot /mnt/target /sbin/depmod -aq" WAIT 


'this is the script that runs after reboot.
 sOut = "#!/bin/bash \n" &
 ". /sbin/vasm-functions \n" &
 "TEXT=\" \n" &
 "Vector Linux Has been Installed. " &
 "We will finalize video settings on the next few screens. " &
 "Any other system fine tuning can be done via VASM.  \n\nEnjoy AND happy Vectoring...\" \n" &
 "$DCMD --backtitle \"$BACKTITLE\" --title \"CONGRATULATIONS\" " &
 "--msgbox \"$TEXT\" 0 0 2>/dev/NULL  \n" &
 "#cd / && sh /var/log/scripts/x11-fonts* \n " &
 "#alsaconf \n " &
 "alsactl store \n " &
 "/sbin/vxconf \n" &
 "#/sbin/vsrvset \n" &
 "#/sbin/config-stage1 gui-installer" & gb.NewLine
 
EXEC ["mkdir", "-p", ClsGlobal.sTargetMnt &/ "var" &/ "log" &/ "setup" &/ "init"] WAIT 
EXEC ["chmod", "700", ClsGlobal.sTargetMnt &/ "var" &/ "log" &/ "setup" &/ "init"] WAIT 
EXEC ["touch", ClsGlobal.sTargetMnt &/ "var" &/ "log" &/ "setup" &/ "init" &/ "config-stage2"] WAIT 
 
 
 File.Save(ClsGlobal.sTargetMnt &/ "var/log/setup/init/config-stage2", sOut)
 
 EXEC ["chmod", "+x", ClsGlobal.sTargetMnt &/ "var" &/ "log" &/ "setup" &/ "init" &/ "config-stage2"] WAIT 
 
IF Exist(ClsGlobal.sTargetMnt &/ "tmp" &/ "status") THEN KILL ClsGlobal.sTargetMnt &/ "tmp" &/ "status"
IF Exist("/tmp/status") THEN KILL "/tmp/status"

hBgConfigProc = SHELL "chroot /mnt/target /var/log/setup/config-vinstall-ng ; echo Done > /tmp/status" ' FOR READ" 
'FrmDone.tmBgMon.Enabled = TRUE
 


END

