' Gambas module file

' ### SYSTEMWIDE FUNCTIONS ###

PUBLIC FUNCTION AutoUnits(capacity AS Long) AS String
' Return drive/partition size in nicer units as "value;unit" string:
DIM temp AS Long

IF capacity < 1000 THEN ' Bytes:
   RETURN Format$(capacity, "###,###,###,###") & ";B"
ELSE IF capacity < 1000000 THEN ' Kilobytes:
   RETURN Format$(capacity / 1024, "###,###,###,###") & ";KB"
   'gridDisk[m + 1,units].Text = "KB"
ELSE IF capacity < 1000000000 THEN ' Megabytes:
   RETURN Format$(capacity / 1048576, "###,###,###,###") & ";MB"
   'gridDisk[m + 1,units].Text = "MB"
ELSE IF capacity < 1000000000000 ' Gigabytes:
   RETURN Format$(capacity / 1073741824, "####,###,###,###") & ";GB"
ELSE 'Terabytes
   RETURN Format$(capacity / 1099511627776, "####,###,###,###") & ";TB"
END IF

END

PUBLIC FUNCTION getPartType(t AS String) AS String
' Return partition type (t) string from partition type code:

IF Trim$(t) = "0" THEN RETURN "Empty"
IF Trim$(t) = "1" THEN RETURN "FAT12"
IF Trim$(t) = "2" THEN RETURN "XENIX root"
IF Trim$(t) = "3" THEN RETURN "XENIX usr"
IF Trim$(t) = "4" THEN RETURN "FAT16 <32MB"
IF Trim$(t) = "5" THEN RETURN "Extended"
IF Trim$(t) = "6" THEN RETURN "FAT16"
IF Trim$(t) = "7" THEN RETURN "HPFS/NTFS"
IF Trim$(t) = "8" THEN RETURN "AIX"
IF Trim$(t) = "9" THEN RETURN "AIX bootable"
IF Trim$(t) = "a" THEN RETURN "OS/2 Boot Manager"
IF Trim$(t) = "b" THEN RETURN "W95 FAT32"
IF Trim$(t) = "c" THEN RETURN "W95 FAT32 (LBA)"
IF Trim$(t) = "e" THEN RETURN "W95 FAT16 (LBA)"
IF Trim$(t) = "f" THEN RETURN "W95 Extended (LBA)"
IF Trim$(t) = "10" THEN RETURN "OPUS"
IF Trim$(t) = "11" THEN RETURN "Hidden FAT12"
IF Trim$(t) = "12" THEN RETURN "Compaq diagnostics"
IF Trim$(t) = "14" THEN RETURN "Hidden FAT16 <32MB"
IF Trim$(t) = "16" THEN RETURN "Hidden FAT16"
IF Trim$(t) = "17" THEN RETURN "Hidden HPFS/NTFS"
IF Trim$(t) = "18" THEN RETURN "AST SmartSleep"
IF Trim$(t) = "1b" THEN RETURN "Hidden W95 FAT32"
IF Trim$(t) = "1c" THEN RETURN "Hidden W95 FAT32 (LBA)"
IF Trim$(t) = "1e" THEN RETURN "Hidden W95 FAT16 (LBA)"
IF Trim$(t) = "24" THEN RETURN "NEC DOS"
IF Trim$(t) = "39" THEN RETURN "Plan 9"
IF Trim$(t) = "3c" THEN RETURN "PartitionMagic recovery"
IF Trim$(t) = "40" THEN RETURN "Venix 80286"
IF Trim$(t) = "41" THEN RETURN "PPC PReP Boot"
IF Trim$(t) = "42" THEN RETURN "SFS"
IF Trim$(t) = "4d" THEN RETURN "QNX4.x"
IF Trim$(t) = "4e" THEN RETURN "QNX4.x 2nd part"
IF Trim$(t) = "4f" THEN RETURN "QNX4.x 3rd part"
IF Trim$(t) = "50" THEN RETURN "OnTrack DM"
IF Trim$(t) = "51" THEN RETURN "OnTrack DM6 Aux1"
IF Trim$(t) = "52" THEN RETURN "CP/M"
IF Trim$(t) = "53" THEN RETURN "OnTrack DM6 Aux3"
IF Trim$(t) = "54" THEN RETURN "OnTrack DM6"
IF Trim$(t) = "55" THEN RETURN "EZ-Drive"
IF Trim$(t) = "56" THEN RETURN "Golden Bow"
IF Trim$(t) = "5c" THEN RETURN "Priam Edisk"
IF Trim$(t) = "61" THEN RETURN "SpeedStor"
IF Trim$(t) = "63" THEN RETURN "GNU HURD or SysV"
IF Trim$(t) = "64" THEN RETURN "Novell Netware 286"
IF Trim$(t) = "65" THEN RETURN "Novell Netware 386"
IF Trim$(t) = "70" THEN RETURN "DiskSecure Multi-Boot"
IF Trim$(t) = "75" THEN RETURN "PC/IX"
IF Trim$(t) = "80" THEN RETURN "Old Minix"
IF Trim$(t) = "81" THEN RETURN "Minix / old Linux"
IF Trim$(t) = "82" THEN RETURN "Linux swap"
IF Trim$(t) = "83" THEN RETURN "Linux"
IF Trim$(t) = "84" THEN RETURN "OS/2 hidden C: drive"
IF Trim$(t) = "85" THEN RETURN "Linux extended"
IF Trim$(t) = "86" THEN RETURN "NTFS volume set"
IF Trim$(t) = "87" THEN RETURN "NTFS volume set"
IF Trim$(t) = "88" THEN RETURN "Linux plaintext"
IF Trim$(t) = "8e" THEN RETURN "Linux LVM"
IF Trim$(t) = "93" THEN RETURN "Amoeba"
IF Trim$(t) = "94" THEN RETURN "Amoeba BBT"
IF Trim$(t) = "9f" THEN RETURN "BSD/OS"
IF Trim$(t) = "a0" THEN RETURN "IBM Thinkpad hibernate"
IF Trim$(t) = "a5" THEN RETURN "FreeBSD"
IF Trim$(t) = "a6" THEN RETURN "OpenBSD"
IF Trim$(t) = "a7" THEN RETURN "NeXTSTEP"
IF Trim$(t) = "a8" THEN RETURN "Darwin UFS"
IF Trim$(t) = "a9" THEN RETURN "NetBSD"
IF Trim$(t) = "ab" THEN RETURN "Darwin boot"
IF Trim$(t) = "b7" THEN RETURN "BSDI fs"
IF Trim$(t) = "b8" THEN RETURN "BSDI swap"
IF Trim$(t) = "bb" THEN RETURN "Boot Wizard hidden"
IF Trim$(t) = "be" THEN RETURN "Solaris boot"
IF Trim$(t) = "bf" THEN RETURN "Solaris"
IF Trim$(t) = "c1" THEN RETURN "DRDOS/sec (FAT-12)"
IF Trim$(t) = "c4" THEN RETURN "DRDOS/sec (FAT-16 <32MB)"
IF Trim$(t) = "c6" THEN RETURN "DRDOS/sec (FAT-16)"
IF Trim$(t) = "c7" THEN RETURN "Syrinx"
IF Trim$(t) = "da" THEN RETURN "Non-FS data"
IF Trim$(t) = "db" THEN RETURN "CP/M / CTOS / ..."
IF Trim$(t) = "de" THEN RETURN "Dell Utility"
IF Trim$(t) = "df" THEN RETURN "BootIt"
IF Trim$(t) = "e1" THEN RETURN "DOS access"
IF Trim$(t) = "e3" THEN RETURN "DOS R/O"
IF Trim$(t) = "e4" THEN RETURN "SpeedStor"
IF Trim$(t) = "eb" THEN RETURN "BeOS fs"
IF Trim$(t) = "ee" THEN RETURN "EFI GPT"
IF Trim$(t) = "ef" THEN RETURN "EFI (FAT-12/16/32)"
IF Trim$(t) = "f0" THEN RETURN "Linux/PA-RISC boot"
IF Trim$(t) = "f1" THEN RETURN "SpeedStor"
IF Trim$(t) = "f2" THEN RETURN "DOS secondary"
IF Trim$(t) = "f4" THEN RETURN "SpeedStor"
IF Trim$(t) = "fd" THEN RETURN "Linux raid autodetect"
IF Trim$(t) = "fe" THEN RETURN "LANstep"
IF Trim$(t) = "ff" THEN RETURN "BBT"
'IF Trim$(t) = "" THEN RETURN ""

RETURN "unknown"

END

PUBLIC FUNCTION MakeTree(BaseDir AS String) AS Boolean
' Create a full FHS dir tree within BaseDir:

MKDIR BaseDir &/ "bin"
MKDIR BaseDir &/ "boot"
MKDIR BaseDir &/ "etc"
   MKDIR BaseDir &/ "etc/opt"
MKDIR BaseDir &/ "home"
MKDIR BaseDir &/ "lib"
MKDIR BaseDir &/ "media"
   MKDIR BaseDir &/ "media/cdrom"
   MKDIR BaseDir &/ "media/floppy"
MKDIR BaseDir &/ "mnt"
MKDIR BaseDir &/ "opt"
MKDIR BaseDir &/ "root"
MKDIR BaseDir &/ "sbin"
MKDIR BaseDir &/ "srv"
MKDIR BaseDir &/ "tmp"
MKDIR BaseDir &/ "usr"
   MKDIR BaseDir &/ "usr/bin"
   MKDIR BaseDir &/ "usr/include"
   MKDIR BaseDir &/ "usr/lib"
   MKDIR BaseDir &/ "usr/local"
      MKDIR BaseDir &/ "usr/local/bin"
      MKDIR BaseDir &/ "usr/local/include"
      MKDIR BaseDir &/ "usr/local/lib"
      MKDIR BaseDir &/ "usr/local/sbin"
      MKDIR BaseDir &/ "usr/local/share"
         MKDIR BaseDir &/ "usr/local/share/doc"
         MKDIR BaseDir &/ "usr/local/share/info"
         MKDIR BaseDir &/ "usr/local/share/locale"
         MKDIR BaseDir &/ "usr/local/share/man"
            MKDIR BaseDir &/ "usr/local/share/man/man1"
            MKDIR BaseDir &/ "usr/local/share/man/man2"
            MKDIR BaseDir &/ "usr/local/share/man/man3"
            MKDIR BaseDir &/ "usr/local/share/man/man4"
            MKDIR BaseDir &/ "usr/local/share/man/man5"
            MKDIR BaseDir &/ "usr/local/share/man/man6"
            MKDIR BaseDir &/ "usr/local/share/man/man7"
            MKDIR BaseDir &/ "usr/local/share/man/man8"
         MKDIR BaseDir &/ "usr/local/share/misc"
         MKDIR BaseDir &/ "usr/local/share/terminfo"
         MKDIR BaseDir &/ "usr/local/share/zoneinfo"
      MKDIR BaseDir &/ "usr/local/src"
   MKDIR BaseDir &/ "usr/sbin"
   MKDIR BaseDir &/ "usr/share"
      MKDIR BaseDir &/ "usr/share/doc"
      LINK BaseDir &/ "usr/doc" TO BaseDir &/ "usr/share/doc"
      LINK BaseDir &/ "usr/local/doc" TO BaseDir &/ "usr/local/share/doc"
      MKDIR BaseDir &/ "usr/share/info"
      LINK BaseDir &/ "usr/info" TO BaseDir &/ "usr/share/info"
      LINK BaseDir &/ "usr/local/info" TO BaseDir &/ "usr/local/share/info"
      MKDIR BaseDir &/ "usr/share/locale"
      MKDIR BaseDir &/ "usr/share/man"
      LINK BaseDir &/ "usr/man" TO BaseDir &/ "usr/share/man"
      LINK BaseDir &/ "usr/local/man" TO BaseDir &/ "usr/local/share/man"
         MKDIR BaseDir &/ "usr/share/man/man1"
         MKDIR BaseDir &/ "usr/share/man/man2"
         MKDIR BaseDir &/ "usr/share/man/man3"
         MKDIR BaseDir &/ "usr/share/man/man4"
         MKDIR BaseDir &/ "usr/share/man/man5"
         MKDIR BaseDir &/ "usr/share/man/man6"
         MKDIR BaseDir &/ "usr/share/man/man7"
         MKDIR BaseDir &/ "usr/share/man/man8"
      MKDIR BaseDir &/ "usr/share/misc"
      MKDIR BaseDir &/ "usr/share/terminfo"
      MKDIR BaseDir &/ "usr/share/zoneinfo"
   MKDIR BaseDir &/ "usr/src"
MKDIR BaseDir &/ "var"
   MKDIR BaseDir &/ "var/cache"
   MKDIR BaseDir &/ "var/lib"
      MKDIR BaseDir &/ "var/lib/locate"
      MKDIR BaseDir &/ "var/lib/misc"
   MKDIR BaseDir &/ "var/local"
   MKDIR BaseDir &/ "var/lock"
   MKDIR BaseDir &/ "var/log"
   MKDIR BaseDir &/ "var/mail"
   MKDIR BaseDir &/ "var/opt"
   MKDIR BaseDir &/ "var/run"
   MKDIR BaseDir &/ "var/spool"
   MKDIR BaseDir &/ "var/tmp"

' Success:
RETURN TRUE

CATCH ' Failed, usually due to already existing dirs:
   RETURN FALSE

END

PUBLIC FUNCTION CalcSwap(sysmem AS Long) AS Long
'Calculate the theoretical swap partition size based on system memory, in bytes

IF sysmem < 134217728 THEN 
   RETURN sysmem * 2.5
ELSE IF sysmem < 268435456 AND sysmem > 134217728 THEN 
   RETURN sysmem * 2
ELSE 
   RETURN 536870912 'Don't return swap partition sizes above 512MB
ENDIF 
  
END

PUBLIC FUNCTION CalcPaksSize(selected_paks AS String) AS Long
'Calculate the space required by the user's package selection
DIM arsPackages AS string[]
DIM hPackageConfig AS file
DIM sLine AS String
DIM sPackageRef AS String
DIM iSize AS Long

iSize = 0
arsPackages = Split(selected_paks, ";") 'selected_packs is semi-colon delimited

'The config file must have the following layout for easy parsing
'(Package sizes must be in bytes!)
'
'Group: Base
'  Package_0:veclinux/required/veclinux.tlz|856480|Base System
'  Package_1:veclinux/required/vlconfig.tlz|33792|Config Files
'Group: Dev

OPEN "/tmp/mnt/SOURCE/veclinux/vinstall-ng_packages.conf" FOR READ AS #hPackageConfig
   WHILE NOT Eof(hPackageConfig)
      LINE INPUT #hPackageConfig, sLine
      
      'Find the sizes that correspond to each package reference by parsing the configuration file
      FOR EACH sPackageRef IN arsPackages
         IF InStr(sLine, "Package_" & sPackageRef & ":") > 0 THEN 
            iSize = iSize + Val(Trim$(Mid$(Left$(sLine, RInStr(sLine, "|") - 1), InStr(sLine, "|") + 1)))
         ENDIF 
      NEXT 
   WEND 
CLOSE #hPackageConfig

RETURN iSize

END

PUBLIC FUNCTION AutoRootSize() AS Long
'Calculate the size of the theoretical root partition
DIM iRootSize AS Long
DIM iTotalSize AS Long
DIM sTemp AS String

Utils.GetSysMemory

IF Global.SimulationMode = TRUE THEN 
   sTemp = "3800000"
ELSE 
   SHELL "fdisk -s " & Global.installDrive TO sTemp
ENDIF 

iTotalSize = Val(sTemp) * 1024 'Convert to bytes

'Return the size to be used for the root partition, in bytes, with a "safety margin" of 150MB
iRootSize = iTotalSize - CalcSwap(Global.SysMemory) - 157286400
RETURN iRootSize

END
