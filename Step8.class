' Gambas class file
'    This file is part of vinstall-ng

'    vinstall-ng is free software: you can redistribute it and/or modify
'    it under the terms of the GNU General Public License as published by
'    the Free Software Foundation, either version 2 of the License, or
'    (at your option) any later version.

'    vinstall-ng  is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'    GNU General Public License for more details.

'    You should have received a copy of the GNU General Public License
'    along with vinstall-ng.  If not, see <http://www.gnu.org/licenses/>.

PRIVATE PicInfo AS Picture
PRIVATE PicTask AS Picture
PRIVATE PicDisk AS Picture
PRIVATE PicPackage AS Picture
PRIVATE PicTlz AS Picture

PUBLIC SUB Form_Open()

  ME.tlbanner.Text = "<h2>" & tlbanner.text & "</h2>"
  PicInfo = Picture.load("images/info.png")
  PicTask = Picture.load("images/task-due.png")
  PicDisk = Picture.load("images/hdd.png")
  PicPackage = Picture.Load("images/package.png")
  PicTlz = Picture.Load("images/tlz.png")
  'ME.SUMMARIZE_DISTRO_INFO()
  'ME.SUMMARIZE_PARTITION_SELECTION()

END
PUBLIC FUNCTION GetNext() AS String
  
  'RETURN "Step9"
  RETURN "Conf0"
  
END

PUBLIC SUB SUMMARIZE_DISTRO_INFO()
  
  WITH ME.TreeView1
    .Add("DistroInfo", ("Distribution"), MdlStartUp.pCategory)
    .Add("Distro0", ClsGlobal.sDistroName & Space(1) & ClsGlobal.sDistroVer, PicInfo, "DistroInfo")
    '.Add("Distro0", ("Name"), PicInfo, "DistroInfo")
    '.Add("Distro00", Trim(ClsGlobal.sDistroName),, "Distro0")
    '.Add("Distro1", ("Version"), PicInfo, "DistroInfo")
    '.'Add("Distro10", Trim(ClsGlobal.sDistroVer),, "Distro1")
  END WITH 
  
END

PUBLIC SUB SUMMARIZE_PARTITION_SELECTION()
  DIM i AS Integer
  DIM sList AS String
  DIM sArr, sEntry, sSwaps AS String[]
  DIM sPart, sMntPnt, sFs, sSwap, sSize AS String
  
  
  WITH ME.TreeView1
    .Add("Part", ("Partitions to be used"), MdlStartUp.pCategory)
    IF ClsGlobal.bAutoPartition = FALSE THEN 
      sArr = Split(ClsGlobal.sVitalPartList, "|")
        FOR i = 0 TO sArr.Max
          sList = Trim(sArr[i])
        IF sList THEN 
            sEntry = Split(sList, "-")
            sPart = Trim(sEntry[0])
            sSize = Trim(sEntry[1])
            sMntPnt = Trim(sEntry[2])
            sFs = Trim(sEntry[3])
              IF sfs LIKE ("Do not format") THEN 
                sFs = "(" & ("Not Formatted") & ")" & "," & Space(1) & ("Mount to") & Space(1)
              ELSE IF sfs = ("Format to") & Space(1) & sFs & Space(1) & ("and mount to") & Space(1)
              ELSE IF Len(sFS) <= 0 THEN 
                sFs = "(" & ("Not Formatted") & ")" & Space(1) & ("Mount to") & Space(1)
              ELSE 
                sFs = ("Format to") & Space(1) & sFs & Space(1) & ("and mount to") & Space(1)
              END IF
          .Add("Part." & i, sPart & " -- " & sSize, PicDisk, "Part")
          .add("Part." & i & "." & i, sFs & sMntPnt, PicTask, "Part." & i)
          '.Add("Part." & i & "." & i, sMntPnt,, "Part." & i)
          '.Add("Part." & i & "." & i & "." & i, sFs,, "Part." & i & "." & i)
        END IF
        NEXT 
        
        ' summarize swap partitions
        sSwaps = Split(Trim(ClsGlobal.sWapPartList), "|")
          IF sSwaps.Count <= 0 THEN 
            .Add("Swaps", ("NO SWAP SPACE SELECTED"),, "Part")
              PRINT "No swap space selected for installation.!"
          
          
          ELSE 'IF sSwaps THEN 
            .Add("Swaps", ("Swap Space"),, "Part")
          END IF
          FOR i = 0 TO sSwaps.Max
            sSwap = Trim(sSwaps[i])
              IF sSwap THEN 
                'sSwap = Left(sSwap, InStr(sSwap,"-"))
                
                .Add("Swaps" & i, Left(sSwap, InStr(sSwap, "-") - 1) & Space(1) & " -- " & Right(sSwap, Len(sSwap) - InStr(sSwap, "-")), PicDisk, "Swaps")
              END IF
          NEXT 
    ELSE  ' AUTOMATIC PARTITIONING SELECTED
      'Message("Automatic partition selection")
      .Add("Part1", Replace(ClsGlobal.sTargetRoot, "-", " -- "), PicDisk, "Part")
      .Add("Part1.1", ("Pre-formatted to reiserfs, and used for /"), PicTask, "Part1")
      .Add("Swaps", ("Swap Space"),, "Part")
      .Add("Swaps1", Replace(ClsGlobal.sTargetSwap, "-", " -- "), PicDisk, "Swaps")
      '.Add("Swaps1.1",
    END IF
  END WITH 
  
END

PUBLIC SUB SUMMARIZE_INSTALL_TYPE()
  
  DIM sInsType, sList, sPkg, sBulkList, sBulk AS String
  DIM sBulks, sPkgs AS String[]
  DIM i AS Integer
  
  SELECT CASE ClsGlobal.iInstallMethod
    CASE 0
      sInsType = ("Full")
    CASE 1
      sInsType = ("Customized")
    CASE 2
      sInsType = ("Minimal")
  END SELECT 
  
  ME.TreeView1.Add("Install Type", ("Installation Method"), MdlStartUp.pCategory)
  ME.TreeView1.Add("Install Type.1", sInsType, PicInfo, "Install Type")
  
  ' if installation is customized... provide details
  IF ClsGlobal.iInstallMethod = 1 THEN 
    ME.TreeView1.Add("Software", ("Software Selection"), MdlStartUp.pCategory)
    ME.TreeView1.Add("Bulks", ("Major Components"),, "Software")
    
      sBulkList = ClsGlobal.sBulkListToInstall
      sBulks = Split(sBulkList, ",")
        FOR i = 0 TO sBulks.Max
          sBulk = Trim(sBulks[i])
          IF sBulk THEN 
            ME.TreeView1.Add(sBulk, sBulk, PicTlz, "Bulks")
          END IF
        NEXT 
    ME.TreeView1.Add("Pkgs", ("Additional Software"),, "Software")
    
      sList = ClsGlobal.sPkgListToInstall
      sPkgs = Split(sList, ",")
        FOR i = 0 TO sPkgs.Max
          sPkg = Trim(sPkgs[i])
            IF sPkg THEN 
              ME.TreeView1.Add(sPkg, sPkg, PicPackage, "Pkgs")
            END IF
        NEXT 
        
  END IF
    
  
END



PUBLIC SUB OnExit()
  
  
  
END

PUBLIC SUB Expand_Tree()
  
  ME.TreeView1["DistroInfo"].Expanded = TRUE
  ME.TreeView1["Part"].Expanded = TRUE
  ME.TreeView1["Install Type"].Expanded = TRUE
    IF ME.TreeView1.Exist("Software") THEN 
    ME.TreeView1["Software"].Expanded = TRUE
  END IF
  
END


PUBLIC SUB StartUp()
  ME.TreeView1.Clear()
  ME.SUMMARIZE_DISTRO_INFO()
  ME.SUMMARIZE_PARTITION_SELECTION()
  ME.SUMMARIZE_INSTALL_TYPE()
  ME.Expand_Tree()
  
END


