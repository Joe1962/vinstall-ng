' Gambas class file


'    This file is part of vinstall-ng

'    vinstall-ng is free software: you can redistribute it and/or modify
'    it under the terms of the GNU General Public License as published by
'    the Free Software Foundation, either version 2 of the License, or
'    (at your option) any later version.

'    vinstall-ng  is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'    GNU General Public License for more details.

'    You should have received a copy of the GNU General Public License
'    along with vinstall-ng.  If not, see <http://www.gnu.org/licenses/>.


PUBLIC iUID AS Integer = 1000
PRIVATE tly AS Integer
PRIVATE otl AS Object[]
PUBLIC otb AS Object[]


PUBLIC SUB Form_Open()
  
  Fmain.frmcurr = ME
  MdlUsrAdd.iUsrAccts = 0
  WITH FMain
    .FrmCurr = ME
    .tvPlan["Conf2"].Picture = MdlCore.sDonePic
    .tvPlan["Conf3"].picture = MdlCore.sNowPic
    .tvPlan["Conf3"].Selected = TRUE
  END WITH 
    WITH ME
      .tlBanner.Text = "<h3>" & ("Create User Accounts") & "</h3>"
      .tbPicPath.Visible = FALSE
      .btBrowse.Visible = FALSE
    END WITH 
    'WAIT 3
    otl = NEW Object[]
    otb = NEW Object[]
        WITH otl
        .Add(ME.TextLabel2)
        .Add(ME.tlRealName)
        .Add(ME.TextLabel3)
        .Add(ME.TextLabel4)
        '.Add(ME.tlRealName)
      END WITH 
    WITH otb
      .Add(ME.tbPasswd1)
      .Add(ME.tbPasswd2)
      .Add(ME.tbRealname)
      .Add(ME.tbUsername)
    END WITH 
        
    
    MdlUsrAdd.DISPLAY_USER_GROUP_OPTIONS()
    FMain.btnext.Enabled = TRUE
END 


PUBLIC SUB Button1_Click()
  DIM sCAPS AS String
  DIM sCHAR AS String
  DIM sLogE AS String
  DIM sPicdir AS String = ClsGlobal.sTargetMnt &/ "usr/share/apps/kdm/pics/users/"
  DIM sGroups AS String '= '"plugdev,disk,cdrom,floppy,lp,scanner,audio,video,games"
  DIM cb AS CheckBox
  DIM tl AS TextLabel
  'DIM tly AS Integer


    ' increment the number of user accounts created
    INC MdlUsrAdd.iUsrAccts

'Message("Ateempting to create user now")
   
  IF ME.tbUsername.Text = "" THEN 
  Balloon.Error(("Enter the login name that this user will user to login to this system."), ME.tbUsername)
    'Message(("Enter the login name that this user will use to login to this system."))
    RETURN 
    STOP EVENT 
  ELSE 
    'SHELL "echo " & ME.tbUsername.Text & "| grep -e \'[A-Z]\'" TO sCAPS
    IF ME.tbUsername.text LIKE "*[A-Z]*" THEN
    'IF ME.tbUsername.textNOT LIKE "*[a-z0-9_-]*" THEN 
    Balloon.Error(("Login name field contains illegal characters. Please use only lowercase letters and numbers"), ME.tbUsername)
    'Message.Error(("Login name field contains illegal characters. Please use only lowercase letters and numbers")) 
      RETURN 
      STOP EVENT 
    'ELSE IF ME.tbUsernameNOT LIKE "*[a-z0-9_-]*" THEN 
      
    
    END IF
    
    SHELL "echo " & ME.tbUsername.Text & "| grep -e \'[^a-z0-9_-]\'" TO sCHAR
    'SHELL "grep -e ^" & ME.tbUsername.Text & Space(1) & ClsGlobal.sTargetMnt &/ "etc/passwd" TO sLogE 
    SHELL "grep -e ^" & ME.tbUsername.Text & ": " & clsglobal.sTargetMnt &/ "etc" &/ "passwd" TO sLogE
    
   IF sCHAR <> "" THEN
      Message(("Username contains illegal characters"))
      RETURN 
    ELSE IF sLogE <> "" THEN
      Message(("User account for") & Space(1) & ME.tbUsername.Text & Space(1) & ("already exists"))
      RETURN 
    ELSE   
      IF ME.tbPasswd1.Text = "" THEN 
        Message(("Enter a password for") & Space(1) & ME.tbUsername.text)
        RETURN 
      ELSE 
        IF ME.tbPasswd1.Text = ME.tbPasswd2.Text THEN 

            'COMPILE LIST OF GROUPS THIS USER WILL BELONG TO
                FOR EACH cb IN MdlUsrAdd.objGrps
                  IF cb.Value = TRUE THEN 
                    sGroups = sGroups & "," & cb.Text
                  END IF
              NEXT 
                sGroups = Right(sGroups, Len(sGroups) - 1)
                'Message(sGroups)
             'need to do some binding for this to work
            'PRINT "Mounting system locations with bind options"
            'SHELL "mount -o bind /sys /mnt/target/sys" WAIT 
            'SHELL "mount -o bind /tmp /mnt/target/tmp" WAIT 
            'SHELL "mount -o bind /proc /mnt/target/proc" WAIT 
            'SHELL "mount -o bind /dev /mnt/target/dev" WAIT 
            'PRINT "Deleting old user group"
            
          SHELL "chroot /mnt/target  /usr/sbin/groupdel " & ME.tbUsername.Text WAIT '& " &> /dev/null" WAIT 
          'SHELL "chroot /mnt/target /usr/sbin/groupadd -g " & iUID & Space(1) & ME.tbUsername.Text WAIT 
          PRINT "Creating new user group"
          SHELL "chroot /mnt/target /usr/sbin/groupadd " & "-g" & Space(1) & iUID & Space(1) & ME.tbUsername.Text WAIT '& " &> /dev/null" WAIT 
          
          'Message("chroot /mnt/target /usr/sbin/useradd -m -s /bin/bash -u " & iUID & " -g " & ME.tbUsername.Text & " -G " & sGroups & ME.tbUsername.Text)
          
          'SHELL "chroot /mnt/target  /usr/sbin/useradd -m -s /bin/bash -u " & iUID & " -g " & ME.tbUsername.Text & " -G " & sGroups & Space(1) & ME.tbUsername.Text WAIT 
          PRINT "Creating new user account"
          SHELL "chroot /mnt/target /usr/sbin/useradd -m -c " & "\'" & ME.tbRealname.text & "\'" & " -g " & ME.tbUsername.text &
          " -p " & ME.tbPasswd1.text & " -u " & iUID & " -G " & "\'users," & sGroups & "\' -s /bin/bash " & ME.tbUsername.Text WAIT 
        '  sDocmd = "useradd -m -c " & "\'" & sname & "\'" & " -g " & slogin & " -p " & ME.txtpass1.Text & 
       '" -G " & "\'" & sgrparse & "\' " & slogin
          
          'Message("chroot /mnt/target /sbin/passwdx " & ME.tbUsername.Text & Space(1) & ME.tbPasswd1.Text)
          SHELL "chroot /mnt/target /sbin/passwdx " & ME.tbUsername.Text & Space(1) & ME.tbPasswd1.Text WAIT 
          'IF IsDir(sPicdir) THEN 
          IF bUsePic.Value = TRUE THEN 
            'SHELL "cd " & sPicdir & " && ln -s root1.png root.face.icon"          ' This needs to go somewhere else
            'SHELL "cd " & sPicdir & " ; ln -s default3.png " & ME.tbUsername.Text & ".face.icon"
            'this next line is for kdm
            SHELL "cd " & sPicdir & "; ln -s " & Replace(tbPicPath.Text, ClsGlobal.sTargetMnt, "") & Space(1) & tbUsername.Text & ".face.icon" WAIT 
            'the next lines are for gdm
            PRINT tbPicPath.Text
            'SHELL "cp " & Replace(tbPicPath.Text, ClsGlobal.sTargetMnt, "") & Space(1) & ClsGlobal.sTargetMnt &/ "home/" & tbUsername.Text & "/.face" WAIT 
            COPY Trim(tbPicPath.Text) TO clsglobal.sTargetMnt &/ "home" &/ tbUsername.text &/ ".face"
            SHELL "chmod 644 " & ClsGlobal.sTargetMnt &/ "home/" & tbUsername.Text & "/.face" WAIT 
            SHELL "chroot " & ClsGlobal.sTargetMnt & " chown " & tbUsername.Text & Space(1) &/ "home/" & tbUsername.Text & "/.face" WAIT
            SHELL "chroot " & ClsGlobal.sTargetMnt & " chgrp " & tbUsername.Text & Space(1) &/ "home/" & tbUsername.Text & "/.face" WAIT
          ENDIF 
          'Message(("User account for") & Space(1) & ME.tbUsername.Text & Space(1) & ("was created."))
                ' easy way to create the account here
                  tl = NEW TextLabel(ME.LstUsers)
                    WITH tl
                      .Text = ME.tbUsername.Text
                      .Height = 21
                      .Width = MdlObjSizer.get_object_width(.Text)
                      .ToolTip = ME.tbRealname.Text
                      .Move(4, tly)
                    END WITH 
                    tly = tly + tl.Height + 2
         btClrFrm_Click() ' clear the form
          INC iUID
        ELSE 
          Message(("Passwords do not match"))
          Balloon.Info(("Enter the same password twice"), ME.tbPasswd1)
          ME.tbPasswd1.Clear
          ME.tbPasswd2.Clear
          RETURN 
          STOP EVENT 
        ENDIF 
      ENDIF 
    ENDIF
  ENDIF  
  'SHELL "umount /mnt/target/dev" WAIT 
  'SHELL "umount /mnt/target/proc" WAIT
  'SHELL "umount /mnt/target/tmp" WAIT 
  'SHELL "umount /mnt/target/sys" WAIT 
  
'ME.LIST_NEW_USER_ACCOUNT()
  ME.LstUsers.Visible = TRUE      
  
END
  
  PUBLIC SUB LIST_NEW_USER_ACCOUNT()
  'needs to verify with /etc/passwd to check for user account
  DIM sFile AS String[] = Split(DConv(File.Load(clsglobal.sTargetMnt &/ "etc" &/ "passwd")))
  DIM arrline AS String[]
  DIM i, ii, iUID AS Integer
  DIM sLine, sSec, sUsrLogin, sUsrRlName, sUsrHome AS String
  DIM vuid AS Variant
  DIM tl AS TextLabel
  DIM tly AS Integer
  
  FrmUserAdd.LstUsers.Clear
  tly = 4
  FOR i = 0 TO sFile.count - 1
    sLine = sFile[i]
      ' now split each line
        arrline = Split(sLine, ":")
          FOR ii = 0 TO arrline.count - 1
            sSec = Trim(arrline[ii])
              vuid = arrline[2]
              iUID = CInt(vuid)
              sUsrLogin = arrline[0]
              sUsrRlName = arrline[4]
              sUsrHome = arrline[5]
          NEXT 
        IF iUID >= 500 THEN 
          tl = NEW TextLabel(LstUsers) AS "UserList"
              WITH tl
                  .Height = 21
                  .Text = sUsrLogin
                  .Width = MdlObjSizer.get_object_width(.Text)
                  .ToolTip = sUsrRlName & "\n" & "<b>" & "USER ID: " & "</b > " & iUid & 
                          "<b>" & "HOME DIRECTORY: " & "</b>" & sUsrHome
                  .Move(0, tly)
              END WITH 
              tly = tly + tl.Height + 2
          END IF
  NEXT 
                  
          
  
  
END

  
  

PUBLIC SUB Form_Resize()
  
  DIM iboxleft AS Integer
  DIM iboxwidth AS Integer = 250
  DIM cb AS CheckBox
  DIM icbspace, iListBottom, iListTop, iListLeft AS Integer
  DIM icby AS Integer
  DIM tl AS TextLabel
  DIM tb AS TextBox
  DIM itltop, itlbottom AS Integer
  'iboxleft = 0

   itltop = tlExp.top + tlExp.Height + 8
    
    FOR EACH tl IN otl
      tl.Move(4, itltop, MdlObjSizer.get_object_width(tl.text))
        IF tl.Width > iboxleft THEN iboxleft = tl.Left + tl.Width + 8
      itltop = itltop + tl.Height + 4
      'itlbottom = itltop + tl.Height + 4
    NEXT 
    FOR EACH tl IN otl
      FOR EACH tb IN otb
        IF tb.tag = tl.tag THEN tb.Move(iboxleft, tl.top, iboxwidth)
      NEXT 
    NEXT 

  FOR EACH tb IN otb
    IF tb.tag = "line4" THEN itlbottom = tl.top + tl.Height + 8
  NEXT 
    
    iListTop = tbUsername.Top
    iListLeft = tbUsername.Left + tbUsername.Width + 8
    iListBottom = tbPasswd2.top + tbPasswd2.Height

  WITH ME 
  
    .tlBanner.Move(4, 4, .ClientWidth - (.tlBanner.left * 2))
    .hrSep.Move(4, .tlBanner.top + .tlBanner.Height, .tlBanner.Width)
    .tlExp.Move(4, .hrSep.top + .hrSep.Height + 12, .hrSep.Width)

    
    .bUsePic.Move(4, itlbottom, MdlObjSizer.get_object_width(.bUsePic.Text) + 36)

    .tbPicPath.Move(4, .bUsePic.top + .bUsePic.Height + 2, .TextLabel2.Width + iboxwidth + 8)
    '.tbPicPath.Move(4, .bUsePic.top + .bUsePic.height + 2, .tlBanner.Width - (.btBrowse.Width + 4))
    .btBrowse.Move(.tbPicPath.Left + .tbPicPath.Width + 4, .tbPicPath.top, MdlObjSizer.get_object_width(.btBrowse.text) + 36)
    .fGroupSel.Move(4, .tbPicPath.top + .tbPicPath.Height + 4, .ClientW - (.fGroupSel.Left * 2), .ClientH - (.fGroupSel.top + (.Button1.Height)))
    .Button1.Move(4, .fGroupSel.top + .fGroupSel.Height + 8, MdlObjSizer.get_object_width(.Button1.Text) + 36)
    .btClrFrm.Move(.Button1.Left + .Button1.Width + 4, .Button1.top, MdlObjSizer.get_object_width(.btClrFrm.text) + 36)
    '.pbUsrPic.Move(.tbUsername.Left + (.tbUsername.Width + 2), .tbUsername.top)
    '.pbUsrPic.Move(.btBrowse.Left + .btBrowse.Width, tbUsername.top)
    .btgrpHelp.Move(.fGroupSel.Width - (.btgrpHelp.Width + 4), 12)
    .pbUsrPic.Move(.btgrpHelp.Left, .btgrpHelp.Top + .btgrpHelp.Height + 2)
    .frmUserList.Move(iListLeft, iListTop, 160, iListBottom - iListTop)
    .LstUsers.Move(4, 16, 150, .frmUserList.Height - (.LstUsers.Top) * 1.25)
  '  .LstUsers.Move(iListLeft, iListTop, 150, iListBottom - iListTop)
    
        icby = 16
        icbspace = 4
        
        FOR EACH cb IN MdlUsrAdd.objGrps
          IF icbspace >= .fGroupSel.Width * 0.70 THEN 
            icbspace = 4
            icby = icby + cb.Height + 4
          END IF
          cb.Move(icbspace, icby)
          icbspace = icbspace + 116
    NEXT 
    '     
    ' '     FOR EACH cb IN MdlUsrAdd.objGrps
    ' '       'icbspace = icbspace + cb.Height + 4
    ' '       IF icbspace >= .fGroupSel.Height * 0.60 THEN 
    ' '         icby = icby + 128
    ' '         icbspace = 24
    ' '       END IF
    ' '       cb.Move(icby, icbspace)
    ' '       icbspace = icbspace + cb.Height + 4
    ' ' NEXT
    ' 
 
        
      
        
    
    '     FOR EACH tl IN otl
    '   IF tl.width > iboxleft THEN 
    '     iboxleft = tl.Left + tl.Width + 8
    '   END IF
    ' NEXT 
          
          
          'FOR EACH tb IN otb
            
    ' ' '   FOR EACH cb IN MdlUsrAdd.objGrps
    ' ' '     
    ' ' '     'icbspace = icbspace + cb.Width + 4
    ' ' '       IF icbspace >= .fGroupSel.Width * 0.75 THEN 
    ' ' '         icby = icby + cb.Height * 2
    ' ' '         icbspace = 4
    ' ' '       END IF
    ' ' '          cb.Move(icbspace, icby)
    ' ' '          icbspace = icbspace + cb.Width + 4
    ' ' '          
    ' ' ' NEXT 
        
        
        
    
  
    
END WITH 

END

PUBLIC SUB tbUsername_KeyPress()

  

END



PUBLIC SUB bUsePic_Click()

  WITH ME
    .tbPicPath.Visible = bUsePic.Value
    .btBrowse.Visible = .bUsePic.Value
  END WITH 

END



PUBLIC SUB btBrowse_Click()
'ClsGlobal.sTargetMnt = "/"
  'IF Dialog.OpenFile() THEN RETURN 
    Dialog.Title = ("Select picture for user Login")
    Dialog.path = ClsGlobal.sTargetMnt &/ "usr" &/ "share" &/ "apps" &/ "kdm" &/ "pics" &/ "users"
    Dialog.Filter = ["*.png", "Picture Files", "*.jpg", "JPEG Graphics"]
    IF Dialog.OpenFile() THEN RETURN 
    tbPicPath.text = Replace(Dialog.path, ClsGlobal.sSourceMnt, "")
    ME.pbUsrPic.Picture = Picture[Dialog.Path]
    
'  END IF

END

PUBLIC SUB btClrFrm_Click()
DIM cb AS CheckBox

  WITH ME
    .tbPasswd1.Clear
    .tbPasswd2.Clear
    .tbRealname.Clear
    .tbPicPath.Clear
    .tbUsername.Clear
    .bUsePic.Value = FALSE
    .tbPicPath.Text = ""
    .tbPicPath.Visible = FALSE
    '.pbUsrPic.c
    .pbUsrPic.Visible = FALSE
    .Button1.Enabled = FALSE
    .Button1.ForeColor = Color.Gray
  END WITH 
    FOR EACH cb IN MdlUsrAdd.objGrps
      cb.Delete
    NEXT 
    MdlUsrAdd.DISPLAY_USER_GROUP_OPTIONS

END

PUBLIC SUB tbPasswd2_LostFocus()

  ' run a test here to see if passwords match
    IF tbPasswd1.Text <> tbPasswd2.Text THEN 
      Message.Error(("Your password selections do not match. Please enter the same password twice"))
    END IF
    STOP EVENT 

END

PUBLIC SUB tbUsername_KeyRelease()

  IF Key.text = Space(1) THEN 
    tbUsername.Text = Replace(tbUsername.text, Space(1), "")
  END IF

END

PUBLIC SUB btBrowse_Enter()

  'Balloon.Info("Test message in a ballooon control here", fGroupSel)

END

PUBLIC SUB btgrpHelp_Click()

  DIM sMsg AS String = "<h3>" & fGroupSel.Text & "</h3>" & "<br><br>" &
  ("Groups are a way of administering permissions for your users. You grant the user") & "<br>" &
  ("permission to do certain things by adding them to certain groups.") & "<br><br>" &
  ("Select which groups you want this user to be a part of here")
  Message(sMsg, ("OK"))

END

PUBLIC SUB tbUsername_LostFocus()

  WITH ME
    .Button1.Enabled = TRUE
    .Button1.ForeColor = Color.Black
  END WITH 
  
END

PUBLIC SUB Form_Show()
  ' 
  ME.Form_Open()
  '   Fmain.frmcurr = ME
  ' 
  ' WITH FMain
  '   .FrmCurr = ME
  '   .tvPlan["Conf2"].Picture = MdlCore.sDonePic
  '   .tvPlan["Conf3"].picture = MdlCore.sNowPic
  '   .tvPlan["Conf3"].Selected = TRUE
  ' END WITH 

END
