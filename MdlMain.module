' Gambas module file

'    This file is part of vinstall-ng

'    vinstall-ng is free software: you can redistribute it and/or modify
'    it under the terms of the GNU General Public License as published by
'    the Free Software Foundation, either version 2 of the License, or
'    (at your option) any later version.

'    vinstall-ng  is distributed in the hope that it will be useful,
'    but WITHOUT ANY WARRANTY; without even the implied warranty of
'    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
'    GNU General Public License for more details.

'    You should have received a copy of the GNU General Public License
'    along with vinstall-ng.  If not, see <http://www.gnu.org/licenses/>.
PRIVATE $pkgtotal AS Integer
PRIVATE $currpkg AS Integer
PUBLIC $objPboxes AS NEW Object[]
PUBLIC $objUsrGroups AS NEW Object[]
PRIVATE iUID AS Integer
PRIVATE $hproc AS Process

PUBLIC FUNCTION FORMAT_THIS_PARTITION(sPartition AS String, sFilesystem AS String) AS Integer
  
  DIM hproc AS Process
  DIM sFlags AS String
  
  SELECT CASE sFilesystem
    CASE "reiserfs"
    sFlags = "-f"
  END SELECT 
  
  WAIT 1
  PRINT " --+ Formatting " & sPartition & " to " & sFilesystem
  SHELL "umount -f " & sPartition
  hproc = SHELL "mkfs." & LCase(sFilesystem) & Space(1) & sFlags & Space(1) & sPartition WAIT 
    IF hproc.Value > 0 THEN Message.Error(("Unable to format") & Space(1) & sPartition & Space(1) & ("to") & Space(1) & sFilesystem)
  RETURN hproc.Value
  
END




PUBLIC SUB NAVIGATION_LOCKDOWN()
  
    WITH FMain
      .btNext.Enabled = FALSE
      .btBack.Enabled = FALSE
      .btQuit.Enabled = FALSE
    END WITH 
    WITH FMain0
      .btNext.Enabled = FALSE
      .btBack.Enabled = FALSE
      .btQuit.Enabled = FALSE
    END WITH 
    
  
END

PUBLIC SUB NAVIGATION_RESTORE()
  
      WITH FMain
      .btNext.Enabled = TRUE
      .btBack.Enabled = TRUE
      .btQuit.Enabled = TRUE
    END WITH 
    WITH FMain0
      .btNext.Enabled = TRUE
      .btBack.Enabled = TRUE
      .btQuit.Enabled = TRUE
    END WITH 
  
END

PUBLIC SUB DISPLAY_TIME_ZONES(objLb AS ListBox)
  
  DIM sList AS String
  DIM stz AS String[]
  DIM i AS Integer
  
  sList = "US/Alaska,US/Aleutian,US/Arizona,US/Central,US/East-Indiana,US/Eastern,US/Hawaii,US/Indiana-Starke, US/Michigan, US/Mountain, US/Pacific, US/Samoa, Africa/Abidjan, Africa/Accra, Africa/Addis_Ababa, Africa/Algiers, Africa/Asmera, Africa/Bamako, Africa/Bangui, Africa/Banjul, Africa/Bissau, Africa/Blantyre, Africa/Brazzaville, Africa/Bujumbura, Africa/Cairo, Africa/Casablanca, Africa/Ceuta, Africa/Conakry, Africa/Dakar, Africa/Dar_es_Salaam, Africa/Djibouti, Africa/Douala, Africa/El_Aaiun, Africa/Freetown, Africa/Gaborone, Africa/Harare, Africa/Johannesburg, Africa/Kampala, Africa/Khartoum, Africa/Kigali, Africa/Kinshasa, Africa/Lagos, Africa/Libreville, Africa/Lome, Africa/Luanda, Africa/Lubumbashi, Africa/Lusaka, Africa/Malabo, Africa/Maputo, Africa/Maseru, Africa/Mbabane, Africa/Mogadishu, Africa/Monrovia, Africa/Nairobi, Africa/Ndjamena, Africa/Niamey, Africa/Nouakchott, Africa/Ouagadougou, Africa/Porto-Novo, Africa/Sao_Tome, Africa/Timbuktu, Africa/Tripoli, Africa/Tunis, Africa/Windhoek, America/Adak, America/Anchorage, America/Anguilla, America/Antigua, America/Araguaina, America/Aruba, America/Asuncion, America/Atka, America/Barbados, America/Belem, America/Belize, America/Boa_Vista, America/Bogota, America/Boise, America/Buenos_Aires, America/Cambridge_Bay, America/Cancun, America/Caracas, America/Catamarca, America/Cayenne, America/Cayman, America/Chicago, America/Chihuahua, America/Cordoba, America/Costa_Rica, America/Cuiaba, America/Curacao, America/Dawson, America/Dawson_Creek, America/Denver, America/Detroit, America/Dominica, America/Edmonton, America/Eirunepe, America/El_Salvador, America/Ensenada, America/Fort_Wayne, America/Fortaleza, America/Glace_Bay, America/Godthab, America/Goose_Bay, America/Grand_Turk, America/Grenada, America/Guadeloupe, America/Guatemala, America/Guayaquil, America/Guyana, America/Halifax, America/Havana, America/Hermosillo, America/Indiana/Indianapolis, America/Indiana/Knox, America/Indiana/Marengo, America/Indiana/Vevay, America/Indianapolis, America/Inuvik, America/Iqaluit, America/Jamaica, America/Jujuy, America/Juneau, America/Kentucky/Louisville, America/Kentucky/Monticello, America/Knox_IN, America/La_Paz, America/Lima, America/Los_Angeles, America/Louisville, America/Maceio, America/Managua, America/Manaus, America/Martinique, America/Mazatlan, America/Mendoza, America/Menominee, America/Merida, America/Mexico_City, America/Miquelon, America/Monterrey, America/Montevideo, America/Montreal, America/Montserrat, America/Nassau, America/New_York, America/Nipigon, America/Nome, America/Noronha, America/Panama, America/Pangnirtung, America/Paramaribo, America/Phoenix, America/Port-au-Prince, America/Port_of_Spain, America/Porto_Acre, America/Porto_Velho, America/Puerto_Rico, America/Rainy_River, America/Rankin_Inlet, America/Recife, America/Regina, America/Rosario, America/Santiago, America/Santo_Domingo, America/Sao_Paulo, America/Scoresbysund, America/Shiprock, America/St_Johns, America/St_Kitts, America/St_Lucia, America/St_Thomas, America/St_Vincent, America/Swift_Current, America/Tegucigalpa, America/Thule, America/Thunder_Bay, America/Tijuana, America/Tortola, America/Vancouver, America/Virgin, America/Whitehorse, America/Winnipeg, America/Yakutat, America/Yellowknife, Antarctica/Casey, Antarctica/Davis, Antarctica/DumontDUrville, Antarctica/Mawson, Antarctica/McMurdo, Antarctica/Palmer, Antarctica/South_Pole, Antarctica/Syowa, Arctic/Longyearbyen," &
"Asia/Aden, Asia/Almaty, Asia/Amman, Asia/Anadyr, Asia/Aqtau, Asia/Aqtobe, Asia/Ashgabat, Asia/Ashkhabad, Asia/Baghdad, Asia/Bahrain, Asia/Baku, Asia/Bangkok, Asia/Beirut, Asia/Bishkek, Asia/Brunei,Asia/Calcutta,Asia/Chungking,Asia/Colombo,Asia/Dacca,Asia/Damascus,Asia/Dhaka,Asia/Dili,Asia/Dubai,Asia/Dushanbe,Asia/Gaza,Asia/Harbin,Asia/Hong_Kong,Asia/Hovd,Asia/Irkutsk,Asia/Istanbul,Asia/Jakarta,Asia/Jayapura,Asia/Jerusalem,Asia/Kabul,Asia/Kamchatka,Asia/Karachi,Asia/Kashgar,Asia/Katmandu,Asia/Krasnoyarsk,Asia/Kuala_Lumpur,Asia/Kuching,Asia/Kuwait,Asia/Macao,Asia/Macau,Asia/Magadan,Asia/Makassar,Asia/Manila,Asia/Muscat,Asia/Nicosia,Asia/Novosibirsk,Asia/Omsk,Asia/Oral,Asia/Phnom_Penh,Asia/Pyongyang,Asia/Qatar,Asia/Qyzylorda,Asia/Rangoon,Asia/Riyadh,Asia/Riyadh87,Asia/Riyadh88,Asia/Riyadh89,Asia/Saigon,Asia/Samarkand,Asia/Seoul,Asia/Shanghai,Asia/Singapore,Asia/Taipei,Asia/Tashkent,Asia/Tbilisi,Asia/Tehran,Asia/Tel_Aviv,Asia/Thimbu,Asia/Thimphu,Asia/Tokyo,Asia/Ujung_Pandang,Asia/Ulaanbaatar,Asia/Ulan_Bator,Asia/Urumqi,Asia/Vientiane,Asia/Vladivostok,Asia/Yakutsk,Asia/Yekaterinburg,Asia/Yerevan,Atlantic/Azores,Atlantic/Bermuda,Atlantic/Canary,Atlantic/Cape_Verde,Atlantic/Faeroe,Atlantic/Jan_Mayen,Atlantic/Madeira,Atlantic/Reykjavik,Atlantic/South_Georgia,Atlantic/St_Helena,Atlantic/Stanley,Australia/ACT,Australia/Adelaide,Australia/Brisbane,Australia/Broken_Hill,Australia/Canberra,Australia/Darwin,Australia/Hobart,Australia/LHI,Australia/Lindeman,Australia/Lord_Howe,Australia/Melbourne,Australia/NSW,Australia/North,Australia/Perth,Australia/Queensland,Australia/South,Australia/Sydney,Australia/Tasmania,Australia/Victoria,Australia/West,Australia/Yancowinna,Brazil/Acre,Brazil/DeNoronha,Brazil/East,Brazil/West,CET,CST6CDT,Canada/Atlantic,Canada/Central,Canada/East-Saskatchewan,Canada/Eastern,Canada/Mountain,Canada/Newfoundland,Canada/Pacific,Canada/Saskatchewan,Canada/Yukon,Chile/Continental,Chile/EasterIsland,Cuba,EET,EST,EST5EDT,Egypt,Eire,Etc/GMT,Etc/GMT+0,Etc/GMT+1,Etc/GMT+10,Etc/GMT+11,Etc/GMT+12,Etc/GMT+2,Etc/GMT+3,Etc/GMT+4,Etc/GMT+5,Etc/GMT+6,Etc/GMT+7,Etc/GMT+8,Etc/GMT+9,Etc/GMT-0,Etc/GMT-1,Etc/GMT-10,Etc/GMT-11,Etc/GMT-12,Etc/GMT-13,Etc/GMT-14,Etc/GMT-2,Etc/GMT-3,Etc/GMT-4,Etc/GMT-5,Etc/GMT-6,Etc/GMT-7,Etc/GMT-8,Etc/GMT-9,Etc/GMT0,Etc/Greenwich,Etc/UCT,Etc/UTC,Etc/Universal,Etc/Zulu,Europe/Amsterdam,Europe/Andorra,Europe/Athens,Europe/Belfast,Europe/Belgrade,Europe/Berlin,Europe/Bratislava,Europe/Brussels,Europe/Bucharest,Europe/Budapest,Europe/Chisinau,Europe/Copenhagen,Europe/Dublin,Europe/Gibraltar,Europe/Helsinki,Europe/Istanbul,Europe/Kaliningrad,Europe/Kiev,Europe/Lisbon,Europe/Ljubljana,Europe/London,Europe/Luxembourg,Europe/Madrid,Europe/Malta,Europe/Minsk,Europe/Monaco,Europe/Moscow,Europe/Nicosia,Europe/Oslo,Europe/Paris,Europe/Prague,Europe/Riga,Europe/Rome,Europe/Samara,Europe/San_Marino,Europe/Sarajevo,Europe/Simferopol,Europe/Skopje,Europe/Sofia,Europe/Stockholm,Europe/Tallinn,Europe/Tirane,Europe/Tiraspol,Europe/Uzhgorod,Europe/Vaduz,Europe/Vatican,Europe/Vienna,Europe/Vilnius,Europe/Warsaw,Europe/Zagreb,Europe/Zaporozhye,Europe/Zurich,Factory,GB,GB-Eire,GMT,GMT+0,GMT-0,GMT0,Greenwich,HST,Hongkong,Iceland,Indian/Antananarivo,Indian/Chagos,Indian/Christmas,Indian/Cocos,Indian/Comoro,Indian/Kerguelen,Indian/Mahe,Indian/Maldives,Indian/Mauritius,Indian/Mayotte,Indian/Reunion," &
"Iran,Israel,Jamaica,Japan,Kwajalein,Libya,MET,MST,MST7MDT,Mexico/BajaNorte,Mexico/BajaSur,Mexico/General,Mideast/Riyadh87,Mideast/Riyadh88,Mideast/Riyadh89,NZ,NZ-CHAT,Navajo,PRC,PST8PDT,Pacific/Apia,Pacific/Auckland,Pacific/Chatham,Pacific/Easter,Pacific/Efate,Pacific/Enderbury,Pacific/Fakaofo,Pacific/Fiji,Pacific/Funafuti,Pacific/Galapagos,Pacific/Gambier,Pacific/Guadalcanal,Pacific/Guam,Pacific/Honolulu,Pacific/Johnston,Pacific/Kiritimati,Pacific/Kosrae,Pacific/Kwajalein,Pacific/Majuro,Pacific/Marquesas,Pacific/Midway,Pacific/Nauru,Pacific/Niue,Pacific/Norfolk,Pacific/Noumea,Pacific/Pago_Pago,Pacific/Palau,Pacific/Pitcairn,Pacific/Ponape,Pacific/Port_Moresby,Pacific/Rarotonga,Pacific/Saipan,Pacific/Samoa,Pacific/Tahiti,Pacific/Tarawa,Pacific/Tongatapu,Pacific/Truk,Pacific/Wake,Pacific/Wallis,Pacific/Yap,Poland,Portugal,ROC,ROK,Singapore,SystemV/AST4,SystemV/AST4ADT,SystemV/CST6,SystemV/CST6CDT,SystemV/EST5,SystemV/EST5EDT,SystemV/HST10,SystemV/MST7,SystemV/MST7MDT,SystemV/PST8,SystemV/PST8PDT,SystemV/YST9,SystemV/YST9YDT,Turkey,UCT,UTC,Universal,W-SU,WET,Zulu,posix/Africa/Abidjan,posix/Africa/Accra,posix/Africa/Addis_Ababa,posix/Africa/Algiers,posix/Africa/Asmera,posix/Africa/Bamako,posix/Africa/Bangui,posix/Africa/Banjul,posix/Africa/Bissau,posix/Africa/Blantyre,posix/Africa/Brazzaville,posix/Africa/Bujumbura,posix/Africa/Cairo,posix/Africa/Casablanca,posix/Africa/Ceuta,posix/Africa/Conakry,posix/Africa/Dakar,posix/Africa/Dar_es_Salaam,posix/Africa/Djibouti,posix/Africa/Douala,posix/Africa/El_Aaiun,posix/Africa/Freetown,posix/Africa/Gaborone,posix/Africa/Harare,posix/Africa/Johannesburg,posix/Africa/Kampala,posix/Africa/Khartoum,posix/Africa/Kigali,posix/Africa/Kinshasa,posix/Africa/Lagos,posix/Africa/Libreville,posix/Africa/Lome,posix/Africa/Luanda,posix/Africa/Lubumbashi,posix/Africa/Lusaka,posix/Africa/Malabo,posix/Africa/Maputo,posix/Africa/Maseru,posix/Africa/Mbabane,posix/Africa/Mogadishu,posix/Africa/Monrovia,posix/Africa/Nairobi,posix/Africa/Ndjamena,posix/Africa/Niamey,posix/Africa/Nouakchott,posix/Africa/Ouagadougou,posix/Africa/Porto-Novo,posix/Africa/Sao_Tome,posix/Africa/Timbuktu,posix/Africa/Tripoli,posix/Africa/Tunis,posix/Africa/Windhoek,posix/America/Adak,posix/America/Anchorage,posix/America/Anguilla,posix/America/Antigua,posix/America/Araguaina,posix/America/Aruba,posix/America/Asuncion,posix/America/Atka,posix/America/Barbados,posix/America/Belem,posix/America/Belize,posix/America/Boa_Vista,posix/America/Bogota,posix/America/Boise,posix/America/Buenos_Aires,posix/America/Cambridge_Bay,posix/America/Cancun,posix/America/Caracas,posix/America/Catamarca,posix/America/Cayenne,posix/America/Cayman,posix/America/Chicago,posix/America/Chihuahua,posix/America/Cordoba,posix/America/Costa_Rica,posix/America/Cuiaba,posix/America/Curacao,posix/America/Dawson,posix/America/Dawson_Creek,posix/America/Denver,posix/America/Detroit,posix/America/Dominica,posix/America/Edmonton,posix/America/Eirunepe,posix/America/El_Salvador,posix/America/Ensenada,posix/America/Fort_Wayne,posix/America/Fortaleza,posix/America/Glace_Bay,posix/America/Godthab,posix/America/Goose_Bay,posix/America/Grand_Turk,posix/America/Grenada,posix/America/Guadeloupe,posix/America/Guatemala,posix/America/Guayaquil,posix/America/Guyana,posix/America/Halifax,posix/America/Havana,posix/America/Hermosillo,posix/America/Indiana/Indianapolis,posix/America/Indiana/Knox," &
"posix/America/Indiana/Marengo,posix/America/Indiana/Vevay,posix/America/Indianapolis,posix/America/Inuvik,posix/America/Iqaluit,posix/America/Jamaica,posix/America/Jujuy,posix/America/Juneau,posix/America/Kentucky/Louisville,posix/America/Kentucky/Monticello,posix/America/Knox_IN,posix/America/La_Paz,posix/America/Lima,posix/America/Los_Angeles,posix/America/Louisville,posix/America/Maceio,posix/America/Managua,posix/America/Manaus,posix/America/Martinique,posix/America/Mazatlan,posix/America/Mendoza,posix/America/Menominee,posix/America/Merida,posix/America/Mexico_City,posix/America/Miquelon,posix/America/Monterrey,posix/America/Montevideo,posix/America/Montreal,posix/America/Montserrat,posix/America/Nassau,posix/America/New_York,posix/America/Nipigon,posix/America/Nome,posix/America/Noronha,posix/America/Panama,posix/America/Pangnirtung,posix/America/Paramaribo,posix/America/Phoenix,posix/America/Port-au-Prince,posix/America/Port_of_Spain,posix/America/Porto_Acre,posix/America/Porto_Velho,posix/America/Puerto_Rico,posix/America/Rainy_River,posix/America/Rankin_Inlet,posix/America/Recife,posix/America/Regina,posix/America/Rosario,posix/America/Santiago,posix/America/Santo_Domingo,posix/America/Sao_Paulo,posix/America/Scoresbysund,posix/America/Shiprock,posix/America/St_Johns,posix/America/St_Kitts,posix/America/St_Lucia,posix/America/St_Thomas,posix/America/St_Vincent,posix/America/Swift_Current,posix/America/Tegucigalpa,posix/America/Thule,posix/America/Thunder_Bay,posix/America/Tijuana,posix/America/Tortola,posix/America/Vancouver,posix/America/Virgin,posix/America/Whitehorse,posix/America/Winnipeg,posix/America/Yakutat,posix/America/Yellowknife,posix/Antarctica/Casey,posix/Antarctica/Davis,posix/Antarctica/DumontDUrville,posix/Antarctica/Mawson,posix/Antarctica/McMurdo,posix/Antarctica/Palmer,posix/Antarctica/South_Pole,posix/Antarctica/Syowa,posix/Arctic/Longyearbyen,posix/Asia/Aden,posix/Asia/Almaty,posix/Asia/Amman,posix/Asia/Anadyr,posix/Asia/Aqtau,posix/Asia/Aqtobe,posix/Asia/Ashgabat,posix/Asia/Ashkhabad,posix/Asia/Baghdad,posix/Asia/Bahrain,posix/Asia/Baku,posix/Asia/Bangkok,posix/Asia/Beirut,posix/Asia/Bishkek,posix/Asia/Brunei,posix/Asia/Calcutta,posix/Asia/Chungking,posix/Asia/Colombo,posix/Asia/Dacca,posix/Asia/Damascus,posix/Asia/Dhaka,posix/Asia/Dili,posix/Asia/Dubai,posix/Asia/Dushanbe,posix/Asia/Gaza,posix/Asia/Harbin,posix/Asia/Hong_Kong,posix/Asia/Hovd,posix/Asia/Irkutsk,posix/Asia/Istanbul,posix/Asia/Jakarta,posix/Asia/Jayapura,posix/Asia/Jerusalem,posix/Asia/Kabul,posix/Asia/Kamchatka,posix/Asia/Karachi,posix/Asia/Kashgar,posix/Asia/Katmandu,posix/Asia/Krasnoyarsk,posix/Asia/Kuala_Lumpur,posix/Asia/Kuching,posix/Asia/Kuwait,posix/Asia/Macao,posix/Asia/Macau,posix/Asia/Magadan,posix/Asia/Makassar,posix/Asia/Manila,posix/Asia/Muscat,posix/Asia/Nicosia,posix/Asia/Novosibirsk,posix/Asia/Omsk,posix/Asia/Oral,posix/Asia/Phnom_Penh,posix/Asia/Pyongyang,posix/Asia/Qatar,posix/Asia/Qyzylorda,posix/Asia/Rangoon,posix/Asia/Riyadh,posix/Asia/Riyadh87,posix/Asia/Riyadh88,posix/Asia/Riyadh89,posix/Asia/Saigon,posix/Asia/Samarkand,posix/Asia/Seoul,posix/Asia/Shanghai,posix/Asia/Singapore,posix/Asia/Taipei,posix/Asia/Tashkent,posix/Asia/Tbilisi,posix/Asia/Tehran,posix/Asia/Tel_Aviv,posix/Asia/Thimbu,posix/Asia/Thimphu,posix/Asia/Tokyo,posix/Asia/Ujung_Pandang,posix/Asia/Ulaanbaatar,posix/Asia/Ulan_Bator,posix/Asia/Urumqi,posix/Asia/Vientiane," &
"posix/Asia/Vladivostok,posix/Asia/Yakutsk,posix/Asia/Yekaterinburg,posix/Asia/Yerevan,posix/Atlantic/Azores,posix/Atlantic/Bermuda,posix/Atlantic/Canary,posix/Atlantic/Cape_Verde,posix/Atlantic/Faeroe,posix/Atlantic/Jan_Mayen,posix/Atlantic/Madeira,posix/Atlantic/Reykjavik,posix/Atlantic/South_Georgia,posix/Atlantic/St_Helena,posix/Atlantic/Stanley,posix/Australia/ACT,posix/Australia/Adelaide,posix/Australia/Brisbane,posix/Australia/Broken_Hill,posix/Australia/Canberra,posix/Australia/Darwin,posix/Australia/Hobart,posix/Australia/LHI,posix/Australia/Lindeman,posix/Australia/Lord_Howe,posix/Australia/Melbourne,posix/Australia/NSW,posix/Australia/North,posix/Australia/Perth,posix/Australia/Queensland,posix/Australia/South,posix/Australia/Sydney,posix/Australia/Tasmania,posix/Australia/Victoria,posix/Australia/West,posix/Australia/Yancowinna,posix/Brazil/Acre,posix/Brazil/DeNoronha,posix/Brazil/East,posix/Brazil/West,posix/CET,posix/CST6CDT,posix/Canada/Atlantic,posix/Canada/Central,posix/Canada/East-Saskatchewan,posix/Canada/Eastern,posix/Canada/Mountain,posix/Canada/Newfoundland,posix/Canada/Pacific,posix/Canada/Saskatchewan,posix/Canada/Yukon,posix/Chile/Continental,posix/Chile/EasterIsland,posix/Cuba,posix/EET,posix/EST,posix/EST5EDT,posix/Egypt,posix/Eire,posix/Etc/GMT,posix/Etc/GMT+0,posix/Etc/GMT+1,posix/Etc/GMT+10,posix/Etc/GMT+11,posix/Etc/GMT+12,posix/Etc/GMT+2,posix/Etc/GMT+3,posix/Etc/GMT+4,posix/Etc/GMT+5,posix/Etc/GMT+6,posix/Etc/GMT+7,posix/Etc/GMT+8,posix/Etc/GMT+9,posix/Etc/GMT-0,posix/Etc/GMT-1,posix/Etc/GMT-10,posix/Etc/GMT-11,posix/Etc/GMT-12,posix/Etc/GMT-13,posix/Etc/GMT-14,posix/Etc/GMT-2,posix/Etc/GMT-3,posix/Etc/GMT-4,posix/Etc/GMT-5,posix/Etc/GMT-6,posix/Etc/GMT-7,posix/Etc/GMT-8,posix/Etc/GMT-9,posix/Etc/GMT0,posix/Etc/Greenwich,posix/Etc/UCT,posix/Etc/UTC,posix/Etc/Universal,posix/Etc/Zulu,posix/Europe/Amsterdam,posix/Europe/Andorra,posix/Europe/Athens,posix/Europe/Belfast,posix/Europe/Belgrade,posix/Europe/Berlin,posix/Europe/Bratislava,posix/Europe/Brussels,posix/Europe/Bucharest,posix/Europe/Budapest,posix/Europe/Chisinau,posix/Europe/Copenhagen,posix/Europe/Dublin,posix/Europe/Gibraltar,posix/Europe/Helsinki,posix/Europe/Istanbul,posix/Europe/Kaliningrad,posix/Europe/Kiev,posix/Europe/Lisbon,posix/Europe/Ljubljana,posix/Europe/London,posix/Europe/Luxembourg,posix/Europe/Madrid,posix/Europe/Malta,posix/Europe/Minsk,posix/Europe/Monaco,posix/Europe/Moscow,posix/Europe/Nicosia,posix/Europe/Oslo,posix/Europe/Paris,posix/Europe/Prague,posix/Europe/Riga,posix/Europe/Rome,posix/Europe/Samara,posix/Europe/San_Marino,posix/Europe/Sarajevo,posix/Europe/Simferopol,posix/Europe/Skopje,posix/Europe/Sofia,posix/Europe/Stockholm,posix/Europe/Tallinn,posix/Europe/Tirane,posix/Europe/Tiraspol,posix/Europe/Uzhgorod,posix/Europe/Vaduz,posix/Europe/Vatican,posix/Europe/Vienna,posix/Europe/Vilnius,posix/Europe/Warsaw,posix/Europe/Zagreb,posix/Europe/Zaporozhye,posix/Europe/Zurich,posix/Factory,posix/GB,posix/GB-Eire,posix/GMT,posix/GMT+0,posix/GMT-0,posix/GMT0,posix/Greenwich,posix/HST,posix/Hongkong,posix/Iceland,posix/Indian/Antananarivo,posix/Indian/Chagos,posix/Indian/Christmas,posix/Indian/Cocos,posix/Indian/Comoro,posix/Indian/Kerguelen,posix/Indian/Mahe,posix/Indian/Maldives,posix/Indian/Mauritius,posix/Indian/Mayotte,posix/Indian/Reunion,posix/Iran,posix/Israel,posix/Jamaica,posix/Japan,posix/Kwajalein,posix/Libya,posix/MET,posix/MST,posix/MST7MDT," &
"posix/Mexico/BajaNorte,posix/Mexico/BajaSur,posix/Mexico/General,posix/Mideast/Riyadh87,posix/Mideast/Riyadh88,posix/Mideast/Riyadh89,posix/NZ,posix/NZ-CHAT,posix/Navajo,posix/PRC,posix/PST8PDT,posix/Pacific/Apia,posix/Pacific/Auckland,posix/Pacific/Chatham,posix/Pacific/Easter,posix/Pacific/Efate,posix/Pacific/Enderbury,posix/Pacific/Fakaofo,posix/Pacific/Fiji,posix/Pacific/Funafuti,posix/Pacific/Galapagos,posix/Pacific/Gambier,posix/Pacific/Guadalcanal,posix/Pacific/Guam,posix/Pacific/Honolulu,posix/Pacific/Johnston,posix/Pacific/Kiritimati,posix/Pacific/Kosrae,posix/Pacific/Kwajalein,posix/Pacific/Majuro,posix/Pacific/Marquesas,posix/Pacific/Midway,posix/Pacific/Nauru,posix/Pacific/Niue,posix/Pacific/Norfolk,posix/Pacific/Noumea,posix/Pacific/Pago_Pago,posix/Pacific/Palau,posix/Pacific/Pitcairn,posix/Pacific/Ponape,posix/Pacific/Port_Moresby,posix/Pacific/Rarotonga,posix/Pacific/Saipan,posix/Pacific/Samoa,posix/Pacific/Tahiti,posix/Pacific/Tarawa,posix/Pacific/Tongatapu,posix/Pacific/Truk,posix/Pacific/Wake,posix/Pacific/Wallis,posix/Pacific/Yap,posix/Poland,posix/Portugal,posix/ROC,posix/ROK,posix/Singapore,posix/SystemV/AST4,posix/SystemV/AST4ADT,posix/SystemV/CST6,posix/SystemV/CST6CDT,posix/SystemV/EST5,posix/SystemV/EST5EDT,posix/SystemV/HST10,posix/SystemV/MST7,posix/SystemV/MST7MDT,posix/SystemV/PST8,posix/SystemV/PST8PDT,posix/SystemV/YST9,posix/SystemV/YST9YDT,posix/Turkey,posix/UCT,posix/US/Alaska,posix/US/Aleutian,posix/US/Arizona,posix/US/Central,posix/US/East-Indiana,posix/US/Eastern,posix/US/Hawaii,posix/US/Indiana-Starke,posix/US/Michigan,posix/US/Mountain,posix/US/Pacific,posix/US/Samoa,posix/UTC,posix/Universal,posix/W-SU,posix/WET,posix/Zulu,posixrules,right/Africa/Abidjan,right/Africa/Accra,right/Africa/Addis_Ababa,right/Africa/Algiers,right/Africa/Asmera,right/Africa/Bamako,right/Africa/Bangui,right/Africa/Banjul,right/Africa/Bissau,right/Africa/Blantyre,right/Africa/Brazzaville,right/Africa/Bujumbura,right/Africa/Cairo,right/Africa/Casablanca,right/Africa/Ceuta,right/Africa/Conakry,right/Africa/Dakar,right/Africa/Dar_es_Salaam,right/Africa/Djibouti,right/Africa/Douala,right/Africa/El_Aaiun,right/Africa/Freetown,right/Africa/Gaborone,right/Africa/Harare,right/Africa/Johannesburg,right/Africa/Kampala,right/Africa/Khartoum,right/Africa/Kigali,right/Africa/Kinshasa,right/Africa/Lagos,right/Africa/Libreville,right/Africa/Lome,right/Africa/Luanda,right/Africa/Lubumbashi,right/Africa/Lusaka,right/Africa/Malabo,right/Africa/Maputo,right/Africa/Maseru,right/Africa/Mbabane,right/Africa/Mogadishu,right/Africa/Monrovia,right/Africa/Nairobi,right/Africa/Ndjamena,right/Africa/Niamey,right/Africa/Nouakchott,right/Africa/Ouagadougou,right/Africa/Porto-Novo,right/Africa/Sao_Tome,right/Africa/Timbuktu,right/Africa/Tripoli,right/Africa/Tunis,right/Africa/Windhoek,right/America/Adak,right/America/Anchorage,right/America/Anguilla,right/America/Antigua,right/America/Araguaina,right/America/Aruba,right/America/Asuncion,right/America/Atka,right/America/Barbados,right/America/Belem,right/America/Belize,right/America/Boa_Vista,right/America/Bogota,right/America/Boise,right/America/Buenos_Aires,right/America/Cambridge_Bay,right/America/Cancun,right/America/Caracas,right/America/Catamarca,right/America/Cayenne,right/America/Cayman,right/America/Chicago,right/America/Chihuahua,right/America/Cordoba,right/America/Costa_Rica,right/America/Cuiaba,right/America/Curacao,right/America/Dawson,right/America/Dawson_Creek,right/America/Denver,right/America/Detroit," &
"right/America/Dominica,right/America/Edmonton,right/America/Eirunepe,right/America/El_Salvador,right/America/Ensenada,right/America/Fort_Wayne,right/America/Fortaleza,right/America/Glace_Bay,right/America/Godthab,right/America/Goose_Bay,right/America/Grand_Turk,right/America/Grenada,right/America/Guadeloupe,right/America/Guatemala,right/America/Guayaquil,right/America/Guyana,right/America/Halifax,right/America/Havana,right/America/Hermosillo,right/America/Indiana/Indianapolis,right/America/Indiana/Knox,right/America/Indiana/Marengo,right/America/Indiana/Vevay,right/America/Indianapolis,right/America/Inuvik,right/America/Iqaluit,right/America/Jamaica,right/America/Jujuy,right/America/Juneau,right/America/Kentucky/Louisville,right/America/Kentucky/Monticello,right/America/Knox_IN,right/America/La_Paz,right/America/Lima,right/America/Los_Angeles,right/America/Louisville,right/America/Maceio,right/America/Managua,right/America/Manaus,right/America/Martinique,right/America/Mazatlan,right/America/Mendoza,right/America/Menominee,right/America/Merida,right/America/Mexico_City,right/America/Miquelon,right/America/Monterrey,right/America/Montevideo,right/America/Montreal,right/America/Montserrat,right/America/Nassau,right/America/New_York,right/America/Nipigon,right/America/Nome,right/America/Noronha,right/America/Panama,right/America/Pangnirtung,right/America/Paramaribo,right/America/Phoenix,right/America/Port-au-Prince,right/America/Port_of_Spain,right/America/Porto_Acre,right/America/Porto_Velho,right/America/Puerto_Rico,right/America/Rainy_River,right/America/Rankin_Inlet,right/America/Recife,right/America/Regina,right/America/Rosario,right/America/Santiago,right/America/Santo_Domingo,right/America/Sao_Paulo,right/America/Scoresbysund,right/America/Shiprock,right/America/St_Johns,right/America/St_Kitts,right/America/St_Lucia,right/America/St_Thomas,right/America/St_Vincent,right/America/Swift_Current,right/America/Tegucigalpa,right/America/Thule,right/America/Thunder_Bay,right/America/Tijuana,right/America/Tortola,right/America/Vancouver,right/America/Virgin,right/America/Whitehorse,right/America/Winnipeg,right/America/Yakutat,right/America/Yellowknife,right/Antarctica/Casey,right/Antarctica/Davis,right/Antarctica/DumontDUrville,right/Antarctica/Mawson,right/Antarctica/McMurdo,right/Antarctica/Palmer,right/Antarctica/South_Pole,right/Antarctica/Syowa,right/Arctic/Longyearbyen,right/Asia/Aden,right/Asia/Almaty,right/Asia/Amman,right/Asia/Anadyr,right/Asia/Aqtau,right/Asia/Aqtobe,right/Asia/Ashgabat,right/Asia/Ashkhabad,right/Asia/Baghdad,right/Asia/Bahrain,right/Asia/Baku,right/Asia/Bangkok,right/Asia/Beirut,right/Asia/Bishkek,right/Asia/Brunei,right/Asia/Calcutta,right/Asia/Chungking,right/Asia/Colombo,right/Asia/Dacca,right/Asia/Damascus,right/Asia/Dhaka,right/Asia/Dili,right/Asia/Dubai,right/Asia/Dushanbe,right/Asia/Gaza,right/Asia/Harbin,right/Asia/Hong_Kong,right/Asia/Hovd,right/Asia/Irkutsk,right/Asia/Istanbul,right/Asia/Jakarta,right/Asia/Jayapura,right/Asia/Jerusalem,right/Asia/Kabul,right/Asia/Kamchatka,right/Asia/Karachi,right/Asia/Kashgar,right/Asia/Katmandu,right/Asia/Krasnoyarsk,right/Asia/Kuala_Lumpur,right/Asia/Kuching,right/Asia/Kuwait,right/Asia/Macao,right/Asia/Macau,right/Asia/Magadan,right/Asia/Makassar,right/Asia/Manila,right/Asia/Muscat,right/Asia/Nicosia,right/Asia/Novosibirsk,right/Asia/Omsk,right/Asia/Oral,right/Asia/Phnom_Penh,right/Asia/Pyongyang,right/Asia/Qatar,right/Asia/Qyzylorda,right/Asia/Rangoon,right/Asia/Riyadh,right/Asia/Riyadh87," &
"right/Asia/Riyadh88,right/Asia/Riyadh89,right/Asia/Saigon,right/Asia/Samarkand,right/Asia/Seoul,right/Asia/Shanghai,right/Asia/Singapore,right/Asia/Taipei,right/Asia/Tashkent,right/Asia/Tbilisi,right/Asia/Tehran,right/Asia/Tel_Aviv,right/Asia/Thimbu,right/Asia/Thimphu,right/Asia/Tokyo,right/Asia/Ujung_Pandang,right/Asia/Ulaanbaatar,right/Asia/Ulan_Bator,right/Asia/Urumqi,right/Asia/Vientiane,right/Asia/Vladivostok,right/Asia/Yakutsk,right/Asia/Yekaterinburg,right/Asia/Yerevan,right/Atlantic/Azores,right/Atlantic/Bermuda,right/Atlantic/Canary,right/Atlantic/Cape_Verde,right/Atlantic/Faeroe,right/Atlantic/Jan_Mayen,right/Atlantic/Madeira,right/Atlantic/Reykjavik,right/Atlantic/South_Georgia,right/Atlantic/St_Helena,right/Atlantic/Stanley,right/Australia/ACT,right/Australia/Adelaide,right/Australia/Brisbane,right/Australia/Broken_Hill,right/Australia/Canberra,right/Australia/Darwin,right/Australia/Hobart,right/Australia/LHI,right/Australia/Lindeman,right/Australia/Lord_Howe,right/Australia/Melbourne,right/Australia/NSW,right/Australia/North,right/Australia/Perth,right/Australia/Queensland,right/Australia/South,right/Australia/Sydney,right/Australia/Tasmania,right/Australia/Victoria,right/Australia/West,right/Australia/Yancowinna,right/Brazil/Acre,right/Brazil/DeNoronha,right/Brazil/East,right/Brazil/West,right/CET,right/CST6CDT,right/Canada/Atlantic,right/Canada/Central,right/Canada/East-Saskatchewan,right/Canada/Eastern,right/Canada/Mountain,right/Canada/Newfoundland,right/Canada/Pacific,right/Canada/Saskatchewan,right/Canada/Yukon,right/Chile/Continental,right/Chile/EasterIsland,right/Cuba,right/EET,right/EST,right/EST5EDT,right/Egypt,right/Eire,right/Etc/GMT,right/Etc/GMT+0,right/Etc/GMT+1,right/Etc/GMT+10,right/Etc/GMT+11,right/Etc/GMT+12,right/Etc/GMT+2,right/Etc/GMT+3,right/Etc/GMT+4,right/Etc/GMT+5,right/Etc/GMT+6,right/Etc/GMT+7,right/Etc/GMT+8,right/Etc/GMT+9,right/Etc/GMT-0,right/Etc/GMT-1,right/Etc/GMT-10,right/Etc/GMT-11,right/Etc/GMT-12,right/Etc/GMT-13,right/Etc/GMT-14,right/Etc/GMT-2,right/Etc/GMT-3,right/Etc/GMT-4,right/Etc/GMT-5,right/Etc/GMT-6,right/Etc/GMT-7,right/Etc/GMT-8,right/Etc/GMT-9,right/Etc/GMT0,right/Etc/Greenwich,right/Etc/UCT,right/Etc/UTC,right/Etc/Universal,right/Etc/Zulu,right/Europe/Amsterdam,right/Europe/Andorra,right/Europe/Athens,right/Europe/Belfast,right/Europe/Belgrade,right/Europe/Berlin,right/Europe/Bratislava,right/Europe/Brussels,right/Europe/Bucharest,right/Europe/Budapest,right/Europe/Chisinau,right/Europe/Copenhagen,right/Europe/Dublin,right/Europe/Gibraltar,right/Europe/Helsinki,right/Europe/Istanbul,right/Europe/Kaliningrad,right/Europe/Kiev,right/Europe/Lisbon,right/Europe/Ljubljana,right/Europe/London,right/Europe/Luxembourg,right/Europe/Madrid,right/Europe/Malta,right/Europe/Minsk,right/Europe/Monaco,right/Europe/Moscow,right/Europe/Nicosia,right/Europe/Oslo,right/Europe/Paris,right/Europe/Prague,right/Europe/Riga,right/Europe/Rome,right/Europe/Samara,right/Europe/San_Marino,right/Europe/Sarajevo,right/Europe/Simferopol,right/Europe/Skopje,right/Europe/Sofia,right/Europe/Stockholm,right/Europe/Tallinn,right/Europe/Tirane,right/Europe/Tiraspol,right/Europe/Uzhgorod,right/Europe/Vaduz,right/Europe/Vatican,right/Europe/Vienna,right/Europe/Vilnius,right/Europe/Warsaw,right/Europe/Zagreb,right/Europe/Zaporozhye,right/Europe/Zurich,right/Factory,right/GB,right/GB-Eire,right/GMT,right/GMT+0,right/GMT-0,right/GMT0,right/Greenwich,right/HST,right/Hongkong,right/Iceland,right/Indian/Antananarivo,right/Indian/Chagos,right/Indian/Christmas,right/Indian/Cocos,right/Indian/Comoro,right/Indian/Kerguelen," &
"right/Indian/Mahe,right/Indian/Maldives,right/Indian/Mauritius,right/Indian/Mayotte,right/Indian/Reunion,right/Iran,right/Israel,right/Jamaica,right/Japan,right/Kwajalein,right/Libya,right/MET,right/MST,right/MST7MDT,right/Mexico/BajaNorte,right/Mexico/BajaSur,right/Mexico/General,right/Mideast/Riyadh87,right/Mideast/Riyadh88,right/Mideast/Riyadh89,right/NZ,right/NZ-CHAT,right/Navajo,right/PRC,right/PST8PDT,right/Pacific/Apia,right/Pacific/Auckland,right/Pacific/Chatham,right/Pacific/Easter,right/Pacific/Efate,right/Pacific/Enderbury,right/Pacific/Fakaofo,right/Pacific/Fiji,right/Pacific/Funafuti,right/Pacific/Galapagos,right/Pacific/Gambier,right/Pacific/Guadalcanal,right/Pacific/Guam,right/Pacific/Honolulu,right/Pacific/Johnston,right/Pacific/Kiritimati,right/Pacific/Kosrae,right/Pacific/Kwajalein,right/Pacific/Majuro,right/Pacific/Marquesas,right/Pacific/Midway,right/Pacific/Nauru,right/Pacific/Niue,right/Pacific/Norfolk,right/Pacific/Noumea,right/Pacific/Pago_Pago,right/Pacific/Palau,right/Pacific/Pitcairn,right/Pacific/Ponape,right/Pacific/Port_Moresby,right/Pacific/Rarotonga,right/Pacific/Saipan,right/Pacific/Samoa,right/Pacific/Tahiti,right/Pacific/Tarawa,right/Pacific/Tongatapu,right/Pacific/Truk,right/Pacific/Wake,right/Pacific/Wallis,right/Pacific/Yap,right/Poland,right/Portugal,right/ROC,right/ROK,right/Singapore,right/SystemV/AST4,right/SystemV/AST4ADT,right/SystemV/CST6,right/SystemV/CST6CDT,right/SystemV/EST5,right/SystemV/EST5EDT,right/SystemV/HST10,right/SystemV/MST7,right/SystemV/MST7MDT,right/SystemV/PST8,right/SystemV/PST8PDT,right/SystemV/YST9,right/SystemV/YST9YDT,right/Turkey,right/UCT,right/US/Alaska,right/US/Aleutian,right/US/Arizona,right/US/Central,right/US/East-Indiana,right/US/Eastern,right/US/Hawaii,right/US/Indiana-Starke,right/US/Michigan,right/US/Mountain,right/US/Pacific,right/US/Samoa,right/UTC,right/Universal,right/W-SU,right/WET,right/Zulu"



  stz = Split(sList, ",")

  FOR i = 0 TO stz.Max
    objLb.Add(Trim(stz[i]))
  NEXT 
  
END

PUBLIC SUB SET_TIME_ZONE(sTimeZone AS String, hwclock AS String)
  DIM sTarget AS String = ClsGlobal.sTargetPath
  DIM sCfg AS String
  
  TRY KILL sTarget &/ "etc" &/ "localtime-copied-from"
  TRY LINK sTarget &/ "etc" &/ "localtime-copied-from" TO sTarget &/ "usr" &/ "share" &/ "zoneinfo" &/ Trim(sTimeZone)
  TRY KILL sTarget &/ "etc" &/ "localtime"
  TRY COPY sTarget &/ "usr" &/ "share" &/ "zoneinfo" &/ Trim(sTimeZone) TO sTarget &/ "etc" &/ "localtime"
  
  ' write the hadwareclock configure script
  
  sCfg = "# /etc/hardwareclock \n" &
  "# \n" &
  "# Tells how hardware clock is stored. \n" &
  "# You should run vzoneset rather than editing this file manually \n" &
  "\n\n" & hwclock
  
  TRY File.Save(sTarget &/ "etc" &/ "hardwareclock", Trim(sCfg))
  
END

PUBLIC SUB Display_User_Group_Choices(lbCont AS Container)
  
  DIM cb AS CheckBox
  DIM sList AS String[] = ["plugdev", "disk", "cdrom", "floppy", "lp", "scanner", "audio", "video", "games", "slocate", "adm", "sys", "wheel", "power"]
  DIM sDesc AS String[] = ["User can un/mount pendrives", "User can un/mount removable HD", "User can access CD/CDW/DVD devices", "User can access floppy disks", "User can access printers", "User can access scanners", "User can access audio devices", "User can access video devices", "User can play restricted games", "User can use the system\'s locate database", "Restricted System Administrator", "Unlimited system administrator", "elite users", "User can shut the system down"]
  
  
  DIM i AS Integer
  
    FOR i = 0 TO sList.Max
      cb = NEW CheckBox(lbCont) AS "GroupBoxes"
        WITH cb
          .Text = sList[i]
          .Height = 28
          .ToolTip = sDesc[i]
          IF i <= 9 OR i = 13 THEN 
            .Value = TRUE
          ELSE 
            .Value = FALSE
          END IF
          .Expand = TRUE
        END WITH 
        $objUsrGroups.Add(cb)
    NEXT 
END

PUBLIC FUNCTION CHECK_EXISTING_USER(sName AS String) AS Boolean
  
  DIM sDump AS String
  
  SHELL "grep ^\"" & sName & "\" " & ClsGlobal.sTargetPath &/ "etc/group" TO sDump
  sDump = Trim(sDump)
  IF Len(sDump) > 0 THEN 
    RETURN TRUE
  END IF
    RETURN FALSE
  
  
END


PUBLIC FUNCTION CREATE_NEW_USER_ACCOUNT(sUsrLogIn AS String, sUsrRlName AS String, sPicPath AS String, sPass AS String) AS Integer
  
  ' will return
  ' 0 = operation successful
  ' 1 = operation failed
  
  DIM cb AS CheckBox
  DIM sGrpLst, sDump AS String
  
  
  ' -= Get the list of groups this user belongs to =-
    FOR EACH cb IN $objUsrGroups
      IF cb.Value = TRUE THEN 
        sGrpLst = sGrpLst & Space(1) & cb.Text
      END IF
    NEXT 
    sGrpLst = Trim(sGrpLst)
    sGrpLst = Replace(sGrpLst, " ", ",")
    
   
  '-== Just to be safe, make sure the group user does not exist before trying to create a new user ==-
  SHELL "chroot " & ClsGlobal.sTargetPath & " /usr/sbin/groupdel " & sUsrLogIn & " > /dev/null " WAIT 
  '-== Create new group for user ==-
  SHELL "chroot " & ClsGlobal.sTargetPath & " /usr/sbin/groupadd -g " & (1000 + iUID) & Space(1) & sUsrLogIn & " > /dev/null" WAIT 
  '-== Create new user account ==-
  SHELL "chroot " & ClsGlobal.sTargetPath & " /usr/sbin/useradd -m -c \'" & sUsrRlName & "\' -g " & sUsrLogIn &
        " -p " & Trim(sPass) & " -u " & (1000 + iUID) & " -G \'" & "users," & sGrpLst & "\' -s /bin/bash " &
        Trim(sUsrLogIn) & " || echo FAILED" TO sDump
          ' [Quick error check]
            sDump = Trim(sDump)
              IF InStr(sDump, "FAILED") THEN 
                Message.Error(("Failed to create user account. See error below.") & "<br><br>" & sDump)
                RETURN 1
              END IF
  ' -== Just to be sure... re-run the password to make sure it's set ==-'
  SHELL "chroot " & ClsGlobal.sTargetPath & " /sbin/passwdx " & sUsrLogIn & Space(1) & sPass & " >/dev/null " WAIT 
  ' -== Set the face icon ==-
        IF sPicPath THEN 
          ' -= fix for KDM login (KDE3) =-
            TRY LINK ClsGlobal.sTargetPath &/ "usr/share/apps/kdm/pics/users" &/ sUsrLogIn & ".face.icon" TO sPicPath
'              CATCH  
'                SHELL "ln -s " & sPicPath & Space(1) & "/mnt/target/usr/share/apps/kdm/pics/users" &/ sUsrLogIn &/ ".face.icon" 
          ' -= fix for GDM login =-
            TRY COPY sPicPath TO ClsGlobal.sTargetPath &/ "home" &/ sUsrLogIn &/ ".face"
            SHELL "chmod 664 " & ClsGlobal.sTargetPath &/ "home" &/ sUsrLogIn &/ ".face 2>/dev/null" WAIT 
            SHELL "chroot " & ClsGlobal.sTargetPath & " /bin/chown " & sUsrLogIn & Space(1) & "/home/" &/ sUsrLogIn &/ ".face 2> /dev/null" WAIT 
            SHELL "chroot " & ClsGlobal.sTargetPath & " /bin/chgrp " & sUsrLogIn & Space(1) & "/home" &/ sUsrLogIn &/ ".face 2> /dev/null" WAIT 
      END IF
  
  ' USER ACCOUNT HAS BEEN CREATED      
  '-= increase the iUID number every time this sub runs =-
  INC iUID
  RETURN 0
  
  
END

PUBLIC SUB ADVANCE_STATUS_TREE(sPrev AS String, sNow AS String)
  
  ClsGlobal.fRunningMainForm.listview1[sPrev].picture = MdlStartUp.pDone
  ClsGlobal.fRunningMainForm.listview1[sNow].picture = MdlStartUp.pNow
  
END

PUBLIC FUNCTION PERFORM_PARTITIONING() AS Integer
  
  DIM sReqs AS String[] = Split(Trim(ClsGlobal.sVitalPartList), "|") ' partition list is a string separated by "|" (/dev/hda1-/mnt/point/-reiserfs|/dev/hda2-/mnt/point-ext3)
  DIM sPart, sFmt, scommand AS String
  DIM sPartEntry AS String[]
  DIM i, iretval AS Integer
  DIM $hproc AS Process
  
    FOR i = 0 TO sReqs.Max
      sPart = Trim(Left(sReqs[i], Len("/dev/hda1")))
      sFmt = Trim(Right(sReqs[i], Len(sReqs[i]) - RInStr(sReqs[i], "-")))
        IF Trim(sFmt) THEN 
          SELECT CASE Trim(sFmt)
             CASE "ext2"
                sCommand = "mke2fs -q " & sPart
             CASE "ext3"
                'sCommand = "mke2fs -q -j " & saddr
                scommand = "mkfs.ext3 -q -j " & sPart
             CASE "reiserfs"
                sCommand = "mkreiserfs --format 3.6 -q " & sPart
             CASE "xfs"    
                sCommand = "mkfs.xfs -f " & sPart
             CASE "jfs"
                sCommand = "mkfs.jfs -q " & sPart  
             CASE "swap"
              sCommand = "mkswap -L swap-space " & sPart
          END SELECT 
              DEBUG "Formatting " & sPart & " with " & sFmt
              Step9.tlCurrPkg.Text = ("Formatting") & Space(1) & sPart & Space(1) & ("with") & Space(1) & sFmt
            $hproc = SHELL scommand WAIT 
              IF $hproc.Value > 1 THEN 
                DEBUG sPart & " failed to format to " & sFmt
                iretval = 1
                BREAK 
              ELSE 
                DEBUG "Success!"
              END IF
      END IF
    NEXT 
    
    IF NOT (ClsGlobal.sTargetPath) THEN ClsGlobal.sTargetPath = "/mnt/target"
    ' =---------- MOUNT THE PARTITIONS NOW ----------------
      SHELL "umount /mnt/target" WAIT 
    IF iretval < 1 THEN ' if everything is OK, we should be mounting partitions here now.
      TRY MKDIR "/mnt/target"
        FOR i = 0 TO sReqs.Max
          IF Trim(sReqs[i]) THEN 
          'Message(sReqs[i])
          sPartEntry = Split(sReqs[i], "-")
            IF Trim(sPartEntry[2]) AND IF Exist(ClsGlobal.sTargetPath &/ sPartEntry[2]) = FALSE THEN TRY MKDIR ClsGlobal.sTargetPath &/ sPartEntry[2]
              SELECT CASE Trim(sPartEntry[2])
                CASE "/" 
                  $hproc = SHELL "mount " & Trim(sPartEntry[0]) & Space(1) & ClsGlobal.sTargetPath & " > /dev/null" WAIT 
                    IF $hproc.Value > 0 THEN 
                      DEBUG sPartEntry[0] & " failed to mount to " & ClsGlobal.sTargetPath &/ sPartEntry[2]
                      iretval = 1
                      BREAK 
                    ELSE 
                      PRINT " + Mounted " & sPartEntry[0] & " to " & ClsGlobal.sTargetPath &/ sPartEntry[2]
                    END IF
                CASE ELSE 
                  $hproc = SHELL "mount " & Trim(sPartEntry[0]) & ClsGlobal.sTargetPath &/ sPartEntry[2] & " > /dev/null" WAIT 
                    IF $hproc.Value > 0 THEN 
                      DEBUG sPartEntry[0] & " failed to mount to " & sPartEntry[2]
                      iretval = 1
                      BREAK 
                    ELSE 
                      PRINT " + Mounted " & sPartEntry[0] & " to " & ClsGlobal.sTargetPath &/ sPartEntry[2]
                    END IF
            END SELECT 
       END IF
      NEXT 
                    
  END IF         
        
    
  RETURN iretval
END

PUBLIC SUB COUNT_PACKAGES_TO_BE_INSTALLED()
  DIM sLine, sDump AS String
  DIM sLinearr, sdumparr, temparr AS String[]
  DIM i, ii, iBulkCnt, itotal AS Integer
  DIM cb AS CheckBox
  
  ' count required packages.
    SHELL "cat /mnt/source/veclinux/VINSTALL.CONF | grep REQ: | cut -f 2 -d :" TO sDump
      sdump = Trim(sDump)
        sdumparr = Split(sdump, gb.NewLine)
          FOR i = 0 TO sdumparr.Max
            PRINT sdumparr[i]
            temparr = Split(Trim(File.Load("/mnt/source/veclinux" &/ Trim(sdumparr[i]))), gb.NewLine)
            itotal = (itotal + temparr.Count)
          NEXT 
  SELECT CASE ClsGlobal.iInstallMethod
    CASE 0 ' full installation round up all the packages.
      'reset total because this will get counted again.
      itotal = 0
      FOR EACH sLine IN Dir("/mnt/source/veclinux")
        IF sLine <> "VINSTALL.CONF" THEN 
          temparr = Split(Trim(File.Load("/mnt/source/veclinux" &/ Trim(sLine))), gb.NewLine)
          itotal = (itotal + temparr.Count)
        END IF
      NEXT 
    CASE 1 'customized install
      ' do not reset the required for this.
      sdumparr = Split(ClsGlobal.sBulkListToInstall, ",")
      FOR EACH sLine IN sdumparr
        temparr = Split(Trim(File.Load("/mnt/source/veclinux" &/ Trim(sLine))), gb.NewLine)
          itotal = (itotal + temparr.Count)
      NEXT 
        ' now count the selected packages from optional.
        sdumparr = Split(ClsGlobal.sPkgListToInstall, ",")
        itotal = (itotal + sdumparr.Count)
    CASE 2 ' minimal installation
        ' the minimal is already counted, so we just need to find out if anything is being installed on top of it, ie, x11 or dev
        ' this is done by counting the checkboxes with values from the installation window.
        FOR EACH cb IN ClsGlobal.objMinComponents
          IF cb.Value = TRUE THEN 
            temparr = Split(Trim(File.Load("/mnt/source/veclinux" &/ Trim(cb.Tag))), gb.NewLine)
            itotal = (itotal + temparr.Count)
          END IF
        NEXT 
  END SELECT 
  
  DEBUG "Total packages to be installed : " & itotal
  $pkgtotal = itotal
    
              
  
END



PUBLIC FUNCTION INSTALL_INITIAL_PACKAGES(tlStatus AS TextLabel, pbProg AS ProgressBar) AS Integer
  
  ' This function will install the initial packages necessary for installation before anything else.
  DIM sList AS String[] = ["/x/fontconfig-*.tlz"]
  DIM sRes, sLine, $listarr AS String[]
  DIM i, ii, iret, ires AS Integer
  DIM hproc AS Process
  DIM sDump, $path, $line, sPkg, MajorDesc, sFileList AS String

  
  ' this part will isntall the bulks defined as REQUIRED
    SHELL "cat /mnt/source/veclinux/VINSTALL.CONF | grep REQ:" TO sdump
      sDump = Trim(sdump)
      sRes = Split(sDump, gb.NewLine)
        FOR i = 0 TO sRes.Max
        $line = Right(sRes[i], Len(sRes[i]) - InStr(sRes[i], "-"))
          $line = Replace($line, "\'", "")
          sLine = Split($line, ":")
          MajorDesc = sLine[3]
          sPkg = sLine[1]
            IF ME.INSTALL_THIS_BULK(tlStatus, pbProg, sPkg) > 0 THEN RETURN 1
              
              
            ' sFileList = Trim(File.Load("/mnt/source/veclinux" &/ Trim(sPKG)))
            ' $listarr = Split(Trim(sFileList), gb.NewLine)
            '   FOR ii = 0 TO $listarr.Max
            '     '$path = ME.GET_PACKAGE_FULL_PATH(Trim($listarr[ii])) ' Old method uses pkgname (slow)
            '     $path = ME.Get_FULL_TLZ_PACKAGE(Trim($listarr[ii])) ' new method sans pkgname
            '       IF $path THEN 
            '       
            '       pbProg.Value = (ii + 1) / $listarr.Count
            '         WAIT 0.2598
            '         tlStatus.Text = ("Installing required package") & Space(1) & $path
            '       
            '           ires = ME.INSTALL_THIS_PACKAGE("/mnt/source/packages" &/ Trim($path))
            '             IF ires > 0 THEN 
            '               Message.Error(("Problem while installing") & Space(1) & File.Name($path))
            '               RETURN ires
            '             END IF
            '         'pbProg.Value = (ii + 1) / $listarr.Count
            '       END IF
            '       
            '       
            '   NEXT 
                    
        NEXT 
  
END


PUBLIC SUB ADVANCE_INSTALL_PROGRESS(iStep AS Integer)
  
  DIM pb AS PictureBox
  DIM pb1 AS PictureBox
    
  FOR EACH pb IN $objPboxes
    IF pb.Tag = iStep THEN pb.Picture = Picture.Load("images/16px-check.png")
      FOR EACH pb1 IN $objPboxes
        IF pb1.Tag = (iStep + 1) THEN 
          pb1.Picture = picture.Load("images/category.png")
        END IF
      NEXT 
    'WAIT 5
  NEXT 
  
    
  
END


PUBLIC FUNCTION INSTALL_KERNEL_AND_INITRD() AS Integer
  
  DIM sfile, sdump, sname, sversion AS String
  DIM sList, sdumparr, sVersArr, sLinearr AS String[]
  DIM i AS Integer
  DIM sverstring, sKernString AS String
  DIM $hproc AS Process
  
  DEBUG "Copying kernels and intrd now ..."
  EXEC ["mkdir", "-p", ClsGlobal.sTargetPath &/ "boot"] WAIT 
    SHELL "grep ^\'ISO_KERNEL_\' /mnt/source/veclinux/VINSTALL.CONF" TO sdump
      sdump = Replace(sdump, "\'", "")
      sdump = Replace(sdump, "\"", "")
      sdump = Replace(sdump, "(", "")
      sdump = Replace(sdump, ")", "")
      sList = Split(Trim(sdump), gb.NewLine)
      FOR i = 0 TO sList.Max
        sLinearr = Split(sList[i], "=")
        sKernString = sLinearr[0]
        sname = sLinearr[1]
          ' check to see if the kernel is included and then copy it
          IF Exist("/mnt/source/isolinux/kernel" &/ Trim(sname)) THEN 
            ' now find the version, so we have a complete file name to save it
            sverstring = Replace(sKernString, "ISO", "HD")
              SHELL "grep ^\'" & sverstring & "\' /mnt/source/veclinux/VINSTALL.CONF | cut -f 2 -d \'=\'" TO sdump
                sdump = Trim(sdump)
                  IF sdump THEN 
                    sversion = Replace(sdump, "\'", "")
                    sversion = Replace(sversion, "\"", "")
                    sversion = Replace(sversion, "(", "")
                    sversion = Replace(sversion, ")", "")
                  END IF
                IF sversion THEN 'TRY COPY "/mnt/source/isolinux/kernel" &/ Trim(sname) TO ClsGlobal.sTargetPath &/ "boot" &/ "veclinux-" & Trim(sversion)
                  $hproc = SHELL "cp /mnt/source/isolinux/kernel" &/ Trim(sname) & Space(1) & ClsGlobal.sTargetPath &/ "boot" &/ "veclinux-" & Trim(sversion) WAIT 
                    IF $hproc.value > 0 THEN 
                      DEBUG "Error copying " & sname & Space(1) & "to" & Space(1) & ClsGlobal.sTargetPath &/ "boot" &/ "veclinux-" & sversion
                      Message.Error("Error while trying to copy veclinux-" & sversion) '&/ "boot" &/ "veclinux-" & sversion)
                      RETURN 1
                    END IF
                END IF
                
          END IF
      NEXT        
      
      '';'''''''''''''''' NOW COPY THE INITRD '''''''''''''''''''''
      $hproc = EXEC ["cp", "/mnt/source/isolinux/initrd.img", ClsGlobal.sTargetPath &/ "boot" &/ "initrd"] WAIT 
        IF $hproc.Value > 0 THEN 
          DEBUG "Error copying initrd"
          RETURN 1
        END IF
        
      ' Activate credits now
    ' MdlMain.CREATE_CREDIT_LABELS(Step9.svInstallProc)
    ' Step9.tmScroll.Enabled = TRUE
               
                    
            
            
        
        
    
      
    
  
    ' SHELL "grep ^\"ISO_KERNEL_\" /mnt/source/veclinux/VINSTALL.CONF | cut -f 2 -d \'=\'" TO sdump
    '   Message("Kernel search results: " & sdump)
    ' 'SHELL "cat /mnt/source/veclinux/VINSTALL.CONF | grep ^\'ISO_KERNEL_\' | cut -f 2 -d =" TO sdump
    ' sdump = Trim(Replace(sdump, "\'", ""))
    ' sdump = Trim(Replace(sdump, "\"", ""))
    ' sList = Split(sdump, gb.NewLine)
    ' FOR i = 0 TO sList.Max
    ' sfile = Trim(sList[i])
    '   IF Exist("/mnt/source/isolinux/kernel" &/ Trim(sfile)) THEN 
    '     sname = sfile
    '     ' find out which version this is
    '       SHELL "grep \'" & sname & "\' /mnt/source/veclinux/VINSTALL.CONF | cut -f 1 -d =" TO sdump
    '       sdump = Trim(sdump)
    '       SHELL "grep ^\'" & Replace(sdump, "ISO", "HD") & "\' /mnt/source/veclinux/VINSTALL.CONF | cut -f 2 -d =" TO sversion
    '       
    '       'Message("Kernel version results: " & sversion)
    '       sversion = Replace(sversion, "\'", "")
    '       sversion = Replace(sversion, "\"", "")
    '       sversion = Replace(sversion, ")", "")
    '       sversion = Trim(sversion)
    '   END IF
    '     PRINT "Copying " & sname & Space(1) & sversion & " to target install" 'Message(sname & "-" & sversion & " found")
    '   'IF sversion THEN TRY COPY "/mnt/source/isolinux/kernel" &/ sfile TO ClsGlobal.sTargetPath &/ "boot" &/ "vmlinuz-" & sversion
    '   $hproc = EXEC ["cp", "/mnt/source/isolinux/kernel" &/ sfile, ClsGlobal.sTargetPath &/ "boot" &/ "vmlinux-" & sversion] WAIT 
    '     IF $hproc.Value > 0 THEN 
    '     DEBUG "Error copying kernel " & sname & Space(1) & "(" & sversion & ")"
    '      RETURN 1
    '     END IF
    ' NEXT
    ' 
    ' 'TRY COPY "/mnt/source/isolinux/initrd.img" TO ClsGlobal.sTargetPath &/ "boot" &/ "initrd"
    '   $hproc = EXEC ["cp", "/mnt/source/isolinux/initrd.img", ClsGlobal.sTargetPath &/ "boot" &/ "initrd"] WAIT 
    '     IF $hproc.Value > 0 THEN 
    '     DEBUG "Error copying initrd"
    '     RETURN 1
    '     END IF
     
  RETURN 0
END


PUBLIC FUNCTION INSTALL_PACKAGES(tlStatus AS TextLabel, pbProg AS ProgressBar, iInstallType AS Integer) AS Integer
  
  DIM $pkg, $bulk, $bulkfile, $file, $path AS String
  DIM $BulkArr, $PkgArr, $filearr AS String[]
  DIM $pkgcnt, i, ii, iii, ires AS Integer
  DIM sDump AS String
  DIM cb AS CheckBox ' for the minimal install options
  ' Load file that defines package paths into a temp file
  SHELL "cat /mnt/source/packages/CHECKSUMS.md5 | cut -f 2-10 -d \'.\'" TO sDump
  File.Save(Temp("pkgpaths"), Trim(sDump))
  
  ClsGlobal.fRunningMainForm.btNext.enabled = FALSE
  
     tlStatus.Text = ("Preparing system partitions")
   IF MdlMain.PERFORM_PARTITIONING() > 0 THEN 
    Message.Error(("An error occurred while preparing partitions. Unable to continue"))
    RETURN 
    'RETURN 1
   ELSE 
    ' Update Status and continue to next step
      MdlMain.ADVANCE_INSTALL_PROGRESS(0)
   END IF 
   
   ' Count number of packages to be installed.
  MdlMain.COUNT_PACKAGES_TO_BE_INSTALLED()
  
  
  
  ' Install initial directory structure for the target /
    IF ME.INSTALL_INITIAL_PACKAGES(tlStatus, pbProg) > 0 THEN 
      Message.Error(("Error during installation of required software. Unable to continue"))
      RETURN 1
    ELSE 
      'uPDATE STATUS AND CONTINUE TO NEXT STEP
        ME.ADVANCE_INSTALL_PROGRESS(1)
    END IF
   
   WAIT 1 ' brace yourselves... installation is about to begin
   
    SELECT CASE iInstallType
      CASE 0
        GOTO FULL_INSTALL
      CASE 1
       GOTO CUSTOM_INSTALL
      CASE 2
        GOTO MINIMAL_INSTALL
    END SELECT 
  
  
  
  CUSTOM_INSTALL:
    ' PRE-SET BULKS ARE IN CLSGLOBAL.SBULKLISTTOINSTALL
      ' X11,LXDE,DEV,ETC
    ' SOFTWARE SELECTION IN CLSGLOBAL.SPKGLISTTOINSTALL
      ' PKG1,PKG2,PKG3,PKG4,ETC
      ' >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> CUSTOMIZED INSTALLATION BEGINS HERE <<<<<<<<<<<<<<<<<<<<<<<<
        $BulkArr = Split(Trim(ClsGlobal.sBulkListToInstall), ",")
        $PkgArr = Split(Trim(ClsGlobal.sPkgListToInstall), ",")
          
        ' Get to total number of package to be installed... this will be used for the progressbar

                'WAIT 0.0125
              'PRINT "  -- Installing bulk-preset " & $BulkArr[i]
        ' FOR i = 0 TO $BulkArr.Max
        '   IF Trim($BulkArr[i]) THEN 
        '         TRY $file = Trim(File.Load("/mnt/source/veclinux" &/ $BulkArr[i])) ' read definition file
        '          $filearr = Split(Trim($file), gb.NewLine)
        '           $pkgcnt = $pkgcnt + $filearr.Count
        '       END IF
        '     NEXT 
        '     $pkgtotal = $pkgcnt + $PkgArr.Count
        ' '   
        ' 
        ' ' add individual packages to count
        ' $pkgtotal = $pkgtotal + $PkgArr.Count
          
          
        FOR i = 0 TO $BulkArr.Max 
              IF Trim($BulkArr[i]) THEN 
                IF ME.INSTALL_THIS_BULK(tlStatus, pbProg, Trim($BulkArr[i])) > 0 THEN 
                  Message.Error(("Unable to install contents of") & Space(1) & Trim($BulkArr[i]) & "." & Space(1) & ("Cannot continue"))
                  RETURN 1
                  BREAK 
          END IF
         
              END IF
            NEXT 
                
        ' and now we do the packages. (THESE ARE LISTED IN THE 'OPTIONAL' BULK DEF)
        DEBUG "  --- Installing optional individual packages"
        $filearr = Split(ClsGlobal.sPkgListToInstall, ",")
          FOR i = 0 TO $filearr.Max
            $path = ME.GET_PACKAGE_FULL_PATH(Trim($filearr[i]))
            INC iii
            pbProg.Value = iii / $pkgcnt
              IF $path THEN 
                IF Exist("/mnt/source/packages" &/ Trim($path)) THEN 
                  WAIT 0.125
                  ires = ME.INSTALL_THIS_PACKAGE("/mnt/source/packages" &/ Trim($path))
                    IF ires > 0 THEN 
                      ClsGlobal.fRunningMainForm.btNext.enabled = TRUE
                      RETURN 1
                    END IF
                END IF
              END IF
                        IF $path THEN tlStatus.Text = "Optional package " & $path
                
            'WAIT 1
          NEXT 
          pbProg.Value = 1
          ME.ADVANCE_INSTALL_PROGRESS(2)
          Message.Info(("Installation is complete. Click") & Space(1) & ClsGlobal.fRunningMainForm.btNext.text & Space(1) & ("to continue"))
          ClsGlobal.fRunningMainForm.btNext.enabled = TRUE
          tlStatus.Text = ("Installation complete... Click") & Space(1) & ClsGlobal.fRunningMainForm.btNext.text & Space(1) & ("to continue.")
        IF ME.INSTALL_KERNEL_AND_INITRD() > 0 THEN 
            Message.Error(("Error while installing kernels and initrds"))
              DEBUG "Something wrong in the kernel installation module"
              RETURN 1
        END IF
          
    RETURN 0
  
  FULL_INSTALL:
    ' >>>>>>>>>>>> FULL INSTALLATION BEGINS HERE <<<<<<<<<<<<<<<<<<<<<<<<<<<<
      
      ' get package count first
        ' FOR EACH $bulk IN Dir("/mnt/source/veclinux")
        '   IF $bulk = "VINSTALL.CONF" THEN CONTINUE 
        '   IF $bulk = "VECLINUX" THEN CONTINUE 
        '   $BulkArr = Split(Trim(File.Load("/mnt/source/veclinux" &/ $bulk)), gb.NewLine)
        '   $pkgtotal = $pkgtotal + $BulkArr.Count
        ' NEXT 
    
    FOR EACH $bulk IN Dir("/mnt/source/veclinux")
      IF $bulk = "VINSTALL.CONF" THEN CONTINUE ' skip the conf file
      IF $bulk = "VECLINUX" THEN CONTINUE ' we already did veclinux
        DEBUG "Processing " & $bulk
          IF ME.INSTALL_THIS_BULK(tlStatus, pbProg, $bulk) > 0 THEN 
            Message.Error(("Unable to install the components of") & Space(1) & $bulk & Space(1) & ("Unable to continue."))
            RETURN 1
            BREAK 
          END IF
    NEXT 
      ME.ADVANCE_INSTALL_PROGRESS(2)
      
      Message.Info(("Installation is complete. Click") & Space(1) & ClsGlobal.fRunningMainForm.btNext.text & Space(1) & ("to continue"))
          ClsGlobal.fRunningMainForm.btNext.enabled = TRUE
          tlStatus.Text = ("Installation complete... Click") & Space(1) & ClsGlobal.fRunningMainForm.btNext.text & Space(1) & ("to continue.")
      
      IF ME.INSTALL_KERNEL_AND_INITRD() > 0 THEN 
    Message.Error(("Error while installing kernels and initrds"))
    DEBUG "Something wrong in the kernel installation module"
    RETURN 1
  END IF
      
    
    RETURN 0
  MINIMAL_INSTALL:
    
    ' >>>>>>>>>>>>>> MINIMAL INSTALLATION BEGINS HERE <<<<<<<<<<<<<<<<<<<<<<<<
    ' count extra packages
    ' FOR EACH cb IN ClsGlobal.objMinComponents
    '   IF cb.Value = TRUE THEN 
    '     $BulkArr = Split(Trim(File.Load("/mnt/source/veclinux" &/ cb.Tag)), gb.NewLine)
    '     $pkgtotal = $pkgtotal + $BulkArr.Count
    '   END IF
    ' NEXT 
    
      FOR EACH cb IN ClsGlobal.objMinComponents
        IF cb.Value = TRUE THEN 
          IF ME.INSTALL_THIS_BULK(tlStatus, pbProg, cb.Tag) > 0 THEN 
            Message.Error(("Unable to install the components of") & Space(1) & cb.Tag & Space(1) & ("Unable to continue."))
            RETURN 1
            BREAK 
          END IF
        END IF
      NEXT 
      ME.ADVANCE_INSTALL_PROGRESS(2)
      Message.Info(("Installation is complete. Click") & Space(1) & ClsGlobal.fRunningMainForm.btNext.text & Space(1) & ("to continue"))
          ClsGlobal.fRunningMainForm.btNext.enabled = TRUE
          tlStatus.Text = ("Installation complete... Click") & Space(1) & ClsGlobal.fRunningMainForm.btNext.text & Space(1) & ("to continue.")
      
    IF ME.INSTALL_KERNEL_AND_INITRD() > 0 THEN 
      Message.Error(("Error while installing kernels and initrds"))
      DEBUG "Something wrong in the kernel installation module"
      RETURN 1
  END IF
              
    RETURN 0
  
END

PUBLIC SUB WRITE_ETC_VECTOR_VERSION()

  DIM builddate AS String
  DIM sLine AS String
  
  ' Get the build date from the CONF file
  SHELL "cat /mnt/source/veclinux/VINSTALL.CONF | grep ^builddate" TO builddate
    IF builddate THEN builddate = Right(builddate, Len(builddate) - InStr(builddate, "="))
    IF builddate THEN builddate = Replace(builddate, "\"", "")
    IF builddate THEN builddate = Replace(builddate, "\'", "")
    
    sLine = ClsGlobal.sDistroName & Space(1) & ClsGlobal.sDistroVer & Space(1) & "built on" & Space(1) & builddate
    'Message(sLine)
    TRY File.Save("/mnt/target/etc/vector-version", sLine)
  
END



PUBLIC FUNCTION INSTALL_THIS_BULK(tlStatus AS TextLabel, pbProg AS ProgressBar, sBulkName AS String) AS Integer
  
  DIM $list AS String[] = Split(Trim(File.Load("/mnt/source/veclinux" &/ sBulkName)), gb.NewLine)
  DIM $pkg, $path AS String
  DIM i AS Integer
  
    FOR i = 0 TO $list.Max
      '$path = ME.GET_PACKAGE_FULL_PATH($list[i]) ' Old method using pkgname.
      $path = ME.Get_FULL_TLZ_PACKAGE($list[i]) ' New method not using pkgname
        IF $path THEN 
        
        'WAIT 0.12
        'WAIT 0.025
        'WAIT 0.0512
          WAIT 0.125
          'INC $currpkg
            tlStatus.Text = ("Installing") & Space(1) & $path & Space(1) & "(" & ("Part of") & Space(1) & sBulkName & ")"
            pbProg.Value = $currpkg / $pkgtotal
              IF ME.INSTALL_THIS_PACKAGE("/mnt/source/packages" &/ $path) > 0 THEN 
                Message.Error(("Error installing") & Space(1) & $path)
                RETURN 1
              ELSE 
                'pbProg.Value = (i + 1) / $list.Max
                
              END IF
              tlStatus.Parent.Parent.Refresh()
              ClsGlobal.fRunningMainForm.Refresh()
              'WAIT 0.035
              'WAIT 0.05
              pbProg.Value = $currpkg / $pkgtotal
        END IF
        INC $currpkg
    NEXT 
          
            
        
  
  
END


PUBLIC FUNCTION INSTALL_THIS_PACKAGE(sFullPkgPath AS String) AS Integer
  
  'DIM $hproc AS Process
  DIM sBuff AS String
    
    '$hproc = EXEC ["/sbin/installpkg ", "-R", ClsGlobal.sTargetPath, sFullPkgPath] WAIT 
    '$hproc = SHELL "/sbin/installpkg -R " & ClsGlobal.sTargetPath & Space(1) & sFullPkgPath WAIT 'TO sBuff
    '$hproc = EXEC ["/sbin/installpkg", "-q", "-R", ClsGlobal.sTargetPath, sFullPkgPath] FOR READ 'WAIT 
    $hproc = EXEC ["/sbin/installpkg", "-q", "-R", ClsGlobal.sTargetPath, sFullPkgPath] WAIT FOR OUTPUT 
    
      IF $hproc.Value > 0 THEN 
        DEBUG sFullPkgPath & Space(1) & "failed to install"
        'Message.Error($hproc.State)
        RETURN 1
      END IF
    RETURN 0
  
END

PUBLIC SUB Process_Read()
  
  DIM sLine AS String
  READ #LAST, sLine, -256
  PRINT sLine
  
END
PUBLIC SUB Process_Error(Errormessage AS String)
  
  PRINT Errormessage
  
END

PUBLIC SUB Get_FULL_TLZ_PACKAGE(sPkgname AS String) AS String
  
  DIM sNameArr, sList AS String[]
  DIM sPkg, sTlzName, sShortName, sParentDir AS String
  DIM sDump, sDump1, sRetval AS String
  DIM i, ii AS Integer
  
  sDump1 = Trim(File.Load(Temp("pkgpaths")))
  sList = Split(Trim(sDump1), gb.NewLine)
  
    FOR i = 0 TO sList.Max
      IF InStr(sList[i], sPkgname) THEN ' only jack with the strings that actually contain the pkgname in them
        
        sParentDir = Left(sList[i], RInStr(sList[i], "/"))
        sPkg = Right(sList[i], Len(sList[i]) - Len(sParentDir))
        'PRINT "Found possibel match " & sPkg & " in " & sParentDir
          ' now find out if the left of the string is the same as the package name and it is a hit for what we are looking for.
          sNameArr = Split(sPkg, "-")
          FOR ii = 0 TO (sNameArr.Count - 4)
            sTlzName = sTlzName & sNameArr[ii] & "-"
          NEXT 
            sTlzName = Left(Trim(sTlzName), Len(Trim(sTlzName)) - 1)
            'PRINT sTlzName
            IF Trim(sTlzName) = sPkgname THEN
              sRetval = sList[i] 'sParentDir &/ sPkg 'Trim(sTlzName)
              RETURN sRetval
            
              ELSE 
                sTlzName = ""
            END IF
            
      END IF
    NEXT 
    
    DEBUG sPkgname & " not found in ISO"
    'Message("Looking for " & sPkgname)
    'sRetval = sTlzName
    'Message(sTlzName)
    
  
END




PUBLIC FUNCTION GET_PACKAGE_FULL_PATH(sPkgname AS String) AS String
  
  DIM sList AS String[]
  DIM sPkg, sShortname, sParentDir AS String
  DIM sDump1, sDump, sRetval AS String
  DIM i AS Integer
  
  sdump1 = Trim(File.Load(Temp("pkgpaths")))
  sList = Split(Trim(sdump1), gb.NewLine)
  
    FOR i = 0 TO sList.Max
     
      IF InStr(sList[i], sPkgname) THEN 
      sParentDir = Left(sList[i], RInStr(sList[i], "/"))
      sPkg = Right(sList[i], Len(sList[i]) - Len(sParentDir))
        'SHELL "pkgname " & sPkg TO sDump
        EXEC ["/sbin/pkgname", sPkg] TO sDump
          IF Trim(sdump) = Trim(sPkgname) THEN 
            'PRINT "looking for " & sPkgname & Space(5) & sDump
             sRetval = sList[i]
             BREAK ' I've found a match... no need to keep looking
          END IF
      END IF
    NEXT 
    
  IF Trim(sRetval) THEN 
    RETURN Trim(sRetval)
  ELSE 
    DEBUG sPkgname & " not found"
  END IF
END

PUBLIC SUB CREATE_CREDIT_LABELS(sHostScroll AS ScrollView)
  
  DIM hb AS HBox
  DIM tl AS TextLabel
  DIM sFile AS String
  DIM sCredits AS String[]
  DIM i AS Integer
  
  hb = NEW HBox(sHostScroll)
    hb.Height = sHostScroll.Height * 1.25
    hb.Expand = TRUE
  sFile = "/mnt/source/CREDIT" ' "/mnt/loop/CREDIT" '"/mnt/source/CREDIT"
  sCredits = Split(Trim(File.Load(sFile)), gb.NewLine)
    FOR i = 0 TO sCredits.Max
      tl = NEW TextLabel(sHostScroll)
        WITH tl
          .Alignment = Align.Center
          .Height = 28
          .Expand = TRUE
            IF InStr(Trim(sCredits[i]), "M0E-lnx") THEN 
              .Height = 28 * 2
              sCredits[i] = "<b>" & "M0E-lnx" & "</b>" & "<br>" & "[ GUI Installer, vpackager, vasmCC ]"
            ELSE IF InStr(Trim(sCredits[i]), "Uelsk8s") THEN 
              .Height = 28 * 2
              sCredits[i] = "<b>" & "Uelsk8s" & "</b><br>" & "[ ISO Master, GUI installer ]"
            ELSE IF InStr(Trim(sCredits[i]), "Vector") THEN 
              .Height = 28 * 2
              sCredits[i] = "<b>" & "Vector" & "</b><br>" & "[ Founder ]"
            ELSE IF InStr(Trim(sCredits[i]), "(") THEN 
              .Height = 28 * 2
              sCredits[i] = Left(sCredits[i], InStr(sCredits[i], "(") - 1) & "<br>" & Right(sCredits[i], Len(sCredits[i]) - InStr(sCredits[i], "(") + 1)              
              sCredits[i] = Replace(sCredits[i], "(", "[ ")
              sCredits[i] = Replace(sCredits[i], ")", " ]")
            
            END IF
          .Text = sCredits[i]
        END WITH 
      hb = NEW HBox(sHostScroll)
        hb.Height = 14
        hb.Expand = TRUE
  NEXT 
  
END




